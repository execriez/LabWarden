#!/bin/bash
#
# Short:    Payload Handler Script - install a .LabWarden.plist payload
# Author:   Mark J Swift
# Version:  1.0.101
# Modified: 09-Dec-2016
#
# Called as follows:    
#   LabWarden-plist-install <somefile.LabWarden.plist> [user]
#
# Without a user specified, installs for the workstation.
# With a user, installs for the specified user.

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

sv_PayloadFilePath="${1}"

if test -z "${sv_PayloadFilePath}"
then
  LW_nf_QuickExit "Usage ${LW_sv_ThisScriptFileName} somefile.LabWarden.plist"
fi

if ! test -e "${sv_PayloadFilePath}"
then
  LW_nf_QuickExit "File not found - ${sv_PayloadFilePath}"
fi

# ---

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "${sv_PayloadFilePath} can only be installed as root"
fi

# ---

sv_GPOuser="${2}"

if test -n "${sv_GPOuser}"
then
  sv_ConfigDirPath="${LW_sv_SettingsDirPath}/Config/Users/${sv_GPOuser}"
  
else
  sv_ConfigDirPath="${LW_sv_SettingsDirPath}/Config/Computers/${LW_sv_ADComputerName}"
  
fi

# ---

# Install the LabWarden.plist config 

mkdir -p "${sv_ConfigDirPath}"

sv_ObjectName=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Name")
sv_ObjectType=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Type")
sv_ObjectUUID=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":UUID")

sv_ConfigEntryName=${sv_ObjectUUID}

if test -n "${sv_ConfigEntryName}"
then
  if test -n "${sv_ObjectName}"
  then
    if test -n "${sv_ObjectType}"
    then
  
      # check if we know what to do with the config object type
      case "${sv_ObjectType}" in
      Policy)
        sv_PolicyFilePath="/usr/local/LabWarden/Custom/Policies/${sv_ObjectName}"
        if ! test -e "${sv_PolicyFilePath}"
        then
          sv_PolicyFilePath="/usr/local/LabWarden/Policies/${sv_ObjectName}"
          if ! test -e "${sv_PolicyFilePath}"
          then
            sv_PolicyFilePath="/usr/local/LabWarden/Legacy/Policies/${sv_ObjectName}"
            if ! test -e "${sv_PolicyFilePath}"
            then
              sv_PolicyFilePath=""
            fi
          fi
        fi
        if test -z "${sv_PolicyFilePath}"
        then
          LW_nf_QuickExit "ATTENTION, there is no handler script for the ${sv_ObjectType} config ${sv_ObjectName}"
        fi
        ;;
        
      esac
      
      # Check if the entry already exists
      /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_ConfigEntryName}'" "${sv_ConfigDirPath}/LabWarden.plist"
      if [ $? -ne 0 ]
      then
        # Add a new entry
        /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_ConfigEntryName}' dict" "${sv_ConfigDirPath}/LabWarden.plist"
        if [ $? -ne 0 ]
        then
          LW_nf_QuickExit "Failed to Add dict ':${sv_ConfigEntryName}' to '${sv_ConfigDirPath}/LabWarden.plist'"
        fi
      fi
      
      # Merge config
      /usr/libexec/PlistBuddy 2>/dev/null -c "Merge '${sv_PayloadFilePath}' ':${sv_ConfigEntryName}'" "${sv_ConfigDirPath}/LabWarden.plist"
      if [ $? -ne 0 ]
      then
        /usr/libexec/PlistBuddy 2>/dev/null -c "Delete ':${sv_ConfigEntryName}'" "${sv_ConfigDirPath}/LabWarden.plist"
        LW_nf_QuickExit "Failed to Merge '${sv_PayloadFilePath}' into '${sv_ConfigDirPath}/LabWarden.plist'"
      fi
      
      # Check prefs
      /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_ConfigEntryName}:LocalPrefs'" "${sv_ConfigDirPath}/LabWarden.plist"
      if [ $? -ne 0 ]
      then
        # Create prefs
        /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_ConfigEntryName}:LocalPrefs' dict" "${sv_ConfigDirPath}/LabWarden.plist"
        if [ $? -ne 0 ]
        then
          LW_nf_QuickExit "Failed to Add dict ':${sv_ConfigEntryName}:LocalPrefs' to '${sv_ConfigDirPath}/LabWarden.plist'"
        fi
      fi  

      LW_nf_logmessage "ATTENTION, installing config for ${sv_ObjectType} '${sv_ObjectName}'"
      
      case "${sv_ObjectType}" in
      Printer)
        sv_PrinterName=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Name")
        if test -n "${sv_PrinterName}"
        then
          sv_PrinterURI=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Config:PrinterURI")
          if test -n "${sv_PrinterURI}"
          then
            sv_PPDURI=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Config:PPDURI")
            if test -n "${sv_PPDURI}"
            then
              sv_PrinterPPDFilePath=$(LW_sf_ResolveFilename "${sv_PPDURI}")
              if test -n "${sv_PrinterPPDFilePath}"
              then
                sv_PrinterOptions=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Config:Options")
                sv_PrinterLocation=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":Config:Location")

                sv_PrinterDesc=$(echo $sv_PrinterName | tr " " "_")
                sv_PrinterName=$(echo $sv_PrinterDesc | tr "-" "_")

                # If the ppd is gzipped, extract it.
                if [ "$(echo ${sv_PrinterPPDFilePath} | tr "." "\n" | tail -n1)" = "gz" ]
                then
                  gunzip -c "${sv_PrinterPPDFilePath}" > "${LW_sv_ThisScriptTempDirPath}/UNGZ.ppd"
                  sv_PrinterPPDFilePath="${LW_sv_ThisScriptTempDirPath}/UNGZ.ppd"
                fi
  
                # if we downloaded the PPD from a print server, remove filters
                if test -n "$(echo "${sv_PPDURI}" | grep ":631/")"
                then
                  if test -n "$(cat "${sv_PrinterPPDFilePath}" | grep "DOCTYPE HTML PUBLIC")"
                  then
                    sv_ErrorMessage="$(cat "${sv_PrinterPPDFilePath}" | grep -i '<TITLE>' | tr -d '\r' | tr -d '\n' | tr '\t' ' ' | sed 's|\<[^\>]*\>||g;s|^[ ]*||;s|[ ]*$||')"
                    LW_nf_logmessage "ATTENTION, error '${sv_ErrorMessage}' while downloading PPD from ${sv_PPDURI}"
                    rm -f "${sv_PrinterPPDFilePath}"
                  else
                    cat "${sv_PrinterPPDFilePath}" | grep -v "cupsFilter" | grep -v "cupsPreFilter" | grep -v "APAutoSetupTool" > "${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                    echo '*cupsFilter: "application/pdf 0 -"' >> "${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                    echo '*cupsFilter: "image/* 0 -"' >> "${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                    echo '*cupsFilter: "application/vnd.cups-command 0 -"' >> "${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                    rm -f "${sv_PrinterPPDFilePath}"
                    sv_PrinterPPDFilePath="${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                  fi

                else
                  # If there's a setup tool call it. It copies a modified PPD to stdout
                  sv_SetuptoolFilePath=$(cat "${sv_PrinterPPDFilePath}" | grep "APAutoSetupTool" | cut -d'"' -f2)
                  if test -n "${sv_SetuptoolFilePath}"
                  then
                    "${sv_SetuptoolFilePath}" "${sv_PrinterURI}" "${sv_PrinterPPDFilePath}" > "${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                    rm -f "${sv_PrinterPPDFilePath}"
                    sv_PrinterPPDFilePath="${LW_sv_ThisScriptTempDirPath}/TEMP.ppd"
                  fi
                fi

				if test -f "${sv_PrinterPPDFilePath}"
				then
                  # If we have a valid PPD file, add the printer
                  LW_nf_logmessage "ATTENTION, installing printer ${sv_PrinterName}"
                  /usr/sbin/lpadmin -p "${sv_PrinterName}" -v "${sv_PrinterURI}" -D "${sv_PrinterDesc}" -L "${sv_PrinterLocation}" -P "${sv_PrinterPPDFilePath}" "${sv_PrinterOptions}" -E

                  # If the printer is to be shared, turn on printer sharing
                  if test -n "$(echo "${sv_PrinterOptions}" | grep -i "printer-is-shared=true")"
                  then
                    LW_nf_logmessage "ATTENTION, enabling printer sharing"
                    /usr/sbin/cupsctl --share-printers
                    /usr/sbin/cupsctl WebInterface=yes
                  fi
                fi

              fi
            fi
          fi
        fi
        ;;

      Policy)        
        iv_TriggeredByEventCount="$(LW_if_GetPlistArraySize "${sv_PayloadFilePath}" ":TriggeredBy")"
        for (( iv_TriggeredByEventIndex=0; iv_TriggeredByEventIndex<${iv_TriggeredByEventCount}; iv_TriggeredByEventIndex++ ))
        do
          sv_TriggeredByEventName=$(LW_sf_GetPlistProperty "${sv_PayloadFilePath}" ":TriggeredBy:${iv_TriggeredByEventIndex}")
          if test -n "${sv_TriggeredByEventName}"
          then

            # Create object
            /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}'" "${sv_ConfigDirPath}/LabWarden.plist"
            if [ $? -ne 0 ]
            then
              # Add a new object
              /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}' dict" "${sv_ConfigDirPath}/LabWarden.plist"
              if [ $? -ne 0 ]
              then
                LW_nf_QuickExit "Failed to Add dict ':${sv_TriggeredByEventName}' to '${sv_ConfigDirPath}/LabWarden.plist'"
              fi
            fi

            # Create array
            /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}:DoesTrigger'" "${sv_ConfigDirPath}/LabWarden.plist"
            if [ $? -ne 0 ]
            then
              # Add a new object
              /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}:DoesTrigger' array" "${sv_ConfigDirPath}/LabWarden.plist"
              if [ $? -ne 0 ]
              then
                LW_nf_QuickExit "Failed to Add dict ':${sv_TriggeredByEventName}:DoesTrigger' to '${sv_ConfigDirPath}/LabWarden.plist'"
              fi
            fi
            
            iv_DoesTriggerCount="$(LW_if_GetPlistArraySize "${sv_PayloadFilePath}" ":${sv_TriggeredByEventName}:DoesTrigger")"

            if test -z "$(/usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}:DoesTrigger'" "${sv_ConfigDirPath}/LabWarden.plist" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | grep -E "^${sv_ConfigEntryName}$")"
            then
              /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' string" "${sv_ConfigDirPath}/LabWarden.plist"
              if [ $? -ne 0 ]
              then
                LW_nf_QuickExit "Failed to Add array entry ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' to '${sv_ConfigDirPath}/LabWarden.plist'"
              fi
            
              # Set array Value    
              /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Set ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' '${sv_ConfigEntryName}'" "${sv_ConfigDirPath}/LabWarden.plist"
            
            fi

          fi
        done
        ;;

      esac
          
    fi
  fi
fi

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

