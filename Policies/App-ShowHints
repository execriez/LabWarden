#!/bin/bash
#
# Short:    App Policy script - Shows a hint when a specified application opened
# Author:   Mark J Swift
# Version:  2.0.15
# Modified: 07-Sep-2017
#
# Triggered by the following events:
#   App-DidLaunch (as user)
#
# Called as follows:    
#   App-ShowHints <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.15"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

App-WillLaunch|App-DidLaunch|App-DidTerminate)

  # Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
  # Note, older applications may return "(null)"
  sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

  # Get notification e.g. WillLaunch, DidLaunch or DidTerminate
  sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

  # Get Date/Time Epoch of the notification
  iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

  # Get ApplicationName e.g. TextEdit
  sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

  # Get ApplicationPath e.g. /Applications/TextEdit.app
  sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

  # Get ApplicationProcessIdentifier - i.e. the process ID
  sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"
  
  # Note, we should quickly quit if are running an App that we are not interested in
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by application policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are an unsupported user
case ${GLB_sv_ThisUserName} in
    
root|_mbsetupuser)
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  ;;
  
esac

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

case ${sv_EventName} in
    
App-DidLaunch)
  bv_HintWasShown="false"
  iv_HintCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:AppHint")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_HintCount}; iv_LoopCount++ ))
  do
    sv_ListedAppBundleIdentifier="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:ApplicationBundleIdentifier")"
    if [ "${sv_ListedAppBundleIdentifier}" = "${sv_ThisAppBundleIdentifier}" ]
    then

      # Get message content
      sv_HintContent="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:MessageContent")"

      if test -n "${sv_HintContent}"
      then
        # Substitute APPNAME in the title and content with the actual Application name
        sv_HintContent="$(echo "${sv_HintContent}" | sed "s|APPNAME|${sv_ThisAppName}|")"

        bv_ShowHint="true"

        # Optional IsAdmin
        if [ "${bv_ShowHint}" = "true" ]
        then
          bv_LogIsActive=${GLB_bv_LogIsActive};GLB_bv_LogIsActive="false";bv_IsAdmin="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:IsAdmin")";GLB_bv_LogIsActive=${bv_LogIsActive}
          if test -n "${bv_IsAdmin}"
          then
            if [ "${bv_IsAdmin}" != "${GLB_bv_LoggedInUserIsAdmin}" ]
            then
              bv_ShowHint="false"
            fi
          fi
        fi

        # Optional IsLocalAccount
        if [ "${bv_ShowHint}" = "true" ]
        then
          bv_LogIsActive=${GLB_bv_LogIsActive};GLB_bv_LogIsActive="false";bv_IsLocalAccount="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:IsLocalAccount")";GLB_bv_LogIsActive=${bv_LogIsActive}
          if test -n "${bv_IsLocalAccount}"
          then
            if [ "${bv_IsLocalAccount}" != "${GLB_bv_LoggedInUserIsLocal}" ]
            then
              bv_ShowHint="false"
            fi
          fi
        fi

        # Optional IsLocalHome
        if [ "${bv_ShowHint}" = "true" ]
        then
          bv_LogIsActive=${GLB_bv_LogIsActive};GLB_bv_LogIsActive="false";bv_IsLocalHome="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:IsLocalHome")";GLB_bv_LogIsActive=${bv_LogIsActive}
          if test -n "${bv_IsLocalHome}"
          then
            if [ "${bv_IsLocalHome}" != "${GLB_bv_LoggedInUserHomeIsLocal}" ]
            then
              bv_ShowHint="false"
            fi
          fi
        fi

        # Display the Message
        if [ "${bv_ShowHint}" = "true" ]
        then
          GLB_nf_ShowNotification ${GLB_iv_MsgLevelNotice} "${sv_HintContent}"
        
          bv_HintWasShown="true"
        fi
      fi
    fi
    
  done
  
  if [ "${bv_HintWasShown}" = "false" ]
  then
    GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "There are no hints for the application '${sv_ThisAppBundleIdentifier}'"
  fi

  ;;

Usr-PolicyInstall|Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#/usr/local/LabWarden/lib/Trigger "${sv_EventHistory}:${sv_PolicyName}" "$(whoami)" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
