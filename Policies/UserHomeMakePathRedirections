#!/bin/bash
#
# Short:    Policy script - Create symbolic links in users home pointing to an alternative home (local or network)
# Author:   Mark J Swift
# Version:  1.0.100
# Modified: 27-Oct-2016
#
# Triggered by the following events:
#   UserLogin (as user)
#   UserAtDesktop (as user)
#
# Called as follows:    
#   UserHomeMakePathRedirections <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>
#
# This policy creates symbolic links at a path within a network users home folder that 
# point to files/folders in an "alternative" home. 
#
# With "Force local home directory on startup disk" enabled, the "alternate" home is the network home. 
# For network homes, the alternate home is the local home.
#
# It is called as the user and triggered by the "UserAtDesktop" and "UserLogin" events.
#
# If the "MakePathRedirections" key in the config is set to "false", then this policy will actively attempt
# to remove any existing redirections from the user home. 
# This is useful if you have been using folder redirections, and then change your mind.
#
# If the "MakePathRedirections" key in the config is set to "true", then this policy will act differently,
# depending on whether or not "Force local home directory on startup disk" is enabled.
#
# If "Force local home directory on startup disk" is enabled in the "User experience" tab
# of "Directory Utility", then it is serviced by the "UserAtDesktop" event.
#
# In this situation the user home is local, so the policy will attempt to create symbolic links 
# at a path within the user local home that point files/folders in the users network home. 
# These paths are defined in the config by the "Path" array within the "HomeIsLocal" key.
#
# If "Force local home directory on startup disk" is disabled in the "User experience" tab
# of "Directory Utility", then it is serviced by the "UserLogin" event.
#
# In this situation the user home is on the network, so the policy will attempt to create symbolic links
# at a path within the user network home that point to files/folders in the users local home. 
# These paths are defined in the config by the "Path" array within the "HomeIsOnNetwork" key.
#
# The policy will never apply path redirections on a mobile user account as this would make no sense.

# ---

sv_CodeVersion="1.0.100"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

Nf_UndoPathRedir() # FileRedirectList TargetHomeDir - Undo any existing home folder redirections
{
  local sv_TargetHomeDirPath
  local sv_RedirectListFilePath
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath

  sv_RedirectListFilePath="${1}"
  sv_TargetHomeDirPath="${2}"
    
  if test -f "${sv_RedirectListFilePath}"
  then
    # We may have symbolic links that need to be removed

    while read sv_ReqdLinkEntry
    do
      # Sanitise the Entry
      sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
  
      sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
      if test -n "${sv_ReqdLinkFilePath}"
      then
        if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
        then
          # There is a symbolic link where our file/folder should be
        
          if [ "${sv_ReqdLinkEntry}" != "${sv_ReqdLinkFilePath}" ]
          then
            # If the link was on a directory, re-create directory
            /bin/rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            mkdir -p "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          else
            /bin/rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi
        fi
      fi
      
    done < "${sv_RedirectListFilePath}"
    
  fi
}

Nf_DoPathRedir() # FileRedirectList TargetHomeDir SourceHomeDir
{
  local sv_TargetHomeDirPath
  local sv_SourceHomeDirPath
  local sv_RedirectListFilePath
  local sv_BackupDirPath
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath
  local sv_EnclosingDirPath
  local bv_TargetIsLocal
  local iv_StartEpoch
  local bv_GotError

  sv_RedirectListFilePath="${1}"
  sv_TargetHomeDirPath="${2}"    # Where the link files will be created
  sv_SourceHomeDirPath="${3}"    # Where the files/folders are that the links will be pointing to to

  # Take a note when this function started
  iv_StartEpoch=$(date -u "+%s")
  
  if test -f "${sv_RedirectListFilePath}"
  then
  
    # Decide whether the target is on the local drive
    if test -n "$(stat -f "%Sd" "${sv_TargetHomeDirPath}" | grep "^disk")"
    then
      bv_TargetIsLocal="true"
    else
      bv_TargetIsLocal="false"
    fi

    # Backup location for existing files/folders that might be replaced by a link
    sv_BackupDirPath="${sv_TargetHomeDirPath}/Backup/"$(date -r ${iv_StartEpoch} '+%Y-%m-%d_%H-%M-%S')

    # Read entries from file
    while read sv_ReqdLinkEntry
    do
      bv_GotError="false"

      # Sanitise the Entry
      sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
      
      sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
      if test -n "${sv_ReqdLinkFilePath}"
      then
      
        # Make sure there is a target enclosing folder to store the symbolic link
        sv_EnclosingDirPath="$(dirname "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}")"
        /bin/mkdir -p "${sv_EnclosingDirPath}"
      
        # Make sure we have a source folder or source file parent folder
        if [ "${sv_ReqdLinkEntry}" != "${sv_ReqdLinkFilePath}" ]
        then
          # We are linking to a directory - so make sure it exists
          /bin/mkdir -p "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}"
          if [ "$?" != "0" ]
          then
            LW_nf_logmessage "ATTENTION, error creating folder '${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}'"
            bv_GotError="true"
          fi
        else
          # We are linking to a file - so make sure the parent folder exists
          sv_EnclosingDirPath="$(dirname "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}")"
          /bin/mkdir -p "${sv_EnclosingDirPath}"
          if [ "$?" != "0" ]
          then
            LW_nf_logmessage "ATTENTION, error creating folder '${sv_EnclosingDirPath}'"
            bv_GotError="true"
          fi
        fi
      
        # If there are errors at source, delete any existing link at target
        if [ "${bv_GotError}" = "true" ]
        then
          if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi
        
        else
        
          # Check if a file or folder already exists at the target (where the link is going to be stored)
          if test -e "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # Delete symbolic links
            if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            then
              rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            else
              # Back up everything else
              if test -d "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
              then
                # If the existing folder at the target is local, remove any ACLs that might stop us doing our stuff
                if [ "${bv_TargetIsLocal}" = "true" ]
                then
                  /bin/chmod -RN "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                fi
                # Check if existing folder is empty - and backup if necessary
                if test -z "$(ls -A1 "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" | grep -Ev "^.DS_Store$|^.localized$")"
                then
                  /bin/rm -fR "${sv_TargetHomeDirPath}/${sv_ReqdLinkFilePath}"
                else
                  # Make sure there is a target enclosing folder to backup the folder
                  sv_EnclosingDirPath="$(dirname "${sv_BackupDirPath}${sv_ReqdLinkFilePath}")"
                  /bin/mkdir -p "${sv_EnclosingDirPath}"
                  # Move (back up) existing folder at target
                  /bin/mv -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_EnclosingDirPath}/"
                fi
              else
                # If the existing file at the target is local, remove any ACLs that might stop us doing our stuff
                if [ "${bv_TargetIsLocal}" = "true" ]
                then
                  /bin/chmod -N "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                fi
                # Make sure there is a target enclosing folder to backup the file
                sv_EnclosingDirPath="$(dirname "${sv_BackupDirPath}${sv_ReqdLinkFilePath}")"
                /bin/mkdir -p "${sv_EnclosingDirPath}"
                # Move (back up) existing file at target
                /bin/mv -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_EnclosingDirPath}/"
              fi
            fi
          fi
          
          # Create link - source file/folder -to- target link
          /bin/ln -sf "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
        fi
      fi
    done < "${sv_RedirectListFilePath}"
    
  fi
}

Nf_UnmakePathRedirections()
{
  if test -s "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
  then
    Nf_UndoPathRedir "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt" "${LW_sv_LoggedInUserHomeDirPath}"
  fi

  # Check if the Desktop was linked/unlinked
  if test -n "$(printf "$(cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt")" | grep -E "^/Desktop/$")"
  then
    # Kill the Finder (Refreshes Desktop)
    LW_nf_logmessage "NOTE, folder redirections removed and Finder reloaded"
    pkill -U ${LW_iv_ThisUserID} Finder
  fi

  rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
}

Nf_MakePathRedirections()
{
  local sv_DoRedir
  local sv_LoggedInUserHomeAltDirPath
  local sv_RedirPathConfigKey
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath
  local iv_ObjectCount
  local iv_LoopCount
  
  sv_DoRedir="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:MakePathRedirections")"
  if [ "${sv_DoRedir}" = "false" ]
  then
    # Config tells us to unmake any existing folder redirections
    LW_nf_logmessage "ATTENTION, removing any existing directory relocations."
    Nf_UnmakePathRedirections
    
  else
    # Config tells us to make folder redirections
    if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "true" ]
    then
      # The user home is local, so the links should point to the network home
      sv_RedirPathConfigKey="HomeIsLocal"
    
      # Links should point to the network home
      sv_LoggedInUserHomeAltDirPath="${LW_sv_LoggedInUserHomeNetworkDirPath}"
    
    else
      # The user home is on the network
      sv_RedirPathConfigKey="HomeIsOnNetwork"

      # Links should point to the local home
      sv_LoggedInUserHomeAltDirPath="${LW_sv_LoggedInUserLocalHomeDirPath}"
 
    fi

    if [ -z "${sv_LoggedInUserHomeAltDirPath}" ]
    then
      # The alternate home dir is unavailable - so remove any existing redirections
      # Shouldn't ever get here, because this condition is dealt with before this function is called
      LW_nf_logmessage "ERROR: alternate home dir is unavailable."
      Nf_UnmakePathRedirections
      
    else
      # There shouldn't be any folder redirections on the alternate home
      # If there are, these may have been left when swapping between "Network Homes" and "Force local homes".
      if test -s "${sv_LoggedInUserHomeAltDirPath}/.FolderRedir.txt"
      then
        Nf_UndoPathRedir "${sv_LoggedInUserHomeAltDirPath}/.FolderRedir.txt" "${sv_LoggedInUserHomeAltDirPath}"
      fi
      rm -f "${sv_LoggedInUserHomeAltDirPath}/.FolderRedir.txt"

      # Make sure the link list exists
      touch "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"

      # Check the existing link list
      rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Old.txt"
      touch "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Old.txt"
      while read sv_ReqdLinkEntry
      do
        # Sanitise the Entry
        sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
        sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
        if test -n "${sv_ReqdLinkFilePath}"
        then
          if test -L "${LW_sv_LoggedInUserHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            echo "${sv_ReqdLinkEntry}" >>"${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Old.txt"
          fi
        fi
      done < "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
            
      # Create the required link list
      rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
      touch "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
      iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:${sv_RedirPathConfigKey}:Path")"
      for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
      do
        sv_ReqdLinkEntry="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:${sv_RedirPathConfigKey}:Path:${iv_LoopCount}")"
        sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
        sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
        if test -n "${sv_ReqdLinkFilePath}"
        then
          echo "${sv_ReqdLinkEntry}" >>"${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
        fi
      done
      
      # Find out which folders we need to check for links/unlinks
      echo "$(cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt" ; cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Old.txt" )" | sort -u > "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Check.txt"

      # Find out which folders we need to unlink (if we ever change the link list)
      echo "$(cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt" ; cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Check.txt" )" | sort | uniq -u > "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Unlink.txt"

      # Find out which folders we need to link
      echo "$(cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Old.txt" ; cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Check.txt" )" | sort | uniq -u > "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Link.txt"

      # Link files (did use .FolderRedir-Link.txt, but the alternate home folder might change - so we should remake all links)
      if test -s "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
      then
        LW_nf_logmessage "ATTENTION, linking folders."
        Nf_DoPathRedir  "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt" "${LW_sv_LoggedInUserHomeDirPath}" "${sv_LoggedInUserHomeAltDirPath}"
      fi

      # Unlink files
      if test -s "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Unlink.txt"
      then
        LW_nf_logmessage "ATTENTION, unlinking folders."
        Nf_UndoPathRedir "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Unlink.txt" "${LW_sv_LoggedInUserHomeDirPath}"
      fi

      # Check if the Desktop was linked/unlinked
      if test -n "$(printf "$(cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Unlink.txt";cat "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Link.txt")" | grep -E "^/Desktop/$")"
      then
        # Kill the Finder (Refreshes Desktop)
        LW_nf_logmessage "ATTENTION, folders redirected and Finder reloaded."
        pkill -U ${LW_iv_ThisUserID} Finder
      fi

      # Delete temporary files
      rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Old.txt"
      rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Check.txt"
      rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Unlink.txt"
      rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir-Link.txt"

      # Delete the link file if it is empty
      if ! test -s "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
      then
        # Link list file is empty
        LW_nf_logmessage "ATTENTION, there are no defined folder redirections."
        rm -f "${LW_sv_LoggedInUserHomeDirPath}/.FolderRedir.txt"
        
      fi
    fi     
  fi
}

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if test -z "${LW_sv_LoggedInUserName}"
then
  LW_nf_QuickExit "NOTE, policy aborted: No-one is logged in."
  
else    
  if [ ! -e "${LW_sv_LoggedInUserHomeDirPath}" ]
  then
    LW_nf_QuickExit "NOTE, policy aborted: Home folder doesn't exist."
    
  else
    # The user home dir exists, so far so good

    if [ "${LW_bv_LoggedInUserIsLocal}" = "true" ]
    then
      # We are a local account
      
      Nf_UnmakePathRedirections
      LW_nf_QuickExit "NOTE, policy aborted: User account is local."

    else
      # We are a network account
    
      if [ "${LW_bv_LoggedInUserIsMobile}" = "true" ]
      then
        # We are a mobile network account
        
        # we dont want redirections on a mobile account, as in any case they would only work on-network
        Nf_UnmakePathRedirections
        LW_nf_logmessage "NOTE, policy aborted: User account is mobile."
        
        else
          # We are a normal (non-mobile) network account
              
          case ${sv_EventName} in
    
          UserAtDesktop)
          # Folder redirections on "forced local" homes are done when the user gets to a desktop
          if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "false" ]
          then
            # The user home is on the network
            LW_nf_QuickExit "NOTE, policy aborted: conditions met, but policy doesn't run during a ${sv_EventName} event."
                 
          else
            # The user home is "forced local"

            if [ -z "${LW_sv_LoggedInUserHomeNetworkDirPath}" ]
            then
              # "Force local home directory on startup disk" is enabled, but there is no network home mounted
        
              Nf_UnmakePathRedirections
              LW_nf_ShowNotification "DONT PANIC" "Your network share is not available at present. Try Rebooting."
              LW_nf_QuickExit "ERROR, policy aborted: Network share is unavailable."
                    
            else
              Nf_MakePathRedirections
                    
            fi
                  
          fi
          ;;
                
        UserLogin)
          # Folder redirections on network homes are done as the user is logging in
          if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "true" ]
          then
            # The user home is "forced local"
            LW_nf_QuickExit "NOTE, policy aborted: conditions met, but policy doesn't run during a ${sv_EventName} event."
                 
          else
            # The user home is on the network

            if [ ! -e "${LW_sv_LoggedInUserLocalHomeDirPath}" ]
            then
              # User home is on the network, but there is no local home
        
              Nf_UnmakePathRedirections
              LW_nf_QuickExit "ERROR, policy aborted: Local home is unavailable - that's odd."
              
            else
              Nf_MakePathRedirections
                    
            fi
                  
          fi
          ;;

        *)
          LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
          ;;

        esac
              
      fi
    fi
  fi
fi

# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
