#!/bin/bash
#
# Short:    Sys Policy script - Adds a printer
# Author:   Mark J Swift
# Version:  2.0.10
# Modified: 12-Jun-2017
#
# Triggered by the following events:
#   Sys-Poll (as root)
#
#   ... see associated config 'Sys-AddPrinter.mobileconfig'
#
# Called as follows:    
#   Sys-AddPrinter <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.10"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Usr-PolicyInstall & Usr-PolicyUninstall events (which are called as a normal user) are ignored by system policies

if [ "${sv_EventName}" = "Usr-PolicyInstall" ] || [ "${sv_EventName}" = "Usr-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# ---

# ------------------
# BEGIN YOUR CODE HERE
  
case ${sv_EventName} in

Sys-PolicyUninstall)
  # Delete the printer
  sv_DisplayName=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:DisplayName")
  if test -n "${sv_DisplayName}"
  then
    sv_PrinterDesc=$(echo $sv_DisplayName | tr " " "_")
    sv_DisplayName=$(echo $sv_PrinterDesc | tr "-" "_")
    
    if test -n "$(lpstat 2>/dev/null -a | cut -d" " -f1 | grep "${sv_DisplayName}")"
    then
      # printer exists
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Uninstalling printer ${sv_DisplayName}"
      GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing /usr/sbin/lpadmin 2>/dev/null -x '${sv_DisplayName}'"
      /usr/sbin/lpadmin 2>/dev/null -x "${sv_DisplayName}"
    fi
  fi
  ;;

Sys-Poll|Sys-PolicyInstall)
  # Add the printer
  sv_DisplayName=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:DisplayName")
  if test -n "${sv_DisplayName}"
  then
    GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Checking for printer '${sv_DisplayName}'"
    sv_PrinterDesc=$(echo $sv_DisplayName | tr " " "_")
    sv_DisplayName=$(echo $sv_PrinterDesc | tr "-" "_")

    if test -z "$(lpstat 2>/dev/null -a | cut -d" " -f1 | grep "${sv_DisplayName}")"
    then
      # printer doesnt exist
      GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Printer '${sv_DisplayName}' not yet installed"

      sv_DeviceURI=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:DeviceURI")
      if test -n "${sv_DeviceURI}"
      then
        sv_PPDURI=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:PPDURI")
        if test -n "${sv_PPDURI}"
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "PPDURI '${sv_PPDURI}'"
          if test -z "$(echo ${sv_PPDURI} | grep -E '^[^:]*://')"
          then
            # URI has no URL access mechanism - so the URI probably only specified a filename
            sv_PPDURI="file://localhost/Library/Printers/PPDs/Contents/Resources/${sv_PPDURI}"
          fi
          GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "PPDURI '${sv_PPDURI}'"
          sv_PrinterPPDFilePath=$(GLB_sf_ResolveFileURItoPath "${sv_PPDURI}")
          GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "PrinterPPDFilePath '${sv_PrinterPPDFilePath}'"
        
          if test -n "${sv_PrinterPPDFilePath}"
          then
            sv_PrinterOptions="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Options")"
            if test -z "${sv_PrinterOptions}"
            then
              sv_PrinterOptions="-o printer-is-shared=false -o printer-error-policy=abort-job"
            fi
            GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Options '${sv_PrinterOptions}'"

            sv_PrinterLocation=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Location")
            GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Location '${sv_PrinterLocation}'"

            # If the ppd is gzipped, extract it.
            if [ "$(echo ${sv_PrinterPPDFilePath} | tr "." "\n" | tail -n1)" = "gz" ]
            then
              gunzip -c "${sv_PrinterPPDFilePath}" > "${GLB_sv_ThisScriptTempDirPath}/UNGZ.ppd"
              sv_PrinterPPDFilePath="${GLB_sv_ThisScriptTempDirPath}/UNGZ.ppd"
            fi
  
            # if we downloaded the PPD from a print server, remove filters
            if test -n "$(echo "${sv_PPDURI}" | grep ":631/")"
            then
              if test -n "$(cat "${sv_PrinterPPDFilePath}" | grep "DOCTYPE HTML PUBLIC")"
              then
                sv_ErrorMessage="$(cat "${sv_PrinterPPDFilePath}" | grep -i '<TITLE>' | tr -d '\r' | tr -d '\n' | tr '\t' ' ' | sed 's|\<[^\>]*\>||g;s|^[ ]*||;s|[ ]*$||')"
                GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Got error '${sv_ErrorMessage}' while downloading PPD from ${sv_PPDURI}"
                rm -f "${sv_PrinterPPDFilePath}"
              else
                cat "${sv_PrinterPPDFilePath}" | grep -v "cupsFilter" | grep -v "cupsPreFilter" | grep -v "APAutoSetupTool" > "${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
                echo '*cupsFilter: "application/pdf 0 -"' >> "${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
                echo '*cupsFilter: "image/* 0 -"' >> "${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
                echo '*cupsFilter: "application/vnd.cups-command 0 -"' >> "${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
                rm -f "${sv_PrinterPPDFilePath}"
                sv_PrinterPPDFilePath="${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
              fi

            else
              # If there's a setup tool call it. It copies a modified PPD to stdout
              sv_SetuptoolFilePath=$(cat "${sv_PrinterPPDFilePath}" | grep "APAutoSetupTool" | cut -d'"' -f2)
              if test -n "${sv_SetuptoolFilePath}"
              then
                "${sv_SetuptoolFilePath}" "${sv_DeviceURI}" "${sv_PrinterPPDFilePath}" > "${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
                rm -f "${sv_PrinterPPDFilePath}"
                sv_PrinterPPDFilePath="${GLB_sv_ThisScriptTempDirPath}/TEMP.ppd"
              fi
            fi

            if test -f "${sv_PrinterPPDFilePath}"
            then
              # If we have a valid PPD file, add the printer
              GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Installing printer ${sv_DisplayName}"
              GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing /usr/sbin/lpadmin -E -p '${sv_DisplayName}' -v '${sv_DeviceURI}' -D '${sv_PrinterDesc}' -L '${sv_PrinterLocation}' -P '${sv_PrinterPPDFilePath}' ${sv_PrinterOptions}"

              sv_err=$(/usr/sbin/lpadmin 2>&1 -E -p "${sv_DisplayName}" -v "${sv_DeviceURI}" -D "${sv_PrinterDesc}" -L "${sv_PrinterLocation}" -P "${sv_PrinterPPDFilePath}" "${sv_PrinterOptions}")
	          iv_err=$?
	          if [ ${iv_err} -ne 0 ]
	          then
		        GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Error adding printer '${sv_DisplayName}'; (${iv_err}) ${sv_err}"
		        
		      else
		        # Un-pause the printer
		        cupsenable "${sv_DisplayName}"
		        
		        # allow print jobs
		        cupsaccept "${sv_DisplayName}"
		        
                # If the printer is to be shared, turn on printer sharing
                if test -n "$(echo "${sv_PrinterOptions}" | grep -i "printer-is-shared=true")"
                then
                  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Enabling printer sharing for printer ${sv_DisplayName}"
                  /usr/sbin/cupsctl --share-printers
                  /usr/sbin/cupsctl WebInterface=yes
                fi
              
              fi
            fi

          fi
        fi
      fi
    fi
  fi
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# END YOUR CODE HERE
# ------------------
    
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
