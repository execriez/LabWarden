#!/bin/bash
#
# Short:    Sys Policy script - Installs packages from a specified folder
# Author:   Mark J Swift
# Version:  2.0.17
# Modified: 07-Oct-2017
#
# Triggered by the following events:
#   Sys-Poll            (as root)
#   Sys-ManualTrigger   (as root)
#
# Called as follows:    
#   Sys-InstallPackageFromFolder <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.17"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Usr-PolicyInstall & Usr-PolicyUninstall events (which are called as a normal user) are ignored by system policies

if [ "${sv_EventName}" = "Usr-PolicyInstall" ] || [ "${sv_EventName}" = "Usr-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

bf_InstallPackageFromFolder() # PackageDirPath
{
  local sv_PackageDirPath
  local sv_PackageFilePath
  local sv_PackageFileName
  local iv_PackageFileCreatedEpoch
  local sv_PackageID
  local iv_InstalledCount
  local sv_ArchiveFileName
  local sv_ArchiveTempDirPath
  local bv_ArchiveInstalled
  local bv_InstallStatus

  sv_PackageDirPath="${1}"
  cd "${sv_PackageDirPath}"

  if test -n "${sv_PackageDirPath}"
  then
    # install packages
    while read sv_PackageFilePath
    do
      sv_PackageFileName="$(basename "${sv_PackageFilePath}")"
      iv_PackageFileCreatedEpoch=$(stat -f "%c" "${sv_PackageFilePath}")
      sv_PackageID="${iv_PackageFileCreatedEpoch}:${sv_PackageFileName}"
      if ! test -n "$(GLB_sf_GetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:Installed" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | grep -E "^${sv_PackageID}$")"
      then
        sv_WillRestart=$(installer -pkginfo -verbose -package "${sv_PackageFilePath}" | grep "Will Restart" | grep -E "YES$")
        if [ "$(stat -f '%Su' /dev/console)" = "root" ] || [ -z "${sv_WillRestart}" ]
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Installing ${sv_PackageFileName}"
          installer 2>&1 -pkg "${sv_PackageFilePath}" -target / >> "${GLB_sv_ThisUserLogDirPath}/${GLB_sv_ProjectSignature}.log"
          if [ $? -eq 0 ]
          then
            GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Successfully installed ${sv_PackageFileName}"
            iv_InstalledCount="$(GLB_if_GetPlistArraySize "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:Installed")"
            GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:Installed:${iv_InstalledCount}" "${sv_PackageID}"
            if [ -n "${sv_WillRestart}" ]
            then
              GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "The installed Package requires a restart."
              GLB_nf_CreateNamedFlag "Restart"
            fi
            echo "true"
            
          else
            GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Failed to install ${sv_PackageFileName}"
            echo "false"
            
          fi      
        else
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "User is logged in, delaying Install of '${sv_PackageFileName}'."
          echo "false"
          
        fi
      fi
    done < <(find "${sv_PackageDirPath}" -iname "*.pkg" -prune)

    # install packages from split tgz archives (.tgz.1 .tgz.2 .tgz.3 etc)
    while read sv_ArchiveFileName
    do
      iv_PackageFileCreatedEpoch=$(stat -f "%c" "${sv_PackageDirPath}/${sv_ArchiveFileName}.tgz.1")
      sv_PackageID="${iv_PackageFileCreatedEpoch}:${sv_ArchiveFileName}.tgz"
      if ! test -n "$(GLB_sf_GetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:Installed" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | grep -E "^${sv_PackageID}$")"
      then
        GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Unarchiving ${sv_ArchiveFileName}.tgz"
        sv_ArchiveTempDirPath="$(mktemp -dq ${GLB_sv_ThisScriptTempDirPath}/${sv_ArchiveFileName}-XXXXXXXX)"
        cat $(ls -1 "${sv_PackageDirPath}" | grep -E "${sv_ArchiveFileName}\.tgz\.[0-9]{1}$" | sort) | tar -xvzf - -C "${sv_ArchiveTempDirPath}"
        bv_InstallStatus="$(bf_InstallPackageFromFolder "${sv_ArchiveTempDirPath}")"
        if [ -z "$(echo "${bv_InstallStatus}" | grep "false")" ]
        then
          iv_InstalledCount="$(GLB_if_GetPlistArraySize "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:Installed")"
          GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:Installed:${iv_InstalledCount}" "${sv_PackageID}"
        fi
        echo "${bv_InstallStatus}"
      fi
    done < <(ls -1 "${sv_PackageDirPath}" | grep -E "\.tgz\.[0-9]{1}$" | sed -E "s|(.*)(\.tgz\.[0-9]{1}$)|\1|" | sort -u)
  fi
}

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# ---

case ${sv_EventName} in
    
Sys-Idle|Sys-ManualTrigger)
  bv_PackagesInstalled="false"
  iv_PathCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_PathCount}; iv_LoopCount++ ))
  do
    sv_PackageDirPath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path:${iv_LoopCount}")"
    if test -n "${sv_PackageDirPath}"
    then
      bv_InstallStatus="$(bf_InstallPackageFromFolder "${sv_PackageDirPath}")"
    fi
  done
  ;;

Sys-PolicyInstall|Sys-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# We might never get here, but I don't suppose that matters
#/usr/local/LabWarden/lib/Trigger "${sv_EventHistory}:${sv_PolicyName}" "$(whoami)" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
