#!/bin/bash
#
# Short:    App Policy script - Restricts application usage depending on a blacklist or whitelist
# Author:   Mark J Swift
# Version:  2.0.15
# Modified: 07-Sep-2017
#
# Triggered by the following events:
#   App-WillLaunch (as user)
#
# Called as follows:    
#   App-Restrict <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.15"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

App-WillLaunch|App-DidLaunch|App-DidTerminate)

  # Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
  # Note, older applications may return "(null)"
  sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

  # Get notification e.g. WillLaunch, DidLaunch or DidTerminate
  sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

  # Get Date/Time Epoch of the notification
  iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

  # Get ApplicationName e.g. TextEdit
  sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

  # Get ApplicationPath e.g. /Applications/TextEdit.app
  sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

  # Get ApplicationProcessIdentifier - i.e. the process ID
  sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"
  
  # Note, we should quickly quit if are running an App that we are not interested in
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by application policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are an unsupported user
case ${GLB_sv_ThisUserName} in
    
root|_mbsetupuser)
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  ;;
  
esac

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

# Exit if the user is an admin
if [ "${GLB_bv_LoggedInUserIsAdmin}" = "true" ]
then
  GLB_nf_QuickExit "Policy aborted - user is an admin."
fi

# ---

case ${sv_EventName} in
    
App-WillLaunch)
  # Any Application in the ExceptionList is exempt from Whitelist/BlackList checking
  # This allows you to have Apps that will run from any location without having to implement a whitelist
  # The format is ^ApplicationName1/ApplicationBundleIdentifier1|ApplicationName2/ApplicationBundleIdentifier2|...$
  # If an application has no ApplicationBundleIdentifier then specify ApplicationName/(null) i.e TextWrangler/(null)
  # Regular expressions can be used.

  # Build ExceptionList
  sv_ExceptionList=""

  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExceptionList")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ListedAppName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExceptionList:${iv_LoopCount}:ApplicationName")"
    if test -n "${sv_ListedAppName}"
    then
      sv_ListedAppBundleIdentifier="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExceptionList:${iv_LoopCount}:ApplicationBundleIdentifier")"
      if test -n "${sv_ListedAppBundleIdentifier}"
      then
        sv_ExceptionList="${sv_ExceptionList}|^${sv_ListedAppName}/${sv_ListedAppBundleIdentifier}$"
      fi    
    fi
  done
  sv_ExceptionList=$(echo "${sv_ExceptionList}" | sed "s/^|//")
    
  # If the WhiteList is not null, then these Applications (and only these) are allowed.
  # When the WhiteList is not null, then it should at least contain "Finder/com.apple.Finder" or maybe even ".*/com.apple\..*"
  # Regular expressions can be used.

  # Build WhiteList
  sv_WhiteList=""

  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:WhiteList")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ListedAppName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:WhiteList:${iv_LoopCount}:ApplicationName")"
    if test -n "${sv_ListedAppName}"
    then
      sv_ListedAppBundleIdentifier="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:WhiteList:${iv_LoopCount}:ApplicationBundleIdentifier")"
      if test -n "${sv_ListedAppBundleIdentifier}"
      then
        sv_WhiteList="${sv_WhiteList}|^${sv_ListedAppName}/${sv_ListedAppBundleIdentifier}$"
      fi    
    fi
  done
  sv_WhiteList=$(echo "${sv_WhiteList}" | sed "s/^|//")

  # Any Application in the BlackList is always disallowed for non-admins
  # Regular expressions can be used.

  # Build BlackList
  sv_BlackList=""

  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:BlackList")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ListedAppName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:BlackList:${iv_LoopCount}:ApplicationName")"
    if test -n "${sv_ListedAppName}"
    then
      sv_ListedAppBundleIdentifier="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:BlackList:${iv_LoopCount}:ApplicationBundleIdentifier")"
      if test -n "${sv_ListedAppBundleIdentifier}"
      then
        sv_BlackList="${sv_BlackList}|^${sv_ListedAppName}/${sv_ListedAppBundleIdentifier}$"
      fi    
    fi
  done
  sv_BlackList=$(echo "${sv_BlackList}" | sed "s/^|//")

  # If the path WhiteList is not null, then Applications at the specified paths (and only these paths) are allowed.
  # When the path WhiteList is not null, it should at least contain "^/Applications/.*$|^/System/Library/CoreServices/.*$"
  # ~/ is expanded to the current user home before comparison.
  # Regular expressions should be used.

  # Build PathWhiteList
  sv_PathWhiteList=""

  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:PathWhiteList")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ListedAppFilePath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:PathWhiteList:${iv_LoopCount}")"
    if test -n "${sv_ListedAppFilePath}"
    then
      sv_PathWhiteList="${sv_PathWhiteList}|^${sv_ListedAppFilePath}$"
    fi
  done
  sv_PathWhiteList=$(echo "${sv_PathWhiteList}" | sed "s/^\|//;s|~/|"$(eval echo ~/)"|g")

  # Any application located at a path in the path BlackList is always disallowed for non-admins
  # ~/ is expanded to the current user home before comparison.
  # Regular expressions should be used.

  # Build PathBlackList
  sv_PathBlackList=""

  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:PathBlackList")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ListedAppFilePath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:PathBlackList:${iv_LoopCount}")"
    if test -n "${sv_ListedAppFilePath}"
    then
      sv_PathBlackList="${sv_PathBlackList}|^${sv_ListedAppFilePath}$"
    fi
  done
  sv_PathBlackList=$(echo "${sv_PathBlackList}" | sed "s/^\|//;s|~/|"$(eval echo ~/)"|g")

  # Should we disallow applications running on mounts
  bv_OnlyAllowLocalApps="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:OnlyAllowLocalApps")"

  # Do some simple blacklisting/whitelisting of apps
  
  # Build an Identity for the App from the ApplicationName and the ApplicationBundleIdentifier
  sv_ThisAppFingerprint="${sv_ThisAppName}/${sv_ThisAppBundleIdentifier}"

  bv_DisallowStatus="false"

  if [ -z "${sv_ExceptionList}" -o -z "$(echo "${sv_ThisAppFingerprint}" | grep -E "${sv_ExceptionList}")" ]
  then
    # The ExceptionList is empty -or- the application is not in the ExceptionList
    
    if [ -n "${sv_WhiteList}" -a -z "$(echo "${sv_ThisAppFingerprint}" | grep -E "${sv_WhiteList}")" ]
    then
      # The WhiteList is not empty -and- the application is not in the WhiteList

      bv_DisallowStatus="true"
      sv_DisallowMessage="RESTRICTED APPLICATION. ${sv_ThisAppName} is not in the list of allowed Applications."

    else
      if [ -n "${sv_BlackList}" -a -n "$(echo "${sv_ThisAppFingerprint}" | grep -E "${sv_BlackList}")" ]
      then
        # The BlackList is not empty -and- the application is in the BlackList

        bv_DisallowStatus="true"
        sv_DisallowMessage="RESTRICTED APPLICATION. ${sv_ThisAppName} can only be run by the administrator."
  
      else
        if [ -n "${sv_PathWhiteList}" -a -z "$(echo "${sv_ThisAppFilePath}" | grep -E "${sv_PathWhiteList}")" ]
        then
          # The PathWhiteList is not empty -and- the application path is not in the PathWhiteList

          bv_DisallowStatus="true"
          sv_DisallowMessage="UNKNOWN PATH. Applications in $(dirname "${sv_ThisAppFilePath}")/ are disallowed"
    
        else
          if [ -n "${sv_PathBlackList}" -a -n "$(echo "${sv_ThisAppFilePath}" | grep -E "${sv_PathBlackList}")" ]
          then
            # The PathBlackList is not empty -and- the application path is in the PathBlackList
    
            bv_DisallowStatus="true"
            sv_DisallowMessage="RESTRICTED PATH. Applications in $(dirname "${sv_ThisAppFilePath}")/ are disallowed."
    
          else
            # Should we disallow applications running from mount points?

            if [ "${bv_OnlyAllowLocalApps}" = "true" ]
            then
              # Check ApplicationPath against the system mount points
              while read sv_MountPoint
              do
                if test -n "$(echo "${sv_ThisAppFilePath}" | grep -E "^${sv_MountPoint}/")"
                then
                  bv_DisallowStatus="true"
                  sv_DisallowMessage="RESTRICTED LOCATION. Applications can only be run from the internal hard drive."
                  break
                fi
              done < <(mount | sed -E 's/^.* on //;s/ \([^(]*\)$//' | grep -v '^/$')
            fi

          fi
        fi
      fi
    fi
  fi
  
  # - Should we kill the app? -
  
  if [ "${bv_DisallowStatus}" = "false" ]
  then
    GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "The application '${sv_ThisAppFingerprint}' is not restricted"

  else
    GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Killing restricted application '${sv_ThisAppProcessID}'"
    kill ${sv_ThisAppProcessID}
    GLB_nf_ShowNotification ${GLB_iv_MsgLevelNotice} "${sv_DisallowMessage}"

  fi
  ;;

Usr-PolicyInstall|Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#/usr/local/LabWarden/lib/Trigger "${sv_EventHistory}:${sv_PolicyName}" "$(whoami)" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
