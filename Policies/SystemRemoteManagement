#!/bin/bash
#
# Short:    Remote Management
# Author:   Mark J Swift
# Version:  1.0.100
# Modified: 27-Oct-2016
#
# Triggered by the following events:
#   Boot (as root)
#   NetworkUp (as root)
#
# Called as follows:    
#   SystemRemoteManagement <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.100"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get the event that triggered this policy.
# This can be one of the following system events:
#   Boot, LoginWindow, NetworkUp, NetworkDown, LoginBegin, LogoutEnd, LoginWindowIdle, LoginWindowRestartOrShutdown, SystemPoll
# ...or one of the following User events:
#   UserLogin, UserAtDesktop, AppWillLaunch, AppDidLaunch, AppDidTerminate, UserPoll, UserLogout

sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "NOTE, policy aborted: User '${LW_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  
else    
  LW_nf_logmessage "ATTENTION, running Policy '${sv_PolicyName}'"

  # references:
  #  https://www.jamf.com/jamf-nation/discussions/6682/ard-kickstart-script-to-contribute
  #  https://ssl.apple.com/remotedesktop/pdf/ARD3_AdminGuide.pdf

  case ${sv_EventName} in
    
  Boot)
    if [ ! -e "${LW_sv_ThisUserTempDirPath}/${sv_PolicyName}-${sv_EventName}-BEGIN" ]
    then
      touch "${LW_sv_ThisUserTempDirPath}/${sv_PolicyName}-${sv_EventName}-BEGIN"
      
      # At boot time, we clear all remote management settings
      LW_nf_logmessage "ATTENTION, setting up ARD - removing all settings"
    
      # Uninstall all existing ARD settings and prefs, enable directory authentication options, restrict ARD service access to specific users, activate and restart agent
      /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -quiet -uninstall -settings -prefs -configure -allowAccessFor -specifiedUsers -clientopts -setmenuextra -menuextra no -setdirlogins -dirlogins yes -setreqperm -reqperm no -activate -restart -agent -console

      # Create (and empty) ard groups.
      dscl >/dev/null 2>&1 . -read /Groups/ard_admin
      if [ "$?" != "0" ]
      then
        sv_PrimaryGroupID=$(dscl . -list /Groups PrimaryGroupID| sort -n -k 2 | awk '{ field = $NF }; END{ print field }' | xargs -I{} expr {} + 1)
        dscl . -create /Groups/ard_admin
        dscl . -create /Groups/ard_admin PrimaryGroupID "${sv_PrimaryGroupID}"
        dscl . -create /Groups/ard_admin Password "*"
        dscl . -create /Groups/ard_admin RealName "ard_admin"
      else
        dscl >/dev/null 2>&1 . -delete /Groups/ard_admin GroupMembers
        dscl >/dev/null 2>&1 . -delete /Groups/ard_admin GroupMembership
        dscl >/dev/null 2>&1 . -delete /Groups/ard_admin NestedGroups
      fi
      dscl >/dev/null 2>&1 . -create /Groups/ard_admin GroupMembers
      dscl >/dev/null 2>&1 . -create /Groups/ard_admin GroupMembership
      

      dscl >/dev/null 2>&1 . -read /Groups/ard_interact
      if [ "$?" != "0" ]
      then
        sv_PrimaryGroupID=$(dscl . -list /Groups PrimaryGroupID| sort -n -k 2 | awk '{ field = $NF }; END{ print field }' | xargs -I{} expr {} + 1)
        dscl . -create /Groups/ard_interact
        dscl . -create /Groups/ard_interact PrimaryGroupID "${sv_PrimaryGroupID}"
        dscl . -create /Groups/ard_interact Password "*"
        dscl . -create /Groups/ard_interact RealName "ard_interact"
      else
        dscl >/dev/null 2>&1 . -delete /Groups/ard_interact GroupMembers
        dscl >/dev/null 2>&1 . -delete /Groups/ard_interact GroupMembership
        dscl >/dev/null 2>&1 . -delete /Groups/ard_interact NestedGroups
      fi
      dscl >/dev/null 2>&1 . -create /Groups/ard_interact GroupMembers
      dscl >/dev/null 2>&1 . -create /Groups/ard_interact GroupMembership

      dscl >/dev/null 2>&1 . -read /Groups/ard_manage
      if [ "$?" != "0" ]
      then
        sv_PrimaryGroupID=$(dscl . -list /Groups PrimaryGroupID| sort -n -k 2 | awk '{ field = $NF }; END{ print field }' | xargs -I{} expr {} + 1)
        dscl . -create /Groups/ard_manage
        dscl . -create /Groups/ard_manage PrimaryGroupID "${sv_PrimaryGroupID}"
        dscl . -create /Groups/ard_manage Password "*"
        dscl . -create /Groups/ard_manage RealName "ard_manage"
      else
        dscl >/dev/null 2>&1 . -delete /Groups/ard_manage GroupMembers
        dscl >/dev/null 2>&1 . -delete /Groups/ard_manage GroupMembership
        dscl >/dev/null 2>&1 . -delete /Groups/ard_manage NestedGroups
      fi
      dscl >/dev/null 2>&1 . -create /Groups/ard_manage GroupMembers
      dscl >/dev/null 2>&1 . -create /Groups/ard_manage GroupMembership

      dscl >/dev/null 2>&1 . -read /Groups/ard_reports
      if [ "$?" != "0" ]
      then
        sv_PrimaryGroupID=$(dscl . -list /Groups PrimaryGroupID| sort -n -k 2 | awk '{ field = $NF }; END{ print field }' | xargs -I{} expr {} + 1)
        dscl . -create /Groups/ard_reports
        dscl . -create /Groups/ard_reports PrimaryGroupID "${sv_PrimaryGroupID}"
        dscl . -create /Groups/ard_reports Password "*"
        dscl . -create /Groups/ard_reports RealName "ard_reports"
      else
        dscl >/dev/null 2>&1 . -delete /Groups/ard_reports GroupMembers
        dscl >/dev/null 2>&1 . -delete /Groups/ard_reports GroupMembership
        dscl >/dev/null 2>&1 . -delete /Groups/ard_reports NestedGroups
      fi
      dscl >/dev/null 2>&1 . -create /Groups/ard_reports GroupMembers
      dscl >/dev/null 2>&1 . -create /Groups/ard_reports GroupMembership

      LW_nf_logmessage "ATTENTION, setting up ARD - done"
      touch "${LW_sv_ThisUserTempDirPath}/${sv_PolicyName}-${sv_EventName}-END"
    fi

    ;;
  
  NetworkUp)
  
    # Wait for the ARD boot initialisation to finish - though don't want to wait around too long
    iv_DelayCount=0
    while [ ${iv_DelayCount} -lt 30 ]
    do
      if [ -e "${LW_sv_ThisUserTempDirPath}/${sv_PolicyName}-Boot-END" ]
      then
        break
      fi

      # we don't want to hog the CPU - so lets sleep a while
      LW_nf_logmessage "ATTENTION, waiting around until ARD is completely setup"
      sleep 1
      
      iv_DelayCount=$((${iv_DelayCount}+1))
    done

    if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
    then
      # we need to be on the domains network
      LW_nf_logmessage "ATTENTION, not on ${LW_sv_ADDomainNameFlat} network"
        
    else
      
      # Wait for directory services to load - though don't want to wait around too long
      iv_DelayCount=0
      while [ ${iv_DelayCount} -lt 10 ]
      do
        dscl >/dev/null 2>&1 localhost -read /Search/Computers/${LW_sv_ADComputerName}$ name
        if [ "$?" = "0" ]
        then
          break
        fi
      
        # we don't want to hog the CPU - so lets sleep a while
        LW_nf_logmessage "ATTENTION, waiting around until I can access Directory Services"
        sleep 1
      
        iv_DelayCount=$((${iv_DelayCount}+1))
      done

      # Check that directory services is accessible
      dscl >/dev/null 2>&1 localhost -read /Search/Computers/${LW_sv_ADComputerName}$ name
      if [ "$?" != "0" ]
      then
        sv_Error="ERROR - workstation needs to be rebound to AD (trust relationship failure)"
        LW_nf_logmessage "${sv_Error}"
            
        # Update the RemoteDesktop Computer Info Field #4
        /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -computerinfo -set1 -4 "${sv_Error}"

      else
        sv_ADpath=$(dscl 2>/dev/null localhost -read "/Search/Computers/${LW_sv_ADTrustAccount}" distinguishedName | sed 's|^.*distinguishedName:||;/^\s*$/d' | sed 's|[^,]*=||g;s|,|\.|g;s|\.'${LW_sv_ADDomainNameDNS}'||g;s|\.|,|g' | cut -d',' -f2-)
        if test -n "${sv_ADpath}"
        then
          # Update the RemoteDesktop Computer Info Fields #1-3
        /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -computerinfo -set1 -1 "$(echo "${sv_ADpath}" | cut -d"," -f1)" -set2 -2 "$(echo "${sv_ADpath}" | cut -d"," -f2)" -set3 -3 "$(echo "${sv_ADpath}" | cut -d"," -f3-)" -set1 -4 ""
        fi

        # Add directory users to appropriate ard group
        iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Users")"
        for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
        do
          sv_ObjectName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Users:${iv_LoopCount}:Name")"
          sv_ObjectAccess="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Users:${iv_LoopCount}:Access")"
          dscl >/dev/null 2>&1 . -read /Groups/"ard_${sv_ObjectAccess}"
          if [ "$?" = "0" ]
          then
            dseditgroup -o edit -a "${sv_ObjectName}" -t user "ard_${sv_ObjectAccess}"
            if [ "$?" = "0" ]
            then
              LW_nf_logmessage "ATTENTION, adding user '${sv_ObjectName}' to ard_${sv_ObjectAccess}"
            else
              LW_nf_logmessage "ERROR, cannot add user '${sv_ObjectName}' to ard_${sv_ObjectAccess}"
            fi

          fi
        done

        # Add directory groups to appropriate ard group
        iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Groups")"
        for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
        do
          sv_ObjectName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Groups:${iv_LoopCount}:Name")"
          sv_ObjectAccess="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Groups:${iv_LoopCount}:Access")"
          dscl >/dev/null 2>&1 . -read /Groups/"ard_${sv_ObjectAccess}"
          if [ "$?" = "0" ]
          then
            dseditgroup -o edit -a "${sv_ObjectName}" -t group "ard_${sv_ObjectAccess}"
            if [ "$?" = "0" ]
            then
              LW_nf_logmessage "ATTENTION, adding group '${sv_ObjectName}' to ard_${sv_ObjectAccess}"
            else
              LW_nf_logmessage "ERROR, cannot add group '${sv_ObjectName}' to ard_${sv_ObjectAccess}"
            fi
          fi
        done

      fi
        
      # set privileges for local users
      iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:LocalUsers")"
      for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
      do
        sv_ObjectName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:LocalUsers:${iv_LoopCount}:Name")"

        # Build the list of privileges
        sv_PrivsList=""
        iv_PrivsCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:LocalUsers:${iv_LoopCount}:Privs")"
        for (( iv_LoopCount2=0; iv_LoopCount2<${iv_PrivsCount}; iv_LoopCount2++ ))
        do
          sv_ObjectPrivs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:LocalUsers:${iv_LoopCount}:Privs:${iv_LoopCount2}")"
          case ${sv_ObjectPrivs} in
        
          all)
            sv_PrivsList="-privs -${sv_ObjectPrivs}"
            break
            ;;
          
          none)
            sv_PrivsList="-privs -${sv_ObjectPrivs}"
            break
            ;;
        
          DeleteFiles|ControlObserve|TextMessages|ShowObserve|OpenQuitApps|GenerateReports|RestartShutDown|SendFiles|ChangeSettings|ObserveOnly)
            if test -z "${sv_PrivsList}"
            then
              sv_PrivsList="-privs -${sv_ObjectPrivs}"
            else
              sv_PrivsList="${sv_PrivsList} -${sv_ObjectPrivs}"
            fi
            ;;
       
          esac
      
        done
        LW_nf_logmessage "ATTENTION, setting user '${sv_ObjectName}' ARD access to '${sv_PrivsList}'"
        eval /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -quiet -configure -access -on -users "${sv_ObjectName}" "${sv_PrivsList}"
      
      done
    
    fi
    ;;
    
  esac
fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
