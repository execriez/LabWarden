#!/bin/bash
#
# Short:    Usr Policy script - Syncs specified folders from the users local home to network home
# Author:   Mark J Swift
# Version:  2.0.10
# Modified: 12-Jun-2017
#
# Triggered by the following events:
#   Usr-AtDesktop (as user)
#   Usr-Logout    (as user)
#
# Called as follows:    
#   Usr-SyncLocalHomeToNetwork <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.10"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by user policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

nf_SyncFiles() # Src Dst
{
  local sv_SrcDirPath
  local sv_DstDirPath

  sv_SrcDirPath="${1}"
  sv_DstDirPath="${2}"
      
  if [ -e "${sv_SrcDirPath}" ]
  then
    # Source exists
    if [ -d "${sv_SrcDirPath}" ]
    then
      # Sync directory
      if [ -n "$(ls -A1 "${sv_SrcDirPath}" | grep -Ev "^.DS_Store$|^.localized$")" ]
      then
        # Only sync if the source dir is not empty
        mkdir -p "${sv_DstDirPath}"
        GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing rsync -rltDxXv '${sv_SrcDirPath}/' '${sv_DstDirPath}' --delete"
        ${GLB_sv_BinDirPath}/rsync -rltDxXv "${sv_SrcDirPath}/" "${sv_DstDirPath}" --delete
      fi
    else
      # Sync File
      mkdir -p "$(dirname "${sv_SrcDirPath}")"
      GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing rsync -rltDxXv '${sv_SrcDirPath}' '${sv_DstDirPath}'"
      ${GLB_sv_BinDirPath}/rsync -rltDxXv "${sv_SrcDirPath}" "${sv_DstDirPath}"
    fi
  fi
      
}
  
# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# Exit if we are root
if [ "${GLB_sv_ThisUserName}" = "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

# Exit if user account is local
if [ "${GLB_bv_LoggedInUserIsLocal}" = "true" ]
then
  GLB_nf_QuickExit "Policy aborted - User account is local."
fi

# Exit if the user home is undefined or the share is unavailable
if [ -z "${GLB_sv_LoggedInUserHomeNetworkDirPath}" ]
then
  GLB_nf_QuickExit "Policy aborted - Network home is undefined or the share is unavailable."
fi

# Exit if the Network home doesn't exist or is unavailable
if [ ! -e "${GLB_sv_LoggedInUserHomeNetworkDirPath}" ]
then
  GLB_nf_QuickExit "Policy aborted - Network home doesn't exist or is unavailable."
fi

# Exit if the user home doesn't exist
if [ ! -e "${GLB_sv_LoggedInUserHomeDirPath}" ]
then
  GLB_nf_QuickExit "Policy aborted - Home folder doesn't exist."
fi

# Exit if the user home is on the network
if [ "${GLB_bv_LoggedInUserHomeIsLocal}" = "false" ]
then
  GLB_nf_QuickExit "Policy aborted - Home folder is on the network."
fi

# ---

case ${sv_EventName} in
    
Usr-AtDesktop|Usr-PolicyInstall)
  GLB_nf_SetPlistProperty "${sv_ThisUserLocalPrefFilePath}" ":${sv_ConfigEntryName}:LocalPrefs:SyncIsActive" "true"
  GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Syncing files down [ LOCAL <-- NET ] "

  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ReqdObjectFilePath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path:${iv_LoopCount}")"

    # Sanitise the Entry
    sv_ReqdObjectFilePath=$(echo "${sv_ReqdObjectFilePath}" | sed "s|^|/|;s|^/[/]*|/|;s|[/]*$||")
  
    if test -n "${sv_ReqdObjectFilePath}"
    then
      # Sync the prefs down
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Syncing down '${sv_ReqdObjectFilePath}'"
      nf_SyncFiles "${GLB_sv_LoggedInUserHomeNetworkDirPath}${sv_ReqdObjectFilePath}" "${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
    fi
  done

  GLB_nf_SetPlistProperty "${sv_ThisUserLocalPrefFilePath}" ":${sv_ConfigEntryName}:LocalPrefs:SyncIsActive" "false"
  ;;

Usr-Poll|Usr-PolicyUninstall)
  bv_SyncIsActive="$(GLB_sf_GetPlistProperty "${sv_ThisUserLocalPrefFilePath}" ":${sv_ConfigEntryName}:LocalPrefs:SyncIsActive")"

  if [ "${bv_SyncIsActive}" = "false" ]
  then
    GLB_nf_SetPlistProperty "${sv_ThisUserLocalPrefFilePath}" ":${sv_ConfigEntryName}:LocalPrefs:SyncIsActive" "true"
    GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Syncing files up [ LOCAL --> NET ] "

    iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path")"
    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ReqdObjectFilePath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path:${iv_LoopCount}")"

      # Sanitise the Entry
      sv_ReqdObjectFilePath=$(echo "${sv_ReqdObjectFilePath}" | sed "s|^|/|;s|^/[/]*|/|;s|[/]*$||")
  
      if test -n "${sv_ReqdObjectFilePath}"
      then
        # Sync the prefs back up
        GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Syncing up '${sv_ReqdObjectFilePath}'"
        nf_SyncFiles "${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}" "${GLB_sv_LoggedInUserHomeNetworkDirPath}${sv_ReqdObjectFilePath}"
      fi
    done
    GLB_nf_SetPlistProperty "${sv_ThisUserLocalPrefFilePath}" ":${sv_ConfigEntryName}:LocalPrefs:SyncIsActive" "false"
  fi
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
