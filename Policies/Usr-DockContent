#!/bin/bash
#
# Short:    Usr Policy script - Sets the user Dock content (makes use of dockutil)
# Author:   Mark J Swift
# Version:  2.0.16
# Modified: 13-Sep-2017
#
# Reference: https://github.com/kcrawford - dockutil, set the dock content 
#
# Triggered by the following events:
#   Usr-AtDesktop (as user)
#
# Called (as user) as follows:    
#   Usr-DockContent <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.16"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by user policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

if_RawTestCall() # check that we can perform a basic command
{
  "${GLB_sv_BinDirPath}"/dockutil >/dev/null 2>&1 --list
  echo $?
}

nf_RawReloadList() # Reload the list without checks
{
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Reloading the dock."
  pkill -U ${GLB_sv_ThisUserName} Dock
}

nf_RawRemoveEntry() # ObjectName - Delete object with the given name without checks
{
  local sv_ObjectFileURI
  local sv_ObjectName
  
  # Get object to delete
  sv_ObjectFileURI="${1}"
  sv_ObjectName="${2}"

  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Removing '${sv_ObjectName}' from dock."
  "${GLB_sv_BinDirPath}"/dockutil  >/dev/null 2>&1 --remove "${sv_ObjectName}" --no-restart
}

nf_RawAddEntry() # ObjectFileURI ObjectName - Add object with the given uri/name without checks
{
  local sv_ObjectFileURI
  local sv_ObjectName
  
  # Get object to delete
  sv_ObjectFileURI="${1}"
  sv_ObjectName="${2}"

  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Adding '${sv_ObjectName}' '${sv_ObjectFileURI}' to dock."
  "${GLB_sv_BinDirPath}"/dockutil >/dev/null 2>&1 --add "${sv_ObjectFileURI}" --label "${sv_ObjectName}" --no-restart --view grid
}

sf_RawGetURI() # ObjectName - Get URI for the object with the given name without checks
{
  local sv_ObjectName
  
  # Get object to delete
  sv_ObjectName="${1}"

  GLB_sf_urldecode "$("${GLB_sv_BinDirPath}"/dockutil 2>/dev/null --list | tr "\t" "," | grep -E "^${sv_ObjectName}," | cut -d ',' -f2 | sed 's|^[ ]*||' | head -n1)"
}

# If parameter 1 is a path instead of a URI - turn it into a URI by prepending 'file://'.
# If the URI is a filepath that points to a directory, make sure it has a trailing /
# If parameter 2 is null or true then..
#   Make HOMEDIR substitutions to the given URI.
#   If the URI is a file URI that points to a link - get the originating filepath.
sf_SanitiseURI() # URI [deref]
{
  local sv_FileURI
  local sv_OriginalFileURI

  # Get URI
  sv_FileURI="${1}"

  # Get dereference flag
  bv_Deref="${2}"
  if [ -z "${bv_Deref}" ]
  then
    bv_Deref="true"
  fi

  # if it's a file URI - strip it back
  if [ -n "$(echo "${sv_FileURI}" | grep -E 'file://')" ]
  then
    sv_FileURI="$(echo "${sv_FileURI}" | sed 's|^file://||')"
  fi

  if [ -n "${sv_FileURI}" ]
  then
    # if at this point it's not a URI - its a file path so remove any trailing / (we will add one later if necessary)
    if [ -z "$(echo "${sv_FileURI}" | grep -E '\w*://')" ]
    then
      sv_FileURI="$(echo "${sv_FileURI}" | sed 's|[/]*$||')"  
    fi
    
    if [ "${bv_Deref}" = "true" ]
    then
      # make HOMEDIR, LOCALHOME and NETWORKHOME substitutions to the given URI
      sv_FileURI="$(echo "${sv_FileURI}" | sed "s|HOMEDIR|"${GLB_sv_LoggedInUserHomeDirPath}"|;s|LOCALHOME|"${GLB_sv_LoggedInUserLocalHomeDirPath}"|;s|NETWORKHOME|"${GLB_sv_LoggedInUserHomeNetworkDirPath}"|")"

      # make ALTHOME substitutions to the given URI
      if [ "${GLB_bv_LoggedInUserHomeIsLocal}" = "true" ]
      then
        # The user home is local, so the alternative home is the network home
        sv_FileURI="$(echo "${sv_FileURI}" | sed "s|ALTHOME|"${GLB_sv_LoggedInUserHomeNetworkDirPath}"|")"

      else
        # The user home is on the network, so the alternative home is the local home
        sv_FileURI="$(echo "${sv_FileURI}" | sed "s|ALTHOME|"${GLB_sv_LoggedInUserLocalHomeDirPath}"|")"
 
      fi
    fi
  
    # if at this point it's not a URI - its a file path
    if [ -z "$(echo "${sv_FileURI}" | grep -E '\w*://')" ]
    then
      if test -z "${sv_FileURI}"
      then
        # If the filepath is null we must be referencing the root of the drive
        sv_FileURI="/"
      else
        if test -e "${sv_FileURI}"
        then
          if [ "${bv_Deref}" = "true" ]
          then
            if test -L "${sv_FileURI}"
            then
              # If the filepath references a link, get the originating filepath
              sv_OriginalFileURI="$(stat -f %Y "${sv_FileURI}")"
              if test -e "${sv_OriginalFileURI}"
              then
                sv_FileURI="${sv_OriginalFileURI}"
              fi
            fi
          fi
          if ! test -L "${sv_FileURI}"
          then
            if test -d "${sv_FileURI}"
            then
              # If the filepath references a directory, add a trailing /
              sv_FileURI="${sv_FileURI}/"
            fi
          fi
        fi
      fi
      
      # Add the URI reference
      sv_FileURI="file://${sv_FileURI}"
    fi
  fi
  
  echo "${sv_FileURI}"
}

nf_RemoveEntry() # ObjectFileURI ObjectName - Delete all objects with the given uri/name from the sidebar
{
  local sv_ObjectFileURI
  local sv_ObjectName
  local bv_ListModified
  local iv_Count
  local sv_ExistingURI
  
  # Get object to delete
  sv_ObjectFileURI="${1}"
  sv_ObjectName="${2}"
  
  bv_ListModified="false"
  
  sv_ObjectFileURI="$(sf_SanitiseURI "${sv_ObjectFileURI}")"
  
  if [ -n "${sv_ObjectFileURI}" ]
  then
    # If the URI is a file path, the Label should match the file object
    if [ -n "$(echo "${sv_ObjectFileURI}" | grep -E 'file://')" ]
    then
      sv_ObjectName=""
    fi
  fi

  # If there is no object name (label), create one
  if [ -z "${sv_ObjectName}" ]
  then
    sv_ObjectName="$(basename "${sv_ObjectFileURI}" | sed "s|.app$||")"
  fi
    
  if [ -n "${sv_ObjectName}" ]
  then
    # Remove all existing entries with the given name (up to a maximum of 10)
    for (( iv_Count = 0; iv_Count < 10; iv_Count++ )); do
      sv_ExistingURI="$(sf_RawGetURI "${sv_ObjectName}")"
      if [ -z "${sv_ExistingURI}" ]
      then
        break
      else
        nf_RawRemoveEntry "${sv_ObjectFileURI}" "${sv_ObjectName}"
        bv_ListModified="true"
      fi
    done
    
    if [ "${bv_ListModified}" = "false" ]
    then
      GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Remove ignored - as ${sv_ObjectName} is not present."
    fi
  
  fi
  
  echo "${bv_ListModified}"
}

nf_AddEntry() # sv_ObjectFileURI sv_ObjectName bv_ReplaceEntry - Add object with the given uri/name to the dock
{
  local sv_ObjectFileURI
  local sv_ObjectName
  local bv_ReplaceEntry
  local bv_ListModified
  local bv_AddEntry
  local sv_ExistingURI
  
  # Get object to add
  sv_ObjectFileURI="${1}"
  sv_ObjectName="${2}"
  bv_ReplaceEntry="${3}"
  
  if [ -z "${bv_ReplaceEntry}" ]
  then
    bv_ReplaceEntry="false"
  fi
  
  bv_ListModified="false"

  bv_AddEntry="false"

  sv_ObjectFileURI="$(sf_SanitiseURI "${sv_ObjectFileURI}")"
  
  if [ -n "${sv_ObjectFileURI}" ]
  then
    # If the URI is a file path, the Label should match the file object
    if [ -n "$(echo "${sv_ObjectFileURI}" | grep -E 'file://')" ]
    then
      sv_ObjectName=""
    fi

    # If there is no object name (label), create one
    if [ -z "${sv_ObjectName}" ]
    then
      sv_ObjectName="$(basename "${sv_ObjectFileURI}" | sed "s|.app$||")"
    fi

    if [ -n "${sv_ObjectName}" ]
    then
      sv_ExistingURI="$(sf_RawGetURI "${sv_ObjectName}")"
      
      if [ -z "${sv_ExistingURI}" ]
      then
        # Entry doesn't yet exist for this object
        bv_AddEntry="true"
      
      else
        # Entry already exists for this object
        sv_ExistingURI="$(sf_SanitiseURI "${sv_ExistingURI}" "false")"
        
        # Check if the entry is different than what we are adding
        if [ "${sv_ObjectFileURI}" != "${sv_ExistingURI}" ]
        then
          if [ "${bv_ReplaceEntry}" = "false" ]
          then
            GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Update '${sv_ObjectName}' ignored; replace option is '${bv_ReplaceEntry}'."
            
          else
            # We are replacing an existing entry
            GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Replacing '${sv_ObjectName}' '${sv_ExistingURI}' with '${sv_ObjectFileURI}'."
            bv_ListModified="$(nf_RemoveEntry "" "${sv_ObjectName}")"
            bv_ListModified="true"
            bv_AddEntry="true"
          fi
          
        else
      
          # Entry isn't any different to what we want, so if its a file object, check that it still exists
          if [ -n "$(echo "${sv_ObjectFileURI}" | grep -E 'file://')" ]
          then
            if [ ! -e "$(echo "${sv_ObjectFileURI}" | sed 's|^file://||')" ]
            then
              GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Entry '${sv_ObjectName}' exists; file object '${sv_ObjectFileURI}' doesn't exist."
              bv_ListModified="$(nf_RemoveEntry "" "${sv_ObjectName}")"
              bv_ListModified="true"
            
            else
              GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Add '${sv_ObjectName}' ignored; '${sv_ObjectFileURI}' is already present."
              
            fi
            
          else
            GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Add '${sv_ObjectName}' ignored; '${sv_ObjectFileURI}' is already present."
          
          fi

        fi
      fi
      
    fi

    if [ "${bv_AddEntry}" = "true" ]
    then
      # If its a file object, check that it exists
      if [ -n "$(echo "${sv_ObjectFileURI}" | grep -E 'file://')" ]
      then
        if [ ! -e "$(echo "${sv_ObjectFileURI}" | sed 's|^file://||')" ]
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Add '${sv_ObjectName}' ignored; file object '${sv_ObjectFileURI}' doesn't exist."
          bv_AddEntry="false"
        fi
      fi
    fi
    
    if [ "${bv_AddEntry}" = "true" ]
    then
      nf_RawAddEntry "${sv_ObjectFileURI}" "${sv_ObjectName}"
      bv_ListModified="true"
    fi
        
  fi

  echo "${bv_ListModified}"
}

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are an unsupported user
case ${GLB_sv_ThisUserName} in
    
root|_mbsetupuser)
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  ;;
  
esac

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

# Exit if dockutil (see https://github.com/kcrawford) is not installed
if ! test -e "${GLB_sv_BinDirPath}"/dockutil
then
  GLB_nf_QuickExit "Policy aborted - dockutil (see https://github.com/kcrawford) is not installed."
fi

# ---

if [ $(if_RawTestCall) -ne 0 ]
then
  GLB_nf_QuickExit "Policy aborted - something went wrong unexpectedly."
fi

case ${sv_EventName} in
    
Usr-AtDesktop|Usr-PolicyInstall)
  
  bv_ListModified="false"

  # Remove Entries
  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Remove")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ReqdObjectFileURI="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Remove:${iv_LoopCount}:URI")"
    sv_ReqdObjectLabel="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Remove:${iv_LoopCount}:Label")"
    if [ "$(nf_RemoveEntry "${sv_ReqdObjectFileURI}" "${sv_ReqdObjectLabel}")" = "true" ]
    then
      bv_ListModified="true"
    fi
  done

  # Check if we are replacing 
  bv_ReplaceEntries="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Replace")"
  if [ -z "${bv_ReplaceEntries}" ]
  then
    bv_ReplaceEntries="false"
  fi

  # Add Entries
  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Add")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ReqdObjectFileURI="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Add:${iv_LoopCount}:URI")"
    sv_ReqdObjectLabel="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Add:${iv_LoopCount}:Label")"
    bv_Result="$(nf_AddEntry "${sv_ReqdObjectFileURI}" "${sv_ReqdObjectLabel}" "${bv_ReplaceEntries}")"
    if [ "${bv_Result}" = "true" ]
    then
      bv_ListModified="true"
    fi
  done

  if [ "${bv_ListModified}" = "true" ]
  then
    nf_RawReloadList
  fi
  ;;

Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
