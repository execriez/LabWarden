#!/bin/bash
#
# Short:    Policy script - Sync user files between local and network homes on network accounts with forced local homes enabled
# Author:   Mark J Swift
# Version:  1.0.100
# Modified: 27-Oct-2016
#
# Triggered by the following events:
#   UserAtDesktop (as user)
#   UserLogout    (as user)
#
# Called as follows:    
#   UserSyncLocalHomeToNetwork <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.100"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

Nf_SyncFiles() # Src Dst
{
  local sv_SrcDirPath
  local sv_DstDirPath

  sv_SrcDirPath="${1}"
  sv_DstDirPath="${2}"
      
  if [ -e "${sv_SrcDirPath}" ]
  then
    # Source exists
    if [ -d "${sv_SrcDirPath}" ]
    then
      # Sync directory
      if [ -n "$(ls -A1 "${sv_SrcDirPath}" | grep -Ev "^.DS_Store$|^.localized$")" ]
      then
        # Only sync if the source dir is not empty
        mkdir -p "${sv_DstDirPath}"
        # LW_nf_logmessage "DEBUG: ${LW_sv_BinDirPath}/rsync -rltDxXv '${sv_SrcDirPath}/' '${sv_DstDirPath}' --delete"
        ${LW_sv_BinDirPath}/rsync -rltDxXv "${sv_SrcDirPath}/" "${sv_DstDirPath}" --delete
      fi
    else
      # Sync File
      mkdir -p "$(dirname "${sv_SrcDirPath}")"
      # LW_nf_logmessage "DEBUG: ${LW_sv_BinDirPath}/rsync -rltDxXv '${sv_SrcDirPath}' '${sv_DstDirPath}'"
      ${LW_sv_BinDirPath}/rsync -rltDxXv "${sv_SrcDirPath}" "${sv_DstDirPath}"
    fi
  fi
      
}
  
# ---

# Execute the Policy

case ${sv_EventName} in
    
UserAtDesktop)
  # Take a note of the Policy call
  LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

  if [ "${LW_bv_LoggedInUserIsLocal}" = "true" ]
  then
    # We are a local account
    LW_nf_QuickExit "NOTE, policy aborted: User account is local."

  else
    # We are a network account
    
    if [ ! -e "${LW_sv_LoggedInUserHomeDirPath}" ]
    then
      LW_nf_QuickExit "NOTE, policy aborted: Home folder doesn't exist."
    
    else
      # The user home dir exists, so far so good

      if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "false" ]
      then
        # The user home is on the network
        LW_nf_QuickExit "NOTE, policy aborted: Home folder is on the network."
      
      else
        # The user home is local

        if [ -z "${LW_sv_LoggedInUserHomeNetworkDirPath}" ]
        then
          # The original home network share is unavailable
          LW_nf_QuickExit "NOTE, policy aborted: Network share is unavailable."
       
        else
          # The original home network share is mounted and available

          if [ ! -e "${LW_sv_LoggedInUserHomeNetworkDirPath}" ]
          then
            LW_nf_QuickExit "NOTE, policy aborted: Network home unavailable."
        
          else
            # The original home network folder exists and is available

            LW_nf_logmessage "ATTENTION, syncing files down [ LOCAL <-- NET ] "
          
            iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Path")"
            for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
            do
              sv_ReqdObjectFilePath="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Path:${iv_LoopCount}")"

              # Sanitise the Entry
              sv_ReqdObjectFilePath=$(echo "/${sv_ReqdObjectFilePath}" | sed "s|^/[/]*|/|;s|/$||")
            
              if test -n "${sv_ReqdObjectFilePath}"
              then
                # Sync the prefs down
                LW_nf_logmessage "NOTE, syncing down '${sv_ReqdObjectFilePath}'"
                Nf_SyncFiles "${LW_sv_LoggedInUserHomeNetworkDirPath}${sv_ReqdObjectFilePath}" "${LW_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
              fi
            done
          
          fi
        fi
      fi
    fi
  fi
  ;;

UserLogout)
  # Take a note of the Policy call
  LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

  if [ "${LW_bv_LoggedInUserIsLocal}" = "true" ]
  then
    # We are a local account
    LW_nf_QuickExit "NOTE, policy aborted: User account is local."

  else
    # We are a network account
    
    if [ ! -e "${LW_sv_LoggedInUserHomeDirPath}" ]
    then
      LW_nf_QuickExit "NOTE, policy aborted: Home folder doesn't exist."
    
    else
      # The user home dir exists, so far so good

      if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "false" ]
      then
        # The user home is on the network
        LW_nf_QuickExit "NOTE, policy aborted: Home folder is on the network."
      
      else
        # The user home is local

        if [ -z "${LW_sv_LoggedInUserHomeNetworkDirPath}" ]
        then
          # The original home network share is unavailable
          LW_nf_QuickExit "NOTE, policy aborted: Network share is unavailable."
       
        else
          # The original home network share is mounted and available

          if [ ! -e "${LW_sv_LoggedInUserHomeNetworkDirPath}" ]
          then
            LW_nf_QuickExit "NOTE, policy aborted: Network home unavailable."
        
          else
            # The original home network folder exists and is available

            LW_nf_logmessage "ATTENTION, syncing files up [ LOCAL --> NET ] "

            iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Path")"
            for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
            do
              sv_ReqdObjectFilePath="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Path:${iv_LoopCount}")"

              # Sanitise the Entry
              sv_ReqdObjectFilePath=$(echo "/${sv_ReqdObjectFilePath}" | sed "s|^/[/]*|/|;s|/$||")
            
              if test -n "${sv_ReqdObjectFilePath}"
              then
                # Sync the prefs back up
                LW_nf_logmessage "NOTE, syncing up '${sv_ReqdObjectFilePath}'"
                Nf_SyncFiles "${LW_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}" "${LW_sv_LoggedInUserHomeNetworkDirPath}${sv_ReqdObjectFilePath}"
              fi
            done
          
          fi
        fi
      fi
    fi
  fi
  ;;

*)
  LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
