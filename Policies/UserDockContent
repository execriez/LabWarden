#!/bin/bash
#
# Short:    Policy script - Set up dock for user
# Author:   Mark J Swift
# Version:  1.0.98
# Modified: 11-Oct-2016
#
# Triggered by the following events:
#   UserAtDesktop (as user)
#
# Called (as user) as follows:    
#   UserDockContent <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.98"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

sf_SanitiseURI() # FileURI - make HOMEDIR substitutions to the given URI
{
  local sv_FileURI

  # Get URI
  sv_FileURI="${1}"

  if [ -n "${sv_FileURI}" ]
  then
  
    # if it's not a URI - make it into one
    if [ -z "$(echo "${sv_FileURI}" | grep -E '\w*://')" ]
    then
      sv_FileURI="file://${sv_FileURI}"
    fi

    # make HOMEDIR, LOCALHOME and NETWORKHOME substitutions to the given URI
    sv_FileURI="$(echo "${sv_FileURI}" | sed "s|HOMEDIR|"${LW_sv_LoggedInUserHomeDirPath}"|;s|LOCALHOME|"${LW_sv_LoggedInUserLocalHomeDirPath}"|;s|NETWORKHOME|"${LW_sv_LoggedInUserHomeNetworkDirPath}"|")"

    # make ALTHOME substitutions to the given URI
    if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "true" ]
    then
      # The user home is local, so the alternative home is the network home
      sv_FileURI="$(echo "${sv_FileURI}" | sed "s|ALTHOME|"${LW_sv_LoggedInUserHomeNetworkDirPath}"|")"

    else
      # The user home is on the network, so the alternative home is the local home
      sv_FileURI="$(echo "${sv_FileURI}" | sed "s|ALTHOME|"${LW_sv_LoggedInUserLocalHomeDirPath}"|")"
 
    fi
  
    # Check if its become a null URI
    if [ "${sv_FileURI}" = "file://" ]
    then
      sv_FileURI=""
    fi
  fi
  
  echo "${sv_FileURI}"
}

Nf_RemoveEntry() # sv_ObjectFileURI sv_ObjectName - Delete all objects with the given uri/name from the sidebar
{
  local sv_ObjectFileURI
  local sv_ObjectName
  local sv_ObjectFilePath
  local bv_Result
  
  # Get object to delete
  sv_ObjectFileURI="${1}"
  sv_ObjectName="${2}"
  
  bv_Result="false"
  
  sv_ObjectFileURI="$(sf_SanitiseURI "${sv_ObjectFileURI}")"
  
  # dockutil cannot handle labels on dock items that are files (the label gets overwritten when the file alias is resolved)
  sv_ObjectFilePath="$(echo ${sv_ObjectFileURI} | sed 's|^file://||')"
  if [ -f "${sv_ObjectFilePath}" ]
  then
    sv_ObjectName=""
  fi

  # If there is no object name (label), create one
  if [ -z "${sv_ObjectName}" ]
  then
    sv_ObjectName="$(basename "${sv_ObjectFileURI}" | sed "s|.app$||")"
  fi
    
  if [ -n "${sv_ObjectName}" ]
  then
    # Remove all existing entries
    while [ -n "$("${LW_sv_BinDirPath}"/dockutil 2>/dev/null --find "${sv_ObjectName}" | grep "was found in")" ]
    do
      LW_nf_logmessage "NOTE, removing ${sv_ObjectName} from dock."
      "${LW_sv_BinDirPath}"/dockutil 2>/dev/null --remove "${sv_ObjectName}" --no-restart
      bv_Result="true"
    done
  fi
  
  echo "${bv_Result}"
}

Nf_AddEntry() # sv_ObjectFileURI sv_ObjectName - Add object with the given uri/name to the sidebar
{
  local sv_ObjectFileURI
  local sv_ObjectName
  local sv_ObjectFilePath
  local bv_Result
  
  # Get object to add
  sv_ObjectFileURI="${1}"
  sv_ObjectName="${2}"
  
  bv_Result="false"

  sv_ObjectFileURI="$(sf_SanitiseURI "${sv_ObjectFileURI}")"

  if [ -n "${sv_ObjectFileURI}" ]
  then
    # dockutil cannot handle labels on dock items that are files (the label gets overwritten when the file alias is resolved)
    sv_ObjectFilePath="$(echo ${sv_ObjectFileURI} | sed 's|^file://||')"
    if [ -f "${sv_ObjectFilePath}" ]
    then
      sv_ObjectName=""
    fi

    # If there is no object name (label), create one
    if [ -z "${sv_ObjectName}" ]
    then
      sv_ObjectName="$(basename "${sv_ObjectFileURI}" | sed "s|.app$||")"
    fi
    
    if [ -n "${sv_ObjectName}" ]
    then
      # Only add the entry of it doesn't already exist
      if [ -z "$("${LW_sv_BinDirPath}"/dockutil 2>/dev/null --find "${sv_ObjectName}" | grep "was found in")" ]
      then
        LW_nf_logmessage "NOTE, adding ${sv_ObjectName} to dock."
        "${LW_sv_BinDirPath}"/dockutil 2>/dev/null --add "${sv_ObjectFileURI}" --label "${sv_ObjectName}" --no-restart --view grid
        bv_Result="true"
      fi
    fi
    
  fi
  
  echo "${bv_Result}"
}

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if test -z "${LW_sv_LoggedInUserName}"
then
  LW_nf_QuickExit "NOTE, policy aborted: No-one is logged in."
  
else    
  if [ ! -e "${LW_sv_LoggedInUserHomeDirPath}" ]
  then
    LW_nf_QuickExit "NOTE, policy aborted: home folder doesn't exist."
    
  else
    # Use dockutil (see https://github.com/kcrawford) to set up the dock content
    if ! test -e "${LW_sv_BinDirPath}"/dockutil
    then
      LW_nf_QuickExit "NOTE, policy aborted: dockutil utility doesn't exist."
    
    else
      bv_DockChanged="false"

      # Remove Entries
      iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Remove")"
      for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
      do
        sv_ReqdObjectFileURI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Remove:${iv_LoopCount}:URI")"
        sv_ReqdObjectLabel="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Remove:${iv_LoopCount}:Label")"
        if [ "$(Nf_RemoveEntry "${sv_ReqdObjectFileURI}" "${sv_ReqdObjectLabel}")" = "true" ]
        then
          bv_DockChanged="true"
        fi
      done

      # Check if we are replacing 
      bv_ReplaceEntries="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Replace")"

      if [ "${bv_ReplaceEntries}" = "true" ]
      then
        # Delete them all first
        iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Add")"
        for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
        do
          sv_ReqdObjectFileURI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Add:${iv_LoopCount}:URI")"
          sv_ReqdObjectLabel="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Add:${iv_LoopCount}:Label")"
          if [ "$(Nf_RemoveEntry "${sv_ReqdObjectFileURI}" "${sv_ReqdObjectLabel}")" = "true" ]
          then
            bv_DockChanged="true"
          fi
        done
      fi
      
      # Add Entries
      iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Add")"
      for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
      do
        sv_ReqdObjectFileURI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Add:${iv_LoopCount}:URI")"
        sv_ReqdObjectLabel="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Add:${iv_LoopCount}:Label")"
        if [ "$(Nf_AddEntry "${sv_ReqdObjectFileURI}" "${sv_ReqdObjectLabel}")" = "true" ]
        then
          bv_DockChanged="true"
        fi
      done

      if [ "${bv_DockChanged}" = "true" ]
      then
        LW_nf_logmessage "NOTE, reloading dock"
        /usr/bin/killall Dock >/dev/null 2>&1
      fi
   fi
  fi

fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
