#!/bin/bash
#
# Short:    Policy script - Restrict certain Application from launching
# Author:   Mark J Swift
# Version:  1.0.90
# Modified: 01-Jul-2016
#
# Triggered by the following events:
#   AppWillLaunch (as user)
#
# Called as follows:    
#   AppRestrict <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="1.0.90"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
LW_sv_LoggedInUserName="${3}"

# Get optional parameter
sv_OptionalParam="${4}"

# ---

# Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
# Note, older applications may return "(null)"
sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

# Get notification e.g. WillLaunch, DidLaunch or DidTerminate
sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

# Get Date/Time Epoch of the notification
iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

# Get ApplicationName e.g. TextEdit
sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

# Get ApplicationPath e.g. /Applications/TextEdit.app
sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

# Get ApplicationProcessIdentifier - i.e. the process ID
sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

case ${sv_EventName} in
    
AppWillLaunch)
  if [ "${LW_bv_LoggedInUserIsAdmin}" = "true" ]
  then
    LW_nf_QuickExit "NOTE, policy aborted: User is an admin."

  else
    # Any Application in the ExceptionList is exempt from Whitelist/BlackList checking
    # This allows you to have Apps that will run from any location without having to implement a whitelist
    # The format is ^ApplicationName1/ApplicationBundleIdentifier1|ApplicationName2/ApplicationBundleIdentifier2|...$
    # If an application has no ApplicationBundleIdentifier then specify ApplicationName/(null) i.e TextWrangler/(null)
    # Regular expressions can be used.

    # Build ExceptionList
    sv_ExceptionList=""

    iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ExceptionList")"
    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ListedAppName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ExceptionList:${iv_LoopCount}:ApplicationName")"
      if test -n "${sv_ListedAppName}"
      then
        sv_ListedAppBundleIdentifier="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ExceptionList:${iv_LoopCount}:ApplicationBundleIdentifier")"
        if test -n "${sv_ListedAppBundleIdentifier}"
        then
          sv_ExceptionList="${sv_ExceptionList}|^${sv_ListedAppName}/${sv_ListedAppBundleIdentifier}$"
        fi    
      fi
    done
    sv_ExceptionList=$(echo "${sv_ExceptionList}" | sed "s/^|//")
    
    # If the WhiteList is not null, then these Applications (and only these) are allowed.
    # When the WhiteList is not null, then it should at least contain "Finder/com.apple.Finder" or maybe even ".*/com.apple\..*"
    # Regular expressions can be used.

    # Build WhiteList
    sv_WhiteList=""

    iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:WhiteList")"
    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ListedAppName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:WhiteList:${iv_LoopCount}:ApplicationName")"
      if test -n "${sv_ListedAppName}"
      then
        sv_ListedAppBundleIdentifier="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:WhiteList:${iv_LoopCount}:ApplicationBundleIdentifier")"
        if test -n "${sv_ListedAppBundleIdentifier}"
        then
          sv_WhiteList="${sv_WhiteList}|^${sv_ListedAppName}/${sv_ListedAppBundleIdentifier}$"
        fi    
      fi
    done
    sv_WhiteList=$(echo "${sv_WhiteList}" | sed "s/^|//")

    # Any Application in the BlackList is always disallowed for non-admins
    # Regular expressions can be used.

    # Build BlackList
    sv_BlackList=""

    iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:BlackList")"
    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ListedAppName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:BlackList:${iv_LoopCount}:ApplicationName")"
      if test -n "${sv_ListedAppName}"
      then
        sv_ListedAppBundleIdentifier="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:BlackList:${iv_LoopCount}:ApplicationBundleIdentifier")"
        if test -n "${sv_ListedAppBundleIdentifier}"
        then
          sv_BlackList="${sv_BlackList}|^${sv_ListedAppName}/${sv_ListedAppBundleIdentifier}$"
        fi    
      fi
    done
    sv_BlackList=$(echo "${sv_BlackList}" | sed "s/^|//")

    # If the path WhiteList is not null, then Applications at the specified paths (and only these paths) are allowed.
    # When the path WhiteList is not null, it should at least contain "^/Applications/.*$|^/System/Library/CoreServices/.*$"
    # ~/ is expanded to the current user home before comparison.
    # Regular expressions should be used.

    # Build PathWhiteList
    sv_PathWhiteList=""

    iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:PathWhiteList")"
    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ListedAppFilePath="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:PathWhiteList:${iv_LoopCount}")"
      if test -n "${sv_ListedAppFilePath}"
      then
        sv_PathWhiteList="${sv_PathWhiteList}|^${sv_ListedAppFilePath}$"
      fi
    done
    sv_PathWhiteList=$(echo "${sv_PathWhiteList}" | sed "s/^\|//;s|~/|"$(eval echo ~/)"|g")

    # Any application located at a path in the path BlackList is always disallowed for non-admins
    # ~/ is expanded to the current user home before comparison.
    # Regular expressions should be used.

    # Build PathBlackList
    sv_PathBlackList=""

    iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:PathBlackList")"
    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ListedAppFilePath="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:PathBlackList:${iv_LoopCount}")"
      if test -n "${sv_ListedAppFilePath}"
      then
        sv_PathBlackList="${sv_PathBlackList}|^${sv_ListedAppFilePath}$"
      fi
    done
    sv_PathBlackList=$(echo "${sv_PathBlackList}" | sed "s/^\|//;s|~/|"$(eval echo ~/)"|g")

    # Should we disallow applications running on mounts
    bv_OnlyAllowLocalApps="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:OnlyAllowLocalApps")"

    # Do some simple blacklisting/whitelisting of apps
  
    # Build an Identity for the App from the ApplicationName and the ApplicationBundleIdentifier
    sv_ThisAppFingerprint="${sv_ThisAppName}/${sv_ThisAppBundleIdentifier}"

    bv_DisallowStatus="false"

    if [ -z "${sv_ExceptionList}" -o -z "$(echo "${sv_ThisAppFingerprint}" | grep -E "${sv_ExceptionList}")" ]
    then
      # The ExceptionList is empty -or- the application is not in the ExceptionList
    
      if [ -n "${sv_WhiteList}" -a -z "$(echo "${sv_ThisAppFingerprint}" | grep -E "${sv_WhiteList}")" ]
      then
        # The WhiteList is not empty -and- the application is not in the WhiteList

        bv_DisallowStatus="true"
        sv_DisallowTitle="RESTRICTED APPLICATION"
        sv_DisallowMessage="${sv_ThisAppName} is not in the list of allowed Applications."

      else
        if [ -n "${sv_BlackList}" -a -n "$(echo "${sv_ThisAppFingerprint}" | grep -E "${sv_BlackList}")" ]
        then
          # The BlackList is not empty -and- the application is in the BlackList

          bv_DisallowStatus="true"
          sv_DisallowTitle="RESTRICTED APPLICATION"
          sv_DisallowMessage="${sv_ThisAppName} can only be run by the administrator."
  
        else
          if [ -n "${sv_PathWhiteList}" -a -z "$(echo "${sv_ThisAppFilePath}" | grep -E "${sv_PathWhiteList}")" ]
          then
            # The PathWhiteList is not empty -and- the application path is not in the PathWhiteList

            bv_DisallowStatus="true"
            sv_DisallowTitle="UNKNOWN PATH"
            sv_DisallowMessage="Applications in $(dirname "${sv_ThisAppFilePath}")/ are disallowed"
    
          else
            if [ -n "${sv_PathBlackList}" -a -n "$(echo "${sv_ThisAppFilePath}" | grep -E "${sv_PathBlackList}")" ]
            then
              # The PathBlackList is not empty -and- the application path is in the PathBlackList
    
              bv_DisallowStatus="true"
              sv_DisallowTitle="RESTRICTED PATH"
              sv_DisallowMessage="Applications in $(dirname "${sv_ThisAppFilePath}")/ are disallowed."
    
            else
              # Should we disallow applications running from mount points?

              if [ "${bv_OnlyAllowLocalApps}" = "true" ]
              then
                # Check ApplicationPath against the system mount points
                while read sv_MountPoint
                do
                  if test -n "$(echo "${sv_ThisAppFilePath}" | grep -E "^${sv_MountPoint}/")"
                  then
                    bv_DisallowStatus="true"
                    sv_DisallowTitle="RESTRICTED LOCATION"
                    sv_DisallowMessage="Applications can only be run from the internal hard drive."
                    break
                  fi
                done < <(mount | sed -E 's/^.* on //;s/ \([^(]*\)$//' | grep -v '^/$')
              fi

            fi
          fi
        fi
      fi
    fi
  
    # - Should we kill the app? -
  
    if [ "${bv_DisallowStatus}" = "false" ]
    then
      LW_nf_QuickExit "NOTE, policy aborted: The application '${sv_ThisAppFingerprint}' is not restricted"

    else
      LW_nf_logmessage "ATTENTION, killing restricted application '${sv_ThisAppProcessID}'"
      kill ${sv_ThisAppProcessID}
      LW_nf_ShowNotification "${sv_DisallowTitle}" "${sv_DisallowMessage}"

    fi

  fi
  ;;

*)
  LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
srm -fR "${LW_sv_ThisScriptTempDirPath}"

# ---
