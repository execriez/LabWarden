#!/bin/bash
#
# Short:    Policy script - Restrict certain Application from launching
# Author:   Mark J Swift
# Version:  1.0.86
# Modified: 09-Jun-2016
#
# Triggered by the following events:
#   AppWillLaunch (as user)
#
# Called as follows:    
#   AppRestrict <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

LCL_ScriptVersion="1.0.86"

if [ $# -eq 0 ]
then
  echo "${LCL_ScriptVersion}"
  exit 0
fi

# ---

# Take a note when this script started
LCL_MyStartEpoch=$(date -u "+%s")

# Get the config directory
LCL_ConfigDir="${1}"
if test -z "${LCL_ConfigDir}"
then
  # We need something to work with
  exit 0
fi

# Get event History
LCL_EventHistory="${2}"

# Get event that triggered this policy
LCL_EventName="$(echo ${LCL_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${LCL_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
GLB_LoggedInUserName="${3}"

# Get optional parameter
LCL_OptionalParam="${4}"

# ---

# Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
# Note, older applications may return "(null)"
GLB_ApplicationBundleIdentifier="$(echo ${LCL_OptionalParam} | cut -d":" -f3)"

# Get notification e.g. WillLaunch, DidLaunch or DidTerminate
GLB_ApplicationNotification="$(echo ${LCL_OptionalParam} | cut -d":" -f1)"

# Get Date/Time Epoch of the notification
GLB_NotificationEpoch="$(echo ${LCL_OptionalParam} | cut -d":" -f2)"

# Get ApplicationName e.g. TextEdit
GLB_ApplicationName="$(echo ${LCL_OptionalParam} | cut -d":" -f4)"

# Get ApplicationPath e.g. /Applications/TextEdit.app
GLB_ApplicationPath="$(echo ${LCL_OptionalParam} | cut -d":" -f5)"

# Get ApplicationProcessIdentifier - i.e. the process ID
GLB_ApplicationProcessIdentifier="$(echo ${LCL_OptionalParam} | cut -d":" -f6)"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Filename of this script)
LCL_PolicyName="${GLB_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
f_logmessage "NOTE, policy triggered: '${LCL_PolicyName}' ${LCL_OptionalParam} triggered by event '${LCL_EventHistory}' as user '${GLB_ThisUserName}' "

case ${LCL_EventName} in
    
AppWillLaunch)
  if [ "${GLB_LoggedInUserIsAdmin}" = "true" ]
  then
    f_QuickExit "NOTE, policy aborted: User is an admin."

  else
    # Any Application in the ExceptionList is exempt from Whitelist/BlackList checking
    # This allows you to have Apps that will run from any location without having to implement a whitelist
    # The format is ^ApplicationName1/ApplicationBundleIdentifier1|ApplicationName2/ApplicationBundleIdentifier2|...$
    # If an application has no ApplicationBundleIdentifier then specify ApplicationName/(null) i.e TextWrangler/(null)
    # Regular expressions can be used.

    # Build ExceptionList
    GLB_ExceptionList=""

    LCL_ObjectCount="$(f_GetPlistArraySize "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:ExceptionList")"
    for (( LCL_i=0; LCL_i<${LCL_ObjectCount}; LCL_i++ ))
    do
      LCL_ApplicationName="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:ExceptionList:${LCL_i}:ApplicationName")"
      if test -n "${LCL_ApplicationName}"
      then
        LCL_ApplicationBundleIdentifier="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:ExceptionList:${LCL_i}:ApplicationBundleIdentifier")"
        if test -n "${LCL_ApplicationBundleIdentifier}"
        then
          GLB_ExceptionList="${GLB_ExceptionList}|^${LCL_ApplicationName}/${LCL_ApplicationBundleIdentifier}$"
        fi    
      fi
    done
    GLB_ExceptionList=$(echo "${GLB_ExceptionList}" | sed "s/^|//")
    
    # If the WhiteList is not null, then these Applications (and only these) are allowed.
    # When the WhiteList is not null, then it should at least contain "Finder/com.apple.Finder" or maybe even ".*/com.apple\..*"
    # Regular expressions can be used.

    # Build WhiteList
    GLB_WhiteList=""

    LCL_ObjectCount="$(f_GetPlistArraySize "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:WhiteList")"
    for (( LCL_i=0; LCL_i<${LCL_ObjectCount}; LCL_i++ ))
    do
      LCL_ApplicationName="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:WhiteList:${LCL_i}:ApplicationName")"
      if test -n "${LCL_ApplicationName}"
      then
        LCL_ApplicationBundleIdentifier="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:WhiteList:${LCL_i}:ApplicationBundleIdentifier")"
        if test -n "${LCL_ApplicationBundleIdentifier}"
        then
          GLB_WhiteList="${GLB_WhiteList}|^${LCL_ApplicationName}/${LCL_ApplicationBundleIdentifier}$"
        fi    
      fi
    done
    GLB_WhiteList=$(echo "${GLB_WhiteList}" | sed "s/^|//")

    # Any Application in the BlackList is always disallowed for non-admins
    # Regular expressions can be used.

    # Build BlackList
    GLB_BlackList=""

    LCL_ObjectCount="$(f_GetPlistArraySize "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:BlackList")"
    for (( LCL_i=0; LCL_i<${LCL_ObjectCount}; LCL_i++ ))
    do
      LCL_ApplicationName="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:BlackList:${LCL_i}:ApplicationName")"
      if test -n "${LCL_ApplicationName}"
      then
        LCL_ApplicationBundleIdentifier="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:BlackList:${LCL_i}:ApplicationBundleIdentifier")"
        if test -n "${LCL_ApplicationBundleIdentifier}"
        then
          GLB_BlackList="${GLB_BlackList}|^${LCL_ApplicationName}/${LCL_ApplicationBundleIdentifier}$"
        fi    
      fi
    done
    GLB_BlackList=$(echo "${GLB_BlackList}" | sed "s/^|//")

    # If the path WhiteList is not null, then Applications at the specified paths (and only these paths) are allowed.
    # When the path WhiteList is not null, it should at least contain "^/Applications/.*$|^/System/Library/CoreServices/.*$"
    # ~/ is expanded to the current user home before comparison.
    # Regular expressions should be used.

    # Build PathWhiteList
    GLB_PathWhiteList=""

    LCL_ObjectCount="$(f_GetPlistArraySize "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:PathWhiteList")"
    for (( LCL_i=0; LCL_i<${LCL_ObjectCount}; LCL_i++ ))
    do
      LCL_ApplicationPath="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:PathWhiteList:${LCL_i}")"
      if test -n "${LCL_ApplicationPath}"
      then
        GLB_PathWhiteList="${GLB_PathWhiteList}|^${LCL_ApplicationPath}$"
      fi
    done
    GLB_PathWhiteList=$(echo "${GLB_PathWhiteList}" | sed "s/^\|//;s|~/|"$(eval echo ~/)"|g")

    # Any application located at a path in the path BlackList is always disallowed for non-admins
    # ~/ is expanded to the current user home before comparison.
    # Regular expressions should be used.

    # Build PathBlackList
    GLB_PathBlackList=""

    LCL_ObjectCount="$(f_GetPlistArraySize "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:PathBlackList")"
    for (( LCL_i=0; LCL_i<${LCL_ObjectCount}; LCL_i++ ))
    do
      LCL_ApplicationPath="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:PathBlackList:${LCL_i}")"
      if test -n "${LCL_ApplicationPath}"
      then
        GLB_PathBlackList="${GLB_PathBlackList}|^${LCL_ApplicationPath}$"
      fi
    done
    GLB_PathBlackList=$(echo "${GLB_PathBlackList}" | sed "s/^\|//;s|~/|"$(eval echo ~/)"|g")

    # Should we disallow applications running on mounts
    GLB_OnlyAllowLocalApps="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:OnlyAllowLocalApps")"

    # Do some simple blacklisting/whitelisting of apps
  
    # Build an Identity for the App from the ApplicationName and the ApplicationBundleIdentifier
    GLB_AppIdentifier="${GLB_ApplicationName}/${GLB_ApplicationBundleIdentifier}"

    GLB_Disallow="false"

    if [ -z "${GLB_ExceptionList}" -o -z "$(echo "${GLB_AppIdentifier}" | grep -E "${GLB_ExceptionList}")" ]
    then
      # The ExceptionList is empty -or- the application is not in the ExceptionList
    
      if [ -n "${GLB_WhiteList}" -a -z "$(echo "${GLB_AppIdentifier}" | grep -E "${GLB_WhiteList}")" ]
      then
        # The WhiteList is not empty -and- the application is not in the WhiteList

        GLB_Disallow="true"
        GLB_DisallowTitle="RESTRICTED APPLICATION"
        GLB_DisallowMessage="${GLB_ApplicationName} is not in the list of allowed Applications."

      else
        if [ -n "${GLB_BlackList}" -a -n "$(echo "${GLB_AppIdentifier}" | grep -E "${GLB_BlackList}")" ]
        then
          # The BlackList is not empty -and- the application is in the BlackList

          GLB_Disallow="true"
          GLB_DisallowTitle="RESTRICTED APPLICATION"
          GLB_DisallowMessage="${GLB_ApplicationName} can only be run by the administrator."
  
        else
          if [ -n "${GLB_PathWhiteList}" -a -z "$(echo "${GLB_ApplicationPath}" | grep -E "${GLB_PathWhiteList}")" ]
          then
            # The PathWhiteList is not empty -and- the application path is not in the PathWhiteList

            GLB_Disallow="true"
            GLB_DisallowTitle="UNKNOWN PATH"
            GLB_DisallowMessage="Applications in $(dirname "${GLB_ApplicationPath}")/ are disallowed"
    
          else
            if [ -n "${GLB_PathBlackList}" -a -n "$(echo "${GLB_ApplicationPath}" | grep -E "${GLB_PathBlackList}")" ]
            then
              # The PathBlackList is not empty -and- the application path is in the PathBlackList
    
              GLB_Disallow="true"
              GLB_DisallowTitle="RESTRICTED PATH"
              GLB_DisallowMessage="Applications in $(dirname "${GLB_ApplicationPath}")/ are disallowed."
    
            else
              # Should we disallow applications running from mount points?

              if [ "${GLB_OnlyAllowLocalApps}" = "true" ]
              then
                # Check ApplicationPath against the system mount points
                while read LCL_MountPoint
                do
                  if test -n "$(echo "${GLB_ApplicationPath}" | grep -E "^${LCL_MountPoint}/")"
                  then
                    GLB_Disallow="true"
                    GLB_DisallowTitle="RESTRICTED LOCATION"
                    GLB_DisallowMessage="Applications can only be run from the internal hard drive."
                    break
                  fi
                done < <(mount | sed -E 's/^.* on //;s/ \([^(]*\)$//' | grep -v '^/$')
              fi

            fi
          fi
        fi
      fi
    fi
  
    # - Should we kill the app? -
  
    if [ "${GLB_Disallow}" = "false" ]
    then
      f_QuickExit "NOTE, policy aborted: The application '${GLB_AppIdentifier}' is not restricted"

    else
      f_logmessage "ATTENTION, killing restricted application '${GLB_ApplicationProcessIdentifier}'"
      kill ${GLB_ApplicationProcessIdentifier}
      f_ShowNotification "${GLB_DisallowTitle}" "${GLB_DisallowMessage}"

    fi

  fi
  ;;

*)
  f_QuickExit "NOTE, policy aborted: Trigger '${LCL_EventName}' is not supported by policy '${LCL_PolicyName}'"
  ;;

esac
  
# Trigger an event
f_TriggerEvent "${LCL_EventHistory}" "${LCL_PolicyName}" "${LCL_OptionalParam}"

# Remove temporary files
srm -fR "${GLB_ThisScriptTempDir}"

# ---
