#!/bin/bash
#
# Short:    Policy script - Add entries to the hosts file
# Author:   Mark J Swift
# Version:  1.0.100
# Modified: 27-Oct-2016
#
# Triggered by the following events:
#   Boot (as root)
#
# Called as follows:    
#   SystemAddEntriesToHostsFile <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.100"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "NOTE, policy aborted: User '${LW_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  
else    
  bv_PolicyExecuted="false"
  cat /etc/hosts | sed -e '/SystemAddToHosts-BEGIN/,/SystemAddToHosts-END/d' > "${LW_sv_ThisScriptTempDirPath}/hosts"
  
  echo "# SystemAddToHosts-BEGIN" >> "${LW_sv_ThisScriptTempDirPath}/hosts"
  
  # Build a file of entries to add to /etc/hosts
  iv_EntryCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Entry")"
  for (( iv_LoopCount1=0; iv_LoopCount1<${iv_EntryCount}; iv_LoopCount1++ ))
  do
    sv_EntryIP4="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Entry:${iv_LoopCount1}:IP4")"
    if test -n "${sv_EntryIP4}"
    then
      sv_HostList=""
      
      sv_HostCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Entry:${iv_LoopCount1}:Host")"
      for (( iv_LoopCount2=0; iv_LoopCount2<${sv_HostCount}; iv_LoopCount2++ ))
      do
        sv_Host="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Entry:${iv_LoopCount1}:Host:${iv_LoopCount2}")"
        if test -n "${sv_Host}"
        then
          if test -n "${sv_HostList}"
          then
            sv_HostList="${sv_HostList} "
          fi
          sv_HostList="${sv_HostList}${sv_Host}"
        fi
      done

      if test -n "${sv_HostList}"
      then
        bv_PolicyExecuted="true"
        printf "${sv_EntryIP4}\t${sv_HostList}\n" >> "${LW_sv_ThisScriptTempDirPath}/hosts"
      fi
      
    fi
  done

  echo "# SystemAddToHosts-END" >> "${LW_sv_ThisScriptTempDirPath}/hosts"

  if [ "${bv_PolicyExecuted}" = "true" ]
  then
    cat "${LW_sv_ThisScriptTempDirPath}/hosts" > /etc/hosts
    LW_nf_logmessage "ATTENTION, entries added to hosts file."
  
  else
    LW_nf_QuickExit "NOTE, policy aborted - no config "
    
  fi

fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
