#!/bin/bash
#
# Short:    Policy script - Show Application hints
# Author:   Mark J Swift
# Version:  1.0.98
# Modified: 11-Oct-2016
#
# Triggered by the following events:
#   AppDidLaunch (as user)
#
# Called as follows:    
#   AppShowHints <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.98"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
# Note, older applications may return "(null)"
sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

# Get notification e.g. WillLaunch, DidLaunch or DidTerminate
sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

# Get Date/Time Epoch of the notification
iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

# Get ApplicationName e.g. TextEdit
sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

# Get ApplicationPath e.g. /Applications/TextEdit.app
sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

# Get ApplicationProcessIdentifier - i.e. the process ID
sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

case ${sv_EventName} in
    
AppDidLaunch)
  bv_PolicyExecuted="false"
  iv_HintCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_HintCount}; iv_LoopCount++ ))
  do
    sv_ListedAppBundleIdentifier="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:ApplicationBundleIdentifier")"
    if [ "${sv_ListedAppBundleIdentifier}" = "${sv_ThisAppBundleIdentifier}" ]
    then
      # Get message title
      sv_HintTitle="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:MessageTitle")"
      if test -z "${sv_HintTitle}"
      then
        sv_HintTitle="HINT"
      fi

      # Get message content
      sv_HintContent="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:MessageContent")"

      if test -n "${sv_HintContent}"
      then
        # Substitute APPNAME in the title and content with the actual Application name
        sv_HintTitle="$(echo "${sv_HintTitle}" | sed "s|APPNAME|${sv_ThisAppName}|")"
        sv_HintContent="$(echo "${sv_HintContent}" | sed "s|APPNAME|${sv_ThisAppName}|")"

        bv_ShowHint="true"

        # Optional IsAdmin
        if [ "${bv_ShowHint}" = "true" ]
        then
          LW_bv_LogIsActiveStatus="false";bv_IsAdmin="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:IsAdmin")";LW_bv_LogIsActiveStatus=${LW_bv_LogIsActiveDefault}
          if test -n "${bv_IsAdmin}"
          then
            if [ "${bv_IsAdmin}" != "${LW_bv_LoggedInUserIsAdmin}" ]
            then
              bv_ShowHint="false"
            fi
          fi
        fi

        # Optional IsLocalAccount
        if [ "${bv_ShowHint}" = "true" ]
        then
          LW_bv_LogIsActiveStatus="false";bv_IsLocalAccount="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:IsLocalAccount")";LW_bv_LogIsActiveStatus=${LW_bv_LogIsActiveDefault}
          if test -n "${bv_IsLocalAccount}"
          then
            if [ "${bv_IsLocalAccount}" != "${LW_bv_LoggedInUserIsLocal}" ]
            then
              bv_ShowHint="false"
            fi
          fi
        fi

        # Optional IsLocalHome
        if [ "${bv_ShowHint}" = "true" ]
        then
          LW_bv_LogIsActiveStatus="false";bv_IsLocalHome="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:AppHint:${iv_LoopCount}:IsLocalHome")";LW_bv_LogIsActiveStatus=${LW_bv_LogIsActiveDefault}
          if test -n "${bv_IsLocalHome}"
          then
            if [ "${bv_IsLocalHome}" != "${LW_bv_LoggedInUserHomeIsLocal}" ]
            then
              bv_ShowHint="false"
            fi
          fi
        fi

        # Display the Message
        if [ "${bv_ShowHint}" = "true" ]
        then
          LW_nf_logmessage "ATTENTION, showing hint to user for application '${sv_ThisAppBundleIdentifier}'"
          LW_nf_ShowNotification "${sv_HintTitle}" "${sv_HintContent}"
        
          bv_PolicyExecuted="true"
        fi
      fi
    fi
    
  done
  
  if [ "${bv_PolicyExecuted}" = "false" ]
  then
    LW_nf_QuickExit "NOTE, policy aborted: there are no hints for the application '${sv_ThisAppBundleIdentifier}'"
  fi

  ;;

*)
  LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
