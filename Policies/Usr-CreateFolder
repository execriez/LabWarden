#!/bin/bash
#
# Short:    Usr Policy script - Creates folders in the users home folder
# Author:   Mark J Swift
# Version:  2.0.7
# Modified: 27-May-2017
#
# Triggered by the following events:
#   Usr-ConsoleUserLoggedIn (as user)
#   Usr-AtDesktop           (as user)
#
# Called as follows:    
#   Usr-CreateFolder <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.7"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
# This might be one of the following system events:
#   Sys-Boot, Sys-LoginWindow, Sys-NetworkUp, Sys-NetworkDown, Sys-Login, Sys-Logout, Sys-LoginWindowIdle, Sys-LoginWindowRestartOrShutdown, Sys-Poll
# ...or one of the following User events:
#   Usr-Login, Usr-AtDesktop, App-WillLaunch, App-DidLaunch, App-DidTerminate, Usr-Poll, Usr-Logout
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by user policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are root
if [ "${GLB_sv_ThisUserName}" = "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

# Exit if the user home folder doesn't exist
if [ ! -e "${GLB_sv_LoggedInUserHomeDirPath}" ]
then
  GLB_nf_QuickExit "Policy aborted - home folder doesn't exist."
fi

# ---

case ${sv_EventName} in
    
Usr-ConsoleUserLoggedIn|Usr-AtDesktop|Usr-PolicyInstall)
  # Create Required folders where necessary
  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path")"

  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ReqdObjectFilePath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Path:${iv_LoopCount}")"

    # Sanitise the Entry
    sv_ReqdObjectFilePath=$(echo "${sv_ReqdObjectFilePath}" | sed "s|^|/|;s|^/[/]*|/|;s|[/]*$||")

    if test -n "${sv_ReqdObjectFilePath}"
    then
      if test -n "$(echo "${sv_ReqdObjectFilePath}" | grep -E "/NETWORKHOME$")"
      then
        if test -n "${GLB_sv_LoggedInUserHomeNetworkDirPath}"
        then
          if [ "${GLB_sv_LoggedInUserHomeNetworkDirPath}" != "${GLB_sv_LoggedInUserHomeDirPath}" ]
          then
            sv_ReqdObjectDirPath=$(echo "${sv_ReqdObjectFilePath}" | sed "s|/NETWORKHOME$||")
            if test -n "${sv_ReqdObjectDirPath}"
            then
              if ! test -e "${sv_ReqdObjectDirPath}"
              then
                GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Creating folder ${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
                /bin/mkdir -p "${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectDirPath}"
              fi
            fi
            GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Creating link ${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
            ln -sf "${GLB_sv_LoggedInUserHomeNetworkDirPath}" "${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
          fi
        fi
      else
        if ! test -e "${sv_ReqdObjectFilePath}"
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Creating folder ${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
          /bin/mkdir -p "${GLB_sv_LoggedInUserHomeDirPath}${sv_ReqdObjectFilePath}"
        fi
      fi
    fi
  done

  # Update Sys-LoginWindow.plist file
  GLB_nf_SetPlistProperty "${GLB_sv_LoggedInUserHomeDirPath}/Library/Preferences/loginwindow.plist" ":BuildVersionStampAsNumber" "${GLB_iv_BuildVersionStampAsNumber}"
  GLB_nf_SetPlistProperty "${GLB_sv_LoggedInUserHomeDirPath}/Library/Preferences/loginwindow.plist" ":BuildVersionStampAsString" "${GLB_sv_BuildVersionStampAsString}"
  GLB_nf_SetPlistProperty "${GLB_sv_LoggedInUserHomeDirPath}/Library/Preferences/loginwindow.plist" ":SystemVersionStampAsNumber" "${GLB_iv_SystemVersionStampAsNumber}"
  GLB_nf_SetPlistProperty "${GLB_sv_LoggedInUserHomeDirPath}/Library/Preferences/loginwindow.plist" ":SystemVersionStampAsString" "${GLB_sv_SystemVersionStampAsString}"
  ;;

Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
