#!/bin/bash
#
# Short:    Policy script - Request/renew computer certificate from certificate authority
# Author:   Mark J Swift
# Version:  1.0.92
# Modified: 21-Jul-2016
#
# Required for 802.1X authentication
#
# Triggered by the following events:
#   Boot (as root)
#
# Called as follows:    
#   SystemEstablishComputerCertificate <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="1.0.92"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
LW_sv_LoggedInUserName="${3}"

# Get optional parameter
sv_OptionalParam="${4}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "NOTE, policy aborted: User '${LW_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  
else
  bv_RenewComputerCert="true"

  sv_CertPemFilePath="${LW_sv_ThisScriptTempDirPath}/${LW_sv_ADComputerName}.pem"
  /usr/bin/security find-certificate -a -c "${LW_sv_ADComputerName}" -p /Library/Keychains/System.keychain > "${sv_CertPemFilePath}"
  if test -s "${sv_CertPemFilePath}"
  then
    iv_CertStartEpoch=$(date -j -f "%b %d %T %Y %Z" "$(cat "${sv_CertPemFilePath}" | /usr/bin/openssl x509 -noout -startdate | cut -f2 -d=)" "+%s")
    iv_CertEndEpoch=$(date -j -f "%b %d %T %Y %Z" "$(cat "${sv_CertPemFilePath}" | /usr/bin/openssl x509 -noout -enddate | cut -f2 -d=)" "+%s")

    iv_RenewCertBeforeDays="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:RenewCertBeforeDays")"

    if [ $((${iv_CertEndEpoch}-(${iv_RenewCertBeforeDays}*24*60*60))) -gt ${LW_sv_ThisScriptStartEpoch} ]
    then
      # Cert hasn't expired yet
      iv_RevokeCertBeforeEpoch="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:RevokeCertBeforeEpoch")"

      if [ ${iv_CertStartEpoch} -ge ${iv_RevokeCertBeforeEpoch} ]
      then
        # Cert hasn't been revoked
        bv_RenewComputerCert="false"
        LW_nf_logmessage "NOTE, computer certificate is still valid"
       fi
    fi
  fi
  
  if [ "${bv_RenewComputerCert}" = "true" ]
  then
  
    sv_CertTemplate="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:CertTemplate")"
    sv_CertAuthURL="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:CertAuthURL")"

    # Define a browser user agent
    sv_BrowserAgent="Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5"

    # Define (temporary) file names
    iv_CertKeyFilePath="${LW_sv_ThisScriptTempDirPath}/${LW_sv_ADComputerName}.key"
    sv_CertCsrFilePath="${LW_sv_ThisScriptTempDirPath}/${LW_sv_ADComputerName}.csr"
    sv_CertPemFilePath="${LW_sv_ThisScriptTempDirPath}/${LW_sv_ADComputerName}.pem"
    sv_CertPk12FilePath="${LW_sv_ThisScriptTempDirPath}/${LW_sv_ADComputerName}.p12"
    sv_MobileConfigFilePath="${LW_sv_ThisScriptTempDirPath}/${LW_sv_ADComputerName}.mobileconfig"

    # Generate a CSR file
    /usr/bin/openssl req -new -batch -newkey rsa:2048 -nodes -outform PEM -keyout "${iv_CertKeyFilePath}" -out "${sv_CertCsrFilePath}"

    # URL encode the CSR
    sv_EncodedCertCsrFileContents="$(LW_sf_urlencode "$(cat "${sv_CertCsrFilePath}")")"

    # Post the Certificate request to the Web Enrollment page 
    sv_ReqReplyContent="$(curl --connect-timeout 10 -k --ntlm -u ${LW_sv_ADTrustAccount}:${LW_sv_ADTrustPassword} -d CertRequest=${sv_EncodedCertCsrFileContents} -d SaveCert=yes -d Mode=newreq -d CertAttrib=CertificateTemplate:"${sv_CertTemplate}" ${sv_CertAuthURL}/certfnsh.asp)"

    if test -z "${sv_ReqReplyContent}"
    then
      # Display an error status
      LW_nf_QuickExit "NOTE, policy aborted - CERTIFICATE REQUEST FAILED (it probably timed out)"
    fi

    # We need the ReqID from the server response
    iv_ReqReplyID=$(echo "${sv_ReqReplyContent}" | grep "ReqID=" | grep -v "Renewal" | sed "s|\(.*ReqID=\)\(.*\)|\2|;s|\(^[0-9]*\)\(.*\)|\1|" | head -n 1)

    if test -z "${iv_ReqReplyID}"
    then
      # Display an error status
      LW_nf_QuickExit "NOTE, policy aborted - CERTIFICATE REQUEST FAILED (read the server response below) ${sv_ReqReplyContent}"
  
    else
      # Pull the computer cert down in PEM format
      curl --connect-timeout 10 -k -o "${sv_CertPemFilePath}" -A "${sv_BrowserAgent}" --ntlm -u ${LW_sv_ADTrustAccount}:${LW_sv_ADTrustPassword} "${sv_CertAuthURL}/certnew.cer?ReqID=${iv_ReqReplyID}&Enc=b64"

    fi

    # Pack the computer cert and private key into a PKCS12 file
    openssl pkcs12 -export -in "${sv_CertPemFilePath}" -inkey "${iv_CertKeyFilePath}" -out "${sv_CertPk12FilePath}" -name "${LW_sv_ADTrustAccount}" -passout "pass:pass"

    # Get the Wi-Fi options
    sv_SSIDSTR="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SSIDSTR")"
    sv_ProxyType="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ProxyType")"

    # Generate some unique uuids for the payloads within the mobileconfig
    sv_ConfigPayloadUUID=$(uuidgen)
    sv_CertPayloadUUID=$(uuidgen)
    sv_WiFiPayloadUUID=$(uuidgen)

    # Create the mobile config
    cat << HEREDOC > "${sv_MobileConfigFilePath}"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>PayloadContent</key>
  <array>
    <dict>
      <key>Password</key>
      <string>pass</string>
      <key>PayloadCertificateFileName</key>
      <string>${LW_sv_ADComputerName}.p12</string>
      <key>PayloadContent</key>
      <data>
      </data>
      <key>PayloadDescription</key>
      <string>Configures certificate settings.</string>
      <key>PayloadDisplayName</key>
      <string>${LW_sv_ADComputerName}.p12</string>
      <key>PayloadIdentifier</key>
      <string>ComputerCertificate.${LW_sv_ADComputerName}</string>
      <key>PayloadType</key>
      <string>com.apple.security.pkcs12</string>
      <key>PayloadUUID</key>
      <string>${sv_CertPayloadUUID}</string>
      <key>PayloadVersion</key>
      <integer>1</integer>
    </dict>
    <dict>
      <key>AutoJoin</key>
      <true/>
      <key>EAPClientConfiguration</key>
      <dict>
        <key>AcceptEAPTypes</key>
        <array>
          <integer>13</integer>
        </array>
      </dict>
      <key>EncryptionType</key>
      <string>WPA</string>
      <key>HIDDEN_NETWORK</key>
      <true/>
      <key>IsHotspot</key>
      <false/>
      <key>PayloadCertificateUUID</key>
      <string>${sv_CertPayloadUUID}</string>
      <key>PayloadDescription</key>
      <string>Configure Wi-Fi</string>
      <key>PayloadDisplayName</key>
      <string>WiFi</string>
      <key>PayloadIdentifier</key>
      <string>${sv_WiFiPayloadUUID}</string>
      <key>PayloadType</key>
      <string>com.apple.wifi.managed</string>
      <key>PayloadUUID</key>
      <string>${sv_WiFiPayloadUUID}</string>
      <key>PayloadVersion</key>
      <real>1</real>
      <key>ProxyType</key>
      <string>${sv_ProxyType}</string>
      <key>SSID_STR</key>
      <string>${sv_SSIDSTR}</string>
            <key>SetupModes</key>
      <array>
        <string>System</string>
      </array>
    </dict>
  </array>
  <key>PayloadDisplayName</key>
  <string>${sv_SSIDSTR}</string>
  <key>PayloadIdentifier</key>
  <string>${sv_SSIDSTR}-8021XWiFi</string>
  <key>PayloadRemovalDisallowed</key>
  <true/>
  <key>PayloadScope</key>
  <string>System</string>
  <key>PayloadType</key>
  <string>Configuration</string>
  <key>PayloadUUID</key>
  <string>${sv_ConfigPayloadUUID}</string>
  <key>PayloadVersion</key>
  <integer>1</integer>
</dict>
</plist>
HEREDOC

    # Insert the pkcs12 file into the mobileconfig
    /usr/libexec/PlistBuddy -c "Import PayloadContent:0:PayloadContent ${sv_CertPk12FilePath}" "${sv_MobileConfigFilePath}"

    # Remove any previous payload
    profiles >/dev/null 2>&1 -R -p "${sv_SSIDSTR}-8021XWiFi"

    # Install the mobileconfig
    profiles -I -F "${sv_MobileConfigFilePath}"

    LW_nf_logmessage "ATTENTION, machine certificate installed/renewed."
  fi

fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
