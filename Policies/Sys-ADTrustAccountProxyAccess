#!/bin/bash
#
# Short:    Sys Policy script - Give certain processes access through proxy using AD workstation credentials
# Author:   Mark J Swift
# Version:  2.0.7
# Modified: 27-May-2017
#
# Triggered by the following events:
#   Sys-Boot            (as root)
#   Sys-NetworkUp       (as root)
#
# Called as follows:    
#   Sys-ADTrustAccountProxyAccess <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.7"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Usr-PolicyInstall & Usr-PolicyUninstall events (which are called as a normal user) are ignored by system policies

if [ "${sv_EventName}" = "Usr-PolicyInstall" ] || [ "${sv_EventName}" = "Usr-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

Nf_RemoveADTrustAccountProxyAccess() # protocol (eg 'http' 'htps' 'ftp') server (eg yourproxy.your.domain) port (eg 8080)
{
  local iv_ProxyPort
  local sv_AllowAccessDirPathList
  local sv_Label
  local sv_ProxyProtocol
  local sv_ProxyAddress
  local sv_Toption

  sv_ProxyProtocol="${1}"
  sv_ProxyAddress="${2}"
  iv_ProxyPort="${3}"
  sv_AllowAccessDirPathList="${4}"
  
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Removing access through proxy ${sv_ProxyProtocol}://${sv_ProxyAddress}:${iv_ProxyPort}."

  # Remove v1 entry
  sv_Label="${sv_ProxyProtocol}_${sv_ProxyAddress}_${iv_ProxyPort}"
  security delete-internet-password -l "${sv_Label}" /Library/Keychains/System.keychain
  
  # Remove entry
  sv_Label="${sv_ProxyProtocol}_${sv_ProxyAddress}_${iv_ProxyPort}_${sv_ConfigEntryName}"
  security delete-internet-password -l "${sv_Label}" /Library/Keychains/System.keychain
}

Nf_GiveADTrustAccountProxyAccess() # protocol (eg 'http' 'htps' 'ftp') server (eg yourproxy.your.domain) port (eg 8080) appPath (eg /usr/sbin/ocspd)
{
  local iv_ProxyPort
  local sv_AllowAccessDirPathList
  local sv_Label
  local sv_ProxyProtocol
  local sv_ProxyAddress
  local sv_Toption

  sv_ProxyProtocol="${1}"
  sv_ProxyAddress="${2}"
  iv_ProxyPort="${3}"
  sv_AllowAccessDirPathList="${4}"
  
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Allowing ${sv_AllowAccessDirPathList} through ${sv_ProxyProtocol}://${sv_ProxyAddress}:${iv_ProxyPort}."

  sv_Toption="$(echo "${sv_AllowAccessDirPathList}" | sed "s|^|-T '|;s|$|'|;s|,|' -T '|g")"
  
  sv_Label="${sv_ProxyProtocol}_${sv_ProxyAddress}_${iv_ProxyPort}_${sv_ConfigEntryName}"

  # Just a little trick to expand the sv_Toption variable, but keep the password quoted (eval wouldnt do)
  /usr/bin/su root <<HEREDOC
  security add-internet-password -U -a "${GLB_sv_ADTrustAccount}" -w "${GLB_sv_ADTrustPassword}" -l "${sv_Label}" -P "${iv_ProxyPort}" -r "${sv_ProxyProtocol}" -s "${sv_ProxyAddress}" ${sv_Toption} /Library/Keychains/System.keychain
HEREDOC
}

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# Exit if the workstation is not bound to AD
if test -z "${GLB_sv_ADDomainNameDNS}"
then
  GLB_nf_QuickExit "Policy aborted - Computer probably not bound to AD."
fi

# ---

case ${sv_EventName} in
    
Sys-Boot|Sys-NetworkUp|Sys-PolicyUninstall)

  bv_SetupProxyAccess="false"
  if [ "${sv_EventName}" = "Sys-NetworkUp" ]
  then
    if [ "${GLB_sv_ADDomainNameDNS}" = "${GLB_sv_NetworkServiceDHCPOption15}" ]
    then
      bv_SetupProxyAccess="true"
    fi
  fi
       
  iv_ProxyCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Proxy")"
  for (( iv_LoopCount1=0; iv_LoopCount1<${iv_ProxyCount}; iv_LoopCount1++ ))
  do
    sv_ProxyProtocol="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Protocol")"
    if test -n "${sv_ProxyProtocol}"
    then
      sv_ProxyAddress="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Address")"
      if test -n "${sv_ProxyAddress}"
      then
        iv_ProxyPort="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Port")"
        if test -n "${iv_ProxyPort}"
        then
          Nf_RemoveADTrustAccountProxyAccess "${sv_ProxyProtocol}" "${sv_ProxyAddress}" "${iv_ProxyPort}"

          if [ "${bv_SetupProxyAccess}" = "true" ]
          then

            # Give certain processes access to through proxy using workstation credentials
            sv_ProcessList=""
            iv_ProcessCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Process")"
            for (( iv_LoopCount2=0; iv_LoopCount2<${iv_ProcessCount}; iv_LoopCount2++ ))
            do
              sv_ProcessName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Process:${iv_LoopCount2}")"
              if test -n "${sv_ProcessName}"
              then
                if test -n "${sv_ProcessList}"
                then
                  sv_ProcessList="${sv_ProcessList},"
                fi
                sv_ProcessList="${sv_ProcessList}${sv_ProcessName}"
              fi
            done

            if test -n "${sv_ProcessList}"
            then
              Nf_GiveADTrustAccountProxyAccess "${sv_ProxyProtocol}" "${sv_ProxyAddress}" "${iv_ProxyPort}" "${sv_ProcessList}"
            fi
            
          fi
      
        fi
      fi
    fi
  done
  ;;

Sys-PolicyInstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
