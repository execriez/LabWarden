#!/bin/bash
#
# Short:    Example App Policy script - A blank canvas
# Author:   Mark J Swift
# Version:  1.0.92
# Modified: 21-Jul-2016
#
# Triggered by the following events:
#   AppWillLaunch   (as user)
#   AppDidLaunch    (as user)
#   AppDidTerminate (as user)
#
#   ...see associated config 'AppExamplePolicy.LabWarden.plist'
#
# Called as follows:    
#   AppExamplePolicy <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="1.0.92"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get the event that triggered this policy.
# This can be one of the following system events:
#   Boot, LoginWindow, NetworkUp, NetworkDown, LoginBegin, LogoutEnd, LoginWindowIdle, LoginWindowRestartOrShutdown
# ...or one of the following User events:
#   UserLogin, UserAtDesktop, AppWillLaunch, AppDidLaunch, AppDidTerminate, UserIdle, UserLogout

sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${4}"

# ---

# Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
# Note, older applications may return "(null)"
sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

# Get notification e.g. WillLaunch, DidLaunch or DidTerminate
sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

# Get Date/Time Epoch of the notification
iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

# Get ApplicationName e.g. TextEdit
sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

# Get ApplicationPath e.g. /Applications/TextEdit.app
sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

# Get ApplicationProcessIdentifier - i.e. the process ID
sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if test -z "${LW_sv_LoggedInUserName}"
then
  LW_nf_QuickExit "NOTE, policy aborted: No-one is logged in."
  
else
  LW_nf_logmessage "ATTENTION, running Policy '${sv_PolicyName}'"

  # ------------------
  # BEGIN YOUR CODE HERE
  
  # Get a value from the static config
  bv_ExampleBool="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ExampleBool")"
  
  if [ "${bv_ExampleBool}" = "true" ]
  then
  
    case ${sv_EventName} in
    
    AppWillLaunch)
      # Do this just before an Application launches
      say "${sv_PolicyName}, ${sv_EventName} ${sv_ThisAppName}" &
      ;;

    AppDidLaunch)
      # Do this when an Application has fully launched
      say "${sv_PolicyName}, ${sv_EventName} ${sv_ThisAppName}" &
      ;;

    AppDidTerminate)
      # Do this when an Application quits
      say "${sv_PolicyName}, ${sv_EventName} ${sv_ThisAppName}" &
      ;;

    esac

  fi
  
  # Write a value to the vars 
  LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_PolicyName}:LocalPrefs:LastRunEpoch" "${LW_sv_ThisScriptStartEpoch}"

  # END YOUR CODE HERE
  # ------------------
  
fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
