#!/bin/bash
#
# Short:    Sys Policy script - Over-rides inbuilt hard-coded defaults
# Author:   Mark J Swift
# Version:  2.0.6
# Modified: 27-May-2017
#
# Triggered by the following events:
#   Sys-Boot (as root)
#
#   ... see associated config 'Sys-Defaults.mobileconfig'
#
# Called as follows:    
#   sys-Defaults <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.6"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
# This might be one of the following system events:
#   Sys-Boot, Sys-LoginWindow, Sys-NetworkUp, Sys-NetworkDown, Sys-Login, Sys-Logout, Sys-LoginWindowIdle, Sys-LoginWindowRestartOrShutdown, Sys-Poll
# ...or one of the following User events:
#   Usr-Login, Usr-AtDesktop, App-WillLaunch, App-DidLaunch, App-DidTerminate, Usr-Poll, Usr-Logout
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# ---

case ${sv_EventName} in

Sys-Boot|Sys-PolicyInstall)
  
  # Get a value from the static config
  bv_LoadConfigsFromADnotesDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:LoadConfigsFromADnotes")"
  if test -z "${bv_LoadConfigsFromADnotesDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    bv_LoadConfigsFromADnotesDefault=${GLB_bv_LoadConfigsFromADnotesDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:LoadConfigsFromADnotes" "${bv_LoadConfigsFromADnotesDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:LoadConfigsFromADnotes='${bv_LoadConfigsFromADnotesDefault}' "

  # Get a value from the static config
  bv_UseLoginhookDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:UseLoginhook")"
  if test -z "${bv_UseLoginhookDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    bv_UseLoginhookDefault=${GLB_bv_UseLoginhookDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:UseLoginhook" "${bv_UseLoginhookDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:UseLoginhook='${bv_UseLoginhookDefault}' "

  # Get a value from the static config
  bv_LogIsActiveDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:LogIsActive")"
  if test -z "${bv_LogIsActiveDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    bv_LogIsActiveDefault=${GLB_bv_LogIsActiveDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:LogIsActive" "${bv_LogIsActiveDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:LogIsActive='${bv_LogIsActiveDefault}' "

  # Get a value from the static config
  iv_MaxLogSizeBytesDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:MaxLogSizeBytes")"
  if test -z "${iv_MaxLogSizeBytesDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    iv_MaxLogSizeBytesDefault=${GLB_iv_MaxLogSizeBytesDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:MaxLogSizeBytes" "${iv_MaxLogSizeBytesDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:MaxLogSizeBytes='${iv_MaxLogSizeBytesDefault}' "

  # Get a value from the static config
  iv_LogLevelTrapDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:LogLevelTrap")"
  if test -z "${iv_LogLevelTrapDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    iv_LogLevelTrapDefault=${GLB_iv_LogLevelTrapDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:LogLevelTrap" "${iv_LogLevelTrapDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:LogLevelTrap='${iv_LogLevelTrapDefault}' "

  # Get a value from the static config
  iv_NotifyLevelTrapDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:NotifyLevelTrap")"
  if test -z "${iv_NotifyLevelTrapDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    iv_NotifyLevelTrapDefault=${GLB_iv_NotifyLevelTrapDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:NotifyLevelTrap" "${iv_NotifyLevelTrapDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:NotifyLevelTrap='${iv_NotifyLevelTrapDefault}' "

  # Get a value from the static config
  iv_GPforceAgeMinutesDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:GPforceAgeMinutes")"
  if test -z "${iv_GPforceAgeMinutesDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    iv_GPforceAgeMinutesDefault=${GLB_iv_GPforceAgeMinutesDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:GPforceAgeMinutes" "${iv_GPforceAgeMinutesDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:GPforceAgeMinutes='${iv_GPforceAgeMinutesDefault}' "

  # Get a value from the static config
  iv_GPquickAgeMinutesDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:GPquickAgeMinutes")"
  if test -z "${iv_GPquickAgeMinutesDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    iv_GPquickAgeMinutesDefault=${GLB_iv_GPquickAgeMinutesDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:GPquickAgeMinutes" "${iv_GPquickAgeMinutesDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:GPquickAgeMinutes='${iv_GPquickAgeMinutesDefault}' "

  # Get a value from the static config
  iv_GPdefaultAgeMinutesDefault="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:GPdefaultAgeMinutes")"
  if test -z "${iv_GPdefaultAgeMinutesDefault}"
  then
    # Use the hard-coded values if there is no static config entry
    iv_GPquickAgeMinutesDefault=${GLB_iv_GPdefaultAgeMinutesDefault}
  fi
  # Write value to global config
  GLB_nf_SetPlistProperty "${sv_ThisPolicyGlobalPrefFilePath}" ":${sv_PolicyName}:GlobalPrefs:GPdefaultAgeMinutes" "${iv_GPdefaultAgeMinutesDefault}"
  # Update Log
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting global default:GPdefaultAgeMinutes='${iv_GPdefaultAgeMinutesDefault}' "

  ;;

Sys-PolicyUninstall)

  # Delete config (LabWarden will use the hard coded defaults)
  rm -f "${sv_ThisPolicyGlobalPrefFilePath}"
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
