#!/bin/bash
#
# Short:    Sys Policy script - Update the LabWarden installation to a later version
# Author:   Mark J Swift
# Version:  2.0.17
# Modified: 05-Oct-2017
#
# Triggered by the following events:
#   Sys-Poll            (as root)
#   Sys-ManualTrigger   (as root)
#
# Called as follows:    
#   Sys-LabWardenUpdate <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.17"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Usr-PolicyInstall & Usr-PolicyUninstall events (which are called as a normal user) are ignored by system policies

if [ "${sv_EventName}" = "Usr-PolicyInstall" ] || [ "${sv_EventName}" = "Usr-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

if_VersionStringToNumber()
{
  local sv_VersionAsString
  local iv_VersionAsNumber
  local iv_Num
  
  sv_VersionAsString="${1}"
  
  iv_VersionAsNumber=0
  for iv_Num in $(echo ${sv_VersionAsString}".0.0.0.0" | cut -d"." -f1-4 | tr "." "\n")
  do
    iv_VersionAsNumber=$((${iv_VersionAsNumber}*256+${iv_Num}))
  done
  
  echo ${iv_VersionAsNumber}
}

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# ---

case ${sv_EventName} in
    
Sys-Idle|Sys-ManualTrigger|Sys-PolicyInstall)

  iv_PackageCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Package")"
  for (( iv_PackageIndex=0; iv_PackageIndex<${iv_PackageCount}; iv_PackageIndex++ ))
  do
    sv_PackageID="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Package:${iv_PackageIndex}:ID")"
    sv_PackageVersionString="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Package:${iv_PackageIndex}:VersionString")"
    sv_PackageURI="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Package:${iv_PackageIndex}:URI")"
  
    # Get the installed version string
    sv_InstalledVersionString="$(pkgutil --pkg-info ${sv_PackageID} | grep -i "version:" | cut -d" " -f2)"
    if test -z "${sv_InstalledVersionString}"
    then
      sv_InstalledVersionString="0"
    fi

    # Get the maximum length version string
    iv_PackageVersionLen=$(echo ${sv_PackageVersionString} | tr "." "\n" | wc -l | sed "s|^[ ]*||;s|[ ]*$||")
    iv_InstalledVersionLen=$(echo ${sv_InstalledVersionString} | tr "." "\n" | wc -l | sed "s|^[ ]*||;s|[ ]*$||")
    if [ ${iv_PackageVersionLen} -gt ${iv_InstalledVersionLen} ]
    then
      iv_VersionLen=${iv_PackageVersionLen}
    else
      iv_VersionLen=${iv_InstalledVersionLen}
    fi

    # Extend version strings to the maximum
    sv_PackageVersionString=$(echo ${sv_PackageVersionString}"$(jot -b "." ${iv_VersionLen} | tr "\n" "0")" | cut -d"." -f1-${iv_VersionLen})
    sv_InstalledVersionString=$(echo ${sv_InstalledVersionString}"$(jot -b "." ${iv_VersionLen} | tr "\n" "0")" | cut -d"." -f1-${iv_VersionLen})

    bv_UpdateHasLaterVersion="false"

    for (( iv_Count = 1; iv_Count <= iv_VersionLen; iv_Count++ )); do
      iv_UpdateDigit=$(echo ${sv_PackageVersionString} | cut -d"." -f${iv_Count})
      iv_InstalledDigit=$(echo ${sv_InstalledVersionString} | cut -d"." -f${iv_Count})
      if [ ${iv_UpdateDigit} -lt ${iv_InstalledDigit} ]
      then
        break
      fi
      if [ ${iv_UpdateDigit} -gt ${iv_InstalledDigit} ]
      then
        bv_UpdateHasLaterVersion="true"
        break
      fi
    done

    if [ "${bv_UpdateHasLaterVersion}" = "false" ]
    then
      GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "${sv_PackageID} is up-to-date; nothing to do"
    
    else
      sv_UpdatePackageFilePath=$(GLB_sf_ResolveFileURItoPath "${sv_PackageURI}")
      if test -z "${sv_UpdatePackageFilePath}"
      then
        GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Possible config error - UpdatePackageURI '${sv_PackageURI}' is not resolvable."
      
      else
        if [ "$(stat -f '%Su' /dev/console)" = "root" ] || [ -z "$(installer -pkginfo -verbose -package "${sv_UpdatePackageFilePath}" | grep "Will Restart" | grep -E "YES$")" ]
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Installing '${sv_PackageURI}'."
          installer 2>&1 -pkg "${sv_UpdatePackageFilePath}" -target / >> "${GLB_sv_ThisUserLogDirPath}/${GLB_sv_ProjectSignature}.log"
        else
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "User is logged in, delaying Install of '${sv_PackageURI}'."
        fi
      fi
  
    fi
  
  done
  ;;
  
Sys-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#/usr/local/LabWarden/lib/Trigger "${sv_EventHistory}:${sv_PolicyName}" "$(whoami)" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
