#!/bin/bash
#
# Short:    Usr Policy script - Deletes files and folder from the users home folder
# Author:   Mark J Swift
# Version:  2.0.18
# Modified: 14-Oct-2017
#
# Triggered by the following events:
#   Usr-AtDesktop           (as user)
#   Usr-Idle                (as user)
#
# Called as follows:    
#   Usr-DeleteFiles <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>
#
# This policy can be potentially unsafe if misconfigured

# ---

sv_CodeVersion="2.0.18"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by user policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

sf_BuildPattern() # Pattern PathList - PathList is a string of paths separated by commas
{
  local sv_Pattern
  local sv_PathList
  local sv_Path
  local sv_PathShort
  
  sv_Pattern=${1}
  sv_PathList=${2}
  
  while read sv_Path
  do
    # Sanitise the file/folder Path
    sv_Path=$(echo "${sv_Path}" | sed "s|^|/|;s|^/[/]*|/|")

    # file/folder Path without any trailing /
    sv_PathShort=$(echo "${sv_Path}" | sed "s|[/]*$||")
 
    if test -n "${sv_PathShort}"
    then
      if test -n "${sv_Pattern}"
      then
        sv_Pattern="${sv_Pattern}|"
      fi
      sv_Pattern="${sv_Pattern}${sv_PathShort}"
      if [ "${sv_PathShort}" != "${sv_Path}" ]
      then
        # Must have declared a directory for exclusion
        sv_Pattern="${sv_Pattern}|${sv_Path}.*"
      fi
    fi
  done < <(echo ${sv_PathList}| tr "," "\n")
  
  echo "${sv_Pattern}"
}

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are an unsupported user
case ${GLB_sv_ThisUserName} in
    
root|_mbsetupuser)
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  ;;
  
esac

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

# Exit if the user home folder doesn't exist
if [ ! -e "${GLB_sv_LoggedInUserHomeDirPath}" ]
then
  GLB_nf_QuickExit "Policy aborted - home folder doesn't exist." ${GLB_iv_MsgLevelWarn}
fi

# ---

case ${sv_EventName} in
    
Usr-AtDesktop|Usr-Idle)
  GLB_nf_logmessage ${GLB_iv_MsgLevelWarn} "This policy can be potentially unsafe if misconfigured"

  bv_SafeFlag="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:SafeFlag")"
  if [ "${bv_SafeFlag}" = "false" ]
  then
    GLB_nf_logmessage ${GLB_iv_MsgLevelWarn} "User folder is not protected from deletion"
  else
    bv_SafeFlag="true"
    GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "User folder deletes are restricted to the Library folder"
  fi
    
  sv_IncludePattern=""

  if test -n "${GLB_sv_LoggedInUserLocalHomeDirPath}"
  then
    if [ "${bv_SafeFlag}" = "true" ]
    then
      sv_IncludePattern="$(sf_BuildPattern "${sv_IncludePattern}" "${GLB_sv_LoggedInUserLocalHomeDirPath}/Library/")"
    else
      sv_IncludePattern="$(sf_BuildPattern "${sv_IncludePattern}" "${GLB_sv_LoggedInUserLocalHomeDirPath}/")"
    fi
   fi
   
  if test -n "${GLB_sv_LoggedInUserHomeNetworkDirPath}"
  then
    if [ "${bv_SafeFlag}" = "true" ]
    then
      sv_IncludePattern="$(sf_BuildPattern "${sv_IncludePattern}" "${GLB_sv_LoggedInUserHomeNetworkDirPath}/Library/")"
    else
      sv_IncludePattern="$(sf_BuildPattern "${sv_IncludePattern}" "${GLB_sv_LoggedInUserHomeNetworkDirPath}/")"
    fi
  fi

  iv_DelPathCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Delete")"
  for (( iv_LoopCount1=0; iv_LoopCount1<${iv_DelPathCount}; iv_LoopCount1++ ))
  do
    sv_DelPath="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Delete:${iv_LoopCount1}:Path")"

    # Sanitise the file/folder Path
    sv_DelPath=$(echo "${sv_DelPath}" | sed "s|^|/|;s|^/[/]*|/|;s|[/]*$||")

    if test -n "${sv_DelPath}"
    then
      sv_ProcessFilePath="${GLB_sv_LoggedInUserHomeDirPath}${sv_DelPath}"
      if test -e "${sv_ProcessFilePath}"
      then
        # If the filepath references a link, get the originating filepath
        sv_ProcessFilePath=$(GLB_sf_OriginalFilePath "${sv_ProcessFilePath}")
        
        if test -d "${sv_ProcessFilePath}"
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Deleting files and folders from '${sv_ProcessFilePath}' "
          iv_fcount=0
          iv_dcount=0

          sv_ExcludePattern="/"
          
          # Append exclude list to exclude pattern 
          iv_ExcludeCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Delete:${iv_LoopCount1}:Exclude")"
          sv_PathList=""
          for (( iv_LoopCount2=0; iv_LoopCount2<${iv_ExcludeCount}; iv_LoopCount2++ ))
          do
            sv_Exclude="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Delete:${iv_LoopCount1}:Exclude:${iv_LoopCount2}")"
            if test -n "${sv_Exclude}"
            then
              if test -n "${sv_PathList}"
              then
                sv_PathList="${sv_PathList},"
              fi
              sv_PathList="${sv_PathList}${sv_ProcessFilePath}${sv_Exclude}"              
            fi
          done
          sv_ExcludePattern="$(sf_BuildPattern "${sv_ExcludePattern}" "${sv_PathList}")"

          # Do the actual delete
          while read sv_DelFilePath
          do
            if test -f "${sv_DelFilePath}"
            then
              rm -f "${sv_DelFilePath}"
              if [ $? -ne 0 ]
              then
                GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Could not delete file '${sv_DelFilePath}'"
              else
                GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Deleted File '${sv_DelFilePath}'"
                iv_fcount=$((${iv_fcount}+1))
              fi
            else
              rm -d "${sv_DelFilePath}"
              if [ $? -ne 0 ]
              then
                GLB_nf_logmessage ${GLB_iv_MsgLevelWarn} "Did not delete dir '${sv_DelFilePath}'"
              else
                GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Deleted dir '${sv_DelFilePath}'"
                iv_dcount=$((${iv_dcount}+1))
              fi
            fi
            
            # Limit the whole process to 30 secs as we don't want to hog the CPU
            if [ $(( $(date -u "+%s")-${GLB_iv_ThisScriptStartEpoch} )) -gt 30 ]
            then
              GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Delete files postponed until later, as it was taking too long"
              break
            fi
          done < <(find -d -E "${sv_ProcessFilePath}" -regex "(${sv_IncludePattern})" -and -not -regex "(${sv_ExcludePattern})")
          
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Deleted ${iv_fcount} files and ${iv_dcount} folders from '${sv_ProcessFilePath}' "
          
        else
          # Delete file
          rm -f "${sv_ProcessFilePath}"
          if [ $? -ne 0 ]
          then
            GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Could not delete file '${sv_ProcessFilePath}'"
          else
            GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Deleted File '${sv_ProcessFilePath}'"
          fi
          
        fi
      fi
    fi

  done
  ;;

Usr-PolicyInstall|Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#/usr/local/LabWarden/lib/Trigger "${sv_EventHistory}:${sv_PolicyName}" "$(whoami)" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
