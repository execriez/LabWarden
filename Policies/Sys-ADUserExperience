#!/bin/bash
#
# Short:    Sys Policy script - Sets how user homes on network accounts are handled as determined by the "User Experience" tab of the Directory Utility app
# Author:   Mark J Swift
# Version:  2.0.8
# Modified: 30-May-2017
#
# Reference: Remove network home question mark from dock - jclark - https://jamfnation.jamfsoftware.com/discussion.html?id=10753
#
# Triggered by the following events:
#   Sys-ActiveDirectoryUp (as root)
#
# Called as follows:    
#   Sys-ADUserExperience <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.8"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Usr-PolicyInstall & Usr-PolicyUninstall events (which are called as a normal user) are ignored by system policies

if [ "${sv_EventName}" = "Usr-PolicyInstall" ] || [ "${sv_EventName}" = "Usr-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# check config "ActiveForDomain" setting to see if we are active or not. Can pass an optional subkey.
Sf_OptionIsActiveForThisDomain() # [subkey]
{
  local bv_IsActive
  local iv_IsActiveForDomainCount
  local sv_IsActiveForDomain
  
  sv_SubKey="${1}"
  if test -n "${sv_SubKey}" 
  then
    # add a single colon to the subkey
    sv_SubKey=$(echo "${sv_SubKey}:" | sed "s|[:]*$|:|")
  fi
  
  # Note, config "ActiveForDomain" value can be null, ALL, NONE, ADDOMAIN or your.company.domain

  bv_IsActive="false"
  iv_IsActiveForDomainCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:${sv_SubKey}ActiveForDomain")"
  for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
  do
    sv_IsActiveForDomain=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:${sv_SubKey}ActiveForDomain:${iv_IsActiveForDomainIndex}")
    if test -n "${sv_IsActiveForDomain}"
    then
      case ${sv_IsActiveForDomain} in
      ALL)
        bv_IsActive="true"
        break 2
        ;;
        
      NONE)
        break 2
        ;;
        
      ADDOMAIN)
        sv_IsActiveForDomain="${GLB_sv_ADDomainNameDNS}"
        ;;
          
      esac
    fi
    
    if [ "${sv_IsActiveForDomain}" = "${GLB_sv_NetworkServiceDHCPOption15}" ]
    then
      bv_IsActive="true"
      break
    fi
  done
  
  echo "${bv_IsActive}"
}

GLB_sf_SetSearchPathForAD() # <recordpath> <value>
{
  local sv_RecordPath
  local sv_Value
  local bv_ReloadDirectoryServices
  local bv_AddActiveSearchPath
  local sv_SearchPath
  
  sv_RecordPath="${1}"
  sv_Value="${2}"

  bv_ReloadDirectoryServices="false"
  bv_AddActiveSearchPath="true"
  
  dscl "${sv_RecordPath}" -create / SearchPolicy CSPSearchPath

  while read sv_SearchPath
  do
    if [ "${sv_SearchPath}" = "${sv_Value}" ]
    then
      bv_AddActiveSearchPath="false"
      
    else
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Deleting CSPSearchPath: '${sv_SearchPath}' from '${sv_RecordPath}'"
      bv_ReloadDirectoryServices="true"
      dscl "${sv_RecordPath}" -delete / CSPSearchPath "${sv_SearchPath}"
    fi
  done < <(dscl "${sv_RecordPath}" -read / CSPSearchPath | sed 's|^CSPSearchPath:||;s|^[ ]*||;/^\s*$/d' | grep "/Active Directory")
  
  if [ "${bv_AddActiveSearchPath}" = "true" ]
  then
    GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Appending CSPSearchPath: '${sv_Value}' to '${sv_RecordPath}'"
    dscl "${sv_RecordPath}" -append / CSPSearchPath "${sv_Value}"
    bv_ReloadDirectoryServices="true"
  fi

  echo "${bv_ReloadDirectoryServices}"
}

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# Exit if the workstation is not bound to AD
if test -z "${GLB_sv_ADDomainNameDNS}"
then
  GLB_nf_QuickExit "Policy aborted - Computer probably not bound to AD."
fi

# ---

case ${sv_EventName} in
    
Sys-ActiveDirectoryUp|Sys-PolicyInstall)
  bv_ConfigActive=$(Sf_OptionIsActiveForThisDomain)

  if [  "${bv_ConfigActive}" = "true" ]
  then
    # Get previous values - exit if the relevant string isn't found
    
    sv_PropertyString="Create mobile account at login";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
	sv_ActiveOPTmobile="${sv_PropertyValue}"
	
    sv_PropertyString="Require confirmation";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
	sv_ActiveOPTmobileconfirm="${sv_PropertyValue}"
	
    sv_PropertyString="Force home to startup disk";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
	sv_ActiveOPTlocalhome="${sv_PropertyValue}"
	
    sv_PropertyString="Mount home as sharepoint";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
	sv_ActiveOPTsharepoint="${sv_PropertyValue}"
	
    sv_PropertyString="Use Windows UNC path for home";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
	sv_ActiveOPTuseuncpath="${sv_PropertyValue}"
	
	if [ "${sv_ActiveOPTuseuncpath}" = "enable" ]
	then
      sv_PropertyString="Network protocol to be used";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||")
	  if test -z "${sv_PropertyValue}"
	  then
        GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	  fi
      sv_ActiveOPTprotocol="${sv_PropertyValue}"
    fi
    
    sv_PropertyString="Authentication from any domain";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
	sv_ActiveOPTallomains="${sv_PropertyValue}"
	
    sv_PropertyString="Preferred Domain controller";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||")
	if test -z "${sv_PropertyValue}"
	then
      GLB_nf_QuickExit "Policy aborted - dsconfigad string expected but not found '${sv_PropertyString}'"
	fi
    sv_ActiveOPTpreferredserver="${sv_PropertyValue}"
	if [ "${sv_ActiveOPTpreferredserver}" = "not set" ]
	then
	  sv_ActiveOPTpreferredserver=""
    fi

    # Get the required dsconfigad options
    
    sv_PropertyName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:mobile")"
    sv_OPTmobile="disable";[ "${sv_PropertyName}" = "true" ] && sv_OPTmobile="enable"
	if [ "${sv_OPTmobile}" = "enable" ]
	then
      sv_PropertyName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:mobileconfirm")"
      sv_OPTmobileconfirm="disable";[ "${sv_PropertyName}" = "true" ] && sv_OPTmobileconfirm="enable"
    fi
    
    sv_PropertyName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:localhome")"
    sv_OPTlocalhome="disable";[ "${sv_PropertyName}" = "true" ] && sv_OPTlocalhome="enable"
	if [ "${sv_OPTlocalhome}" = "enable" ]
	then
      sv_PropertyName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:sharepoint")"
      sv_OPTsharepoint="disable";[ "${sv_PropertyName}" = "true" ] && sv_OPTsharepoint="enable"
    fi
    
    sv_PropertyName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:useuncpath")"
    sv_OPTuseuncpath="disable";[ "${sv_PropertyName}" = "true" ] && sv_OPTuseuncpath="enable"
	if [ "${sv_OPTuseuncpath}" = "enable" ]
	then
      sv_OPTprotocol="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:protocol")"
    fi
    
    sv_PropertyName="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:alldomains")"
    sv_OPTallomains="disable";[ "${sv_PropertyName}" = "true" ] && sv_OPTallomains="enable"

    sv_OPTpreferredserver="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:preferredserver")"


    # Set the required dsconfigad options - we only set options that have changed

    bv_ReloadDirectoryServices="false"
      
    if [ "${sv_OPTmobile}" != "${sv_ActiveOPTmobile}" ]
    then
      dsconfigad -mobile ${sv_OPTmobile}
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -mobile ${sv_OPTmobile}"
      
      if [ "${sv_OPTmobile}" = "enable" ]
      then
        if [ "${sv_OPTmobileconfirm}" != "${sv_ActiveOPTmobileconfirm}" ]
        then
          dsconfigad -mobileconfirm ${sv_OPTmobileconfirm}
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -mobileconfirm ${sv_OPTmobileconfirm}"
        fi
      fi
      bv_ReloadDirectoryServices="true"
    fi
    
    
    if [ "${sv_OPTlocalhome}" != "${sv_ActiveOPTlocalhome}" ]
    then
      dsconfigad -localhome ${sv_OPTlocalhome}
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -localhome ${sv_OPTlocalhome}"

      if [ "${sv_OPTlocalhome}" = "enable" ]
      then
        if [ "${sv_OPTsharepoint}" != "${sv_ActiveOPTsharepoint}" ]
        then
          dsconfigad -sharepoint ${sv_OPTsharepoint}
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -sharepoint ${sv_OPTsharepoint}"
        fi
      fi
      bv_ReloadDirectoryServices="true"
    fi
    
    
    if [ "${sv_OPTuseuncpath}" != "${sv_ActiveOPTuseuncpath}" ]
    then
      dsconfigad -useuncpath ${sv_OPTuseuncpath}
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -useuncpath ${sv_OPTuseuncpath}"

      if [ "${sv_OPTuseuncpath}" = "enable" ]
      then
        if [ "${sv_OPTuseuncpath}" != "${sv_ActiveOPTuseuncpath}" ]
        then
          dsconfigad -protocol ${sv_OPTprotocol}
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -protocol ${sv_OPTprotocol}"
        fi
      
      fi
      bv_ReloadDirectoryServices="true"
    fi
    
  
    if [ "${sv_OPTpreferredserver}" != "${sv_ActiveOPTpreferredserver}" ]
    then
      if test -n "${sv_OPTpreferredserver}"
      then
        dsconfigad -preferred ${sv_OPTpreferredserver}
        sv_PreferredText="-preferred ${sv_OPTpreferredserver}"
        GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -preferred ${sv_OPTpreferredserver}"
      else
        dsconfigad -nopreferred
        sv_PreferredText="-nopreferred"
        GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -nopreferred"
      fi
      bv_ReloadDirectoryServices="true"
    fi


    if [ "${sv_OPTallomains}" != "${sv_ActiveOPTallomains}" ]
    then
      dsconfigad -alldomains ${sv_OPTallomains}
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Setting user experience: -alldomains ${sv_OPTallomains}"
      bv_ReloadDirectoryServices="true"
    fi


    if [ "${sv_OPTallomains}" = "enable" ]
    then
      sv_ActiveSearchPath="/Active Directory/${GLB_sv_ADDomainNameFlat}/All Domains"
    else
      sv_ActiveSearchPath="/Active Directory/${GLB_sv_ADDomainNameFlat}/${GLB_sv_ADDomainNameDNS}"
    fi
  
    bv_Reload=$(GLB_sf_SetSearchPathForAD "/Search" "${sv_ActiveSearchPath}")
    if [ "${bv_Reload}" = "true" ]
    then
      bv_ReloadDirectoryServices="true"
    fi
    
    bv_Reload=$(GLB_sf_SetSearchPathForAD "/Search/Contacts" "${sv_ActiveSearchPath}")
    if [ "${bv_Reload}" = "true" ]
    then
      bv_ReloadDirectoryServices="true"
    fi
  
  
    if [ "${bv_ReloadDirectoryServices}" = "true" ]
    then
      # This will cause an Sys-ActiveDirectoryUp event, so its important that we don't get caught in a loop
      # (If nothing changes, bv_ReloadDirectoryServices will be "false")
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Reloading directory services"
      killall DirectoryService
    fi
  
    # Remove network home question mark from dock - thanks to - jclark - https://jamfnation.jamfsoftware.com/discussion.html?id=10753
    /usr/libexec/PlistBuddy 2>/dev/null -c "Delete :module\ options:ActiveDirectory:managed\ client\ template:mcx_application_data:com.apple.dock:Forced:0:mcx_preference_settings:MCXDockSpecialFolders-Raw:0" "/Library/Preferences/OpenDirectory/Configurations/Active Directory/${GLB_sv_ADDomainNameFlat}.plist"
  fi
  ;;

Sys-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
