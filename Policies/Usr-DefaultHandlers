#!/bin/bash
#
# Short:    Usr Policy script - Sets the default handlers for specific file types
# Author:   Mark J Swift
# Version:  2.0.10
# Modified: 12-Jun-2017
#
# This policy uses duti to set the default handler types.
# I am uncertain as to whether it would be best to have this run as root (for all users?)
# or to keep it user specific. 
# Setting handlers for public.html and https:// sometimes fails with error -54 when 
# running as a normal user (I don't know why).
#
# Reference: http://duti.org - duti, set the default handlers
#
# Triggered by the following events:
#   Usr-AtDesktop (as user)
#
# Called as follows:    
#   Usr-DefaultHandlers <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.10"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by user policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are root
if [ "${GLB_sv_ThisUserName}" = "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# Exit if no-one is logged in
if test -z "${GLB_sv_LoggedInUserName}"
then
  GLB_nf_QuickExit "Policy aborted - No-one is logged in."
fi
   
# ---

# Exit if duti (see http://duti.org) is not installed
if ! test -e "${GLB_sv_BinDirPath}"/duti
then
  GLB_nf_QuickExit "Policy aborted - duti (see http://duti.org) is not installed."
fi

# ---

case ${sv_EventName} in
    
Usr-AtDesktop|Usr-PolicyInstall)
  # Set default handlers
  iv_ObjectCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Handler")"

  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ReqdBundleID="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Handler:${iv_LoopCount}:BundleID")"
    if test -n "${sv_ReqdBundleID}"
    then
      sv_ReqdUTI="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Handler:${iv_LoopCount}:UTI")"
      if test -n "${sv_ReqdBundleID}"
      then
        bv_LogIsActive=${GLB_bv_LogIsActive}
        GLB_bv_LogIsActive="false"
        sv_ReqdRole="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:Handler:${iv_LoopCount}:Role")"
        GLB_bv_LogIsActive=${bv_LogIsActive}
        if test -n "${sv_ReqdRole}"
        then
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Running duti -s ${sv_ReqdBundleID} ${sv_ReqdUTI} ${sv_ReqdRole}"
          "${GLB_sv_BinDirPath}"/duti -s "${sv_ReqdBundleID}" "${sv_ReqdUTI}" "${sv_ReqdRole}"
        else
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Running duti -s ${sv_ReqdBundleID} ${sv_ReqdUTI}"
          "${GLB_sv_BinDirPath}"/duti -s "${sv_ReqdBundleID}" "${sv_ReqdUTI}"
        fi
      fi
    fi
  done
  ;;

Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
