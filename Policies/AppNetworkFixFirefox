#!/bin/bash
#
# Short:    Policy script - Fix Firefox to work when the user home is on the Network
# Author:   Mark J Swift
# Version:  1.0.98
# Modified: 11-Oct-2016
#
# Triggered by the following events:
#   AppWillLaunch   (as user)
#   AppDidTerminate (as user)
#
# Called as follows:    
#   AppNetworkFixFirefox <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.98"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
# Note, older applications may return "(null)"
sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

# Note, we are only interested in "org.mozilla.firefox"
if [ "${sv_ThisAppBundleIdentifier}" != "org.mozilla.firefox" ]
then
  exit 0
fi

# Get notification e.g. WillLaunch, DidLaunch or DidTerminate
sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

# Get Date/Time Epoch of the notification
iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

# Get ApplicationName e.g. TextEdit
sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

# Get ApplicationPath e.g. /Applications/TextEdit.app
sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

# Get ApplicationProcessIdentifier - i.e. the process ID
sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

case ${sv_EventName} in
    
AppWillLaunch)  
  if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "true" ]
  then
    # The user home is on the local drive
    LW_nf_QuickExit "NOTE, policy aborted: Home folder is on the local drive."
    
  else
    sv_FfoxLinksDirPath="${LW_sv_ThisUserTempDirPath}/${sv_ThisAppBundleIdentifier}/Links"
    if test -d "${sv_FfoxLinksDirPath}"
    then
      LW_nf_QuickExit "NOTE, policy aborted: No need to fix, as fix is already in place."

    else
      LW_nf_logmessage "ATTENTION, implementing Fix for Firefox network profiles."

      # Quit Firefox
      kill ${sv_ThisAppProcessID}

      # Create Firefox folder if necessary
      sv_FfoxConfigDirPath="${LW_sv_LoggedInUserHomeDirPath}/Library/Application Support/Firefox"
      mkdir -p "${sv_FfoxConfigDirPath}"

      # Get the current profile folder (if any)
      sv_FfoxProfile=""
      if test -f "${sv_FfoxConfigDirPath}/profiles.ini"
      then
        sv_FfoxProfile=$(cat "${sv_FfoxConfigDirPath}/profiles.ini" | grep "Path=" | cut -d"=" -f2)
      fi

      # If profile doesnt exist, then Firefox has never been set up
      if [ -z "${sv_FfoxProfile}" ] || [ -f "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/prefs.js" ]
      then
        # Set up Firefox for the first time
        sv_FfoxProfile="Profiles/mozilla.default"
        mkdir -p "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}"

        cat << ENDFFOXPFL > "${sv_FfoxConfigDirPath}/profiles.ini"
[General]
StartWithLastProfile=1

[Profile0]
Name=default
IsRelative=1
Path=${sv_FfoxProfile}
ENDFFOXPFL

        cat << ENDFFOXPRF > "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/prefs.js"
# Mozilla User Preferences
user_pref("browser.shell.checkDefaultBrowser", false);
ENDFFOXPRF

      fi

      mkdir -p "${sv_FfoxLinksDirPath}"
      ln -sf "${sv_FfoxLinksDirPath}/places.sqlite-shm" "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/places.sqlite-shm"
      ln -sf "${sv_FfoxLinksDirPath}/webappsstore.sqlite-shm" "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/webappsstore.sqlite-shm"
      ln -sf "${sv_FfoxLinksDirPath}/cookies.sqlite-shm" "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/cookies.sqlite-shm"
    
      # Re-launch Firefox
      /usr/bin/open -b "org.mozilla.firefox"
    fi
  fi
  ;;

AppDidTerminate)
  if [ "${LW_bv_LoggedInUserHomeIsLocal}" = "true" ]
  then
    # The user home is on the local drive
    LW_nf_QuickExit "NOTE, policy aborted: Home folder is on the local drive."
          
  else
    sv_FfoxLinksDirPath="${LW_sv_ThisUserTempDirPath}/${sv_ThisAppBundleIdentifier}/Links"
    if ! test -d "${sv_FfoxLinksDirPath}"
    then
      LW_nf_QuickExit "NOTE, policy aborted: No need to remove fix, as fix is not in place."

    else
      LW_nf_logmessage "ATTENTION, removing Fix for Firefox network profiles."

      # If user home is on a network drive, undo any links we might have created
      sv_FfoxConfigDirPath="${LW_sv_LoggedInUserHomeDirPath}/Library/Application Support/Firefox"
      
      # Get the current profile folder (if any)
      sv_FfoxProfile=""
      if test -f "${sv_FfoxConfigDirPath}/profiles.ini"
      then
        sv_FfoxProfile=$(cat "${sv_FfoxConfigDirPath}/profiles.ini" | grep "Path=" | cut -d"=" -f2)
      fi

      # Check the profile exists
      if test -n "${sv_FfoxProfile}"
      then
        # If these files are links, then delete
        if test -L "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/places.sqlite-shm"
        then
          rm -f "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/places.sqlite-shm"
        fi
        if test -L "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/webappsstore.sqlite-shm"
        then
          rm -f "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/webappsstore.sqlite-shm"
        fi
        if test -L "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/cookies.sqlite-shm"
        then
          rm -f "${sv_FfoxConfigDirPath}/${sv_FfoxProfile}/cookies.sqlite-shm"
        fi
      fi
    fi
  fi
  ;;

*)
  LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
