#!/bin/bash
#
# Short:    Policy script - Run a system Update
# Author:   Mark J Swift
# Version:  1.0.101
# Modified: 09-Dec-2016
#
# Triggered by the following events:
#   ManualUpdate    (as root)
#   LoginWindowIdle (as root)
#
# Called as follows:    
#   SystemUpdate <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>
# 

# ---

sv_CodeVersion="1.0.101"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

Nf_DoUpdate()
{
  local iv_UpdateArgCount
  local sv_UpdateExeURI
  local sv_UpdateExeFilePath
  local iv_UpdateArgIndex
  
  if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
  then
    LW_nf_logmessage "ATTENTION, update aborted - not on ${LW_sv_ADDomainNameFlat} network"
  
  else
    iv_UpdateArgCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Script:Exe")"
    if [ ${iv_UpdateArgCount} -eq 0 ]
    then
      LW_nf_logmessage "ATTENTION, there are no defined update arguments."

    else
      sv_UpdateExeURI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Script:Exe:0")"
      if test -n "${sv_UpdateExeURI}"
      then
        sv_UpdateExeFilePath=$(LW_sf_ResolveFilename "${sv_UpdateExeURI}")
        if ! test -e "${sv_UpdateExeFilePath}"
        then
          # Its possible that we are assuming the lib directory
          sv_UpdateExeFilePath="/usr/local/LabWarden/lib/${sv_UpdateExeURI}"
        fi

        if ! test -e "${sv_UpdateExeFilePath}"
        then
          LW_nf_logmessage "ATTENTION, update script does not exist (${sv_UpdateExeFilePath})"

        else
          if ! test -x "${sv_UpdateExeFilePath}"
          then
            chown root:wheel "${sv_UpdateExeFilePath}"
            chmod u+x "${sv_UpdateExeFilePath}"
          fi
          for (( iv_UpdateArgIndex=1; iv_UpdateArgIndex<${iv_UpdateArgCount}; iv_UpdateArgIndex++ ))
          do
            sv_UpdateExeFilePath="${sv_UpdateExeFilePath} '""$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Script:Exe:${iv_UpdateArgIndex}")""'"
          done

          # Do a software update
          LW_nf_logmessage "ATTENTION, updating workstation software (${sv_UpdateExeFilePath})"
          eval "${sv_UpdateExeFilePath}"

        fi
      fi
    fi

    # Do a full group policy update
    LW_nf_logmessage "ATTENTION, updating group policies (via gpupdate)."
    /usr/local/LabWarden/util/gpupdate "-force"

    LW_nf_logmessage "NOTE, ideally we should reboot now"
  
  fi
}

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

case ${sv_EventName} in
    
ManualUpdate)
  # Manual update requested via /usr/local/LabWarden/util/Update
  LW_nf_logmessage "NOTE, running a manual Update."
  
  # Perform a workstation update (software and group policies)
  Nf_DoUpdate
  ;;
  
LoginWindowIdle)
  iv_IdleSecs=$(LW_if_SystemIdleSecs)
  LW_nf_logmessage "NOTE, workstation Idle for ${iv_IdleSecs} secs"

  iv_LoginWindowIdleShutdownSecs=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:LoginWindowIdleShutdownSecs")
  if test -z "${iv_LoginWindowIdleShutdownSecs}"
  then
    iv_LoginWindowIdleShutdownSecs=0
  fi

  iv_NextUpdateEpoch=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:GlobalPrefs:NextUpdateEpoch")
  if test -z "${iv_NextUpdateEpoch}"
  then
    iv_NextUpdateEpoch=0
  fi

  if [ ${LW_iv_ThisScriptStartEpoch} -lt ${iv_NextUpdateEpoch} ]
  then
    LW_nf_logmessage "NOTE, Next update time not yet reached $(date -r ${iv_NextUpdateEpoch} "+%Y%m%d-%H:%M.%S")"

  else
    iv_CurrOutOfHoursStartTime=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:OutOfHoursStartTime" | grep -E "^[0-9]{1,2}:[0-9]{2}$")
    if test -n "${iv_CurrOutOfHoursStartTime}"
    then
      # Get update start time before now
      iv_CurrOutOfHoursStartHour=$(echo "${iv_CurrOutOfHoursStartTime}" | cut -d":" -f1)
      iv_CurrOutOfHoursStartMinute=$(echo "${iv_CurrOutOfHoursStartTime}" | cut -d":" -f2)
      iv_CurrOutOfHoursStartEpoch=$(date -r ${LW_iv_ThisScriptStartEpoch} -v${iv_CurrOutOfHoursStartHour}H -v${iv_CurrOutOfHoursStartMinute}M -v0S "+%s")

      if [ ${LW_iv_ThisScriptStartEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
      then
        iv_CurrOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v-1d "+%s")
      fi

      iv_CurrOutOfHoursEndTime=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:OutOfHoursEndTime" | grep -E "^[0-9]{1,2}:[0-9]{2}$")
      if test -n "${iv_CurrOutOfHoursEndTime}"
      then
        iv_CurrOutOfHoursEndHour=$(echo "${iv_CurrOutOfHoursEndTime}" | cut -d":" -f1)
        iv_CurrOutOfHoursEndMinute=$(echo "${iv_CurrOutOfHoursEndTime}" | cut -d":" -f2)
        iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v${iv_CurrOutOfHoursEndHour}H -v${iv_CurrOutOfHoursEndMinute}M -v0S "+%s")

        if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
        then
          iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
        fi
      fi
    fi

    # Adjust end to allow at least one LoginWindowPoll to happen - if an update is scheduled at the end of the out-of-hours period
    iv_CurrOutOfHoursEndEpoch=$((${iv_CurrOutOfHoursEndEpoch}-${LW_iv_LoginWindowPollTriggerSecs}*2))
    if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
    then
      # The period is clearly not long enough
      iv_CurrOutOfHoursEndEpoch=""
    fi

    bv_DoUpdate="false"
    
    if test -z "${iv_CurrOutOfHoursEndEpoch}"
    then
      LW_nf_logmessage "ATTENTION, Out of hours slot is undefined or invalid"
      if [ ${iv_LoginWindowIdleShutdownSecs} -gt 0 ]
      then
        if [ ${iv_IdleSecs} -gt ${iv_LoginWindowIdleShutdownSecs} ]
        then
          # Update if we are about to do an idle Shutdown
          LW_nf_logmessage "ATTENTION, Updating before an idle shutdown"
          bv_DoUpdate="true"
        fi
      fi
      
    else
      # -- work out a good random-ish time to power on for the next Update
      iv_NextOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v+1d "+%s")
      iv_NextOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
      iv_NextOutOfHoursUpdateEpoch=$(jot -r 1 ${iv_NextOutOfHoursStartEpoch} ${iv_NextOutOfHoursEndEpoch})
      
      bv_OutOfHoursPowerOn=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:OutOfHoursPowerOn")
      if [ "${bv_OutOfHoursPowerOn}" = "true" ]
      then
        LW_nf_logmessage "NOTE, Scheduled PowerOn $(date -r ${iv_NextOutOfHoursUpdateEpoch} "+%Y%m%d-%H:%M.%S")"
        LW_nf_schedule4epoch "${LW_sv_ThisScriptFileName}" "poweron" ${iv_NextOutOfHoursUpdateEpoch}
        
        if [ ${LW_iv_ThisScriptStartEpoch} -lt ${iv_CurrOutOfHoursEndEpoch} ]
        then
          # Do an update
          LW_nf_logmessage "NOTE, Performing an out-of-hours update"
          bv_DoUpdate="true"
        fi
      
      else
        LW_nf_logmessage "ATTENTION, Updates aren't scheduled"
        if [ ${iv_LoginWindowIdleShutdownSecs} -gt 0 ]
        then
          if [ ${iv_IdleSecs} -gt ${iv_LoginWindowIdleShutdownSecs} ]
          then
            # Shutdown if the workstation has been idle
            LW_nf_logmessage "ATTENTION, Updating before an idle shutdown"
            bv_DoUpdate="true"
          fi
        fi
        
      fi
    fi
    
    if [ "${bv_DoUpdate}" != "true" ]
    then
      if [ ${iv_NextUpdateEpoch} = 0 ]
      then
        LW_nf_logmessage "ATTENTION, Updating for the first time"
        bv_DoUpdate="true"
      fi
    fi
    
    if [ "${bv_DoUpdate}" = "true" ]
    then
      Nf_DoUpdate
      
      # If no next update can be determined, assume it's OK sometime after 4:00am
      if test -z "${iv_NextOutOfHoursUpdateEpoch}"
      then
        iv_NextOutOfHoursUpdateEpoch=$(date -r ${LW_iv_ThisScriptStartEpoch} -v4H -v0M -v0S "+%s")
        if [ ${iv_NextOutOfHoursUpdateEpoch} -lt ${LW_iv_ThisScriptStartEpoch} ]
        then
          iv_NextOutOfHoursUpdateEpoch=$(date -r ${iv_NextOutOfHoursUpdateEpoch} -v+1d "+%s")
        fi
      fi
          
      LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_PolicyName}:GlobalPrefs:NextUpdateEpoch" "${iv_NextOutOfHoursUpdateEpoch}"
      LW_nf_logmessage "NOTE, Next update will likely be $(date -r ${iv_NextOutOfHoursUpdateEpoch} "+%Y%m%d-%H:%M.%S")"

      LW_nf_RestartNow "ATTENTION, Update complete - restarting"
    fi
    
  fi

  
  if [ ${iv_LoginWindowIdleShutdownSecs} -gt 0 ]
  then
    if [ ${iv_IdleSecs} -gt ${iv_LoginWindowIdleShutdownSecs} ]
    then
      # Shutdown if the workstation has been idle
      LW_nf_logmessage "ATTENTION, Updating group policies before an idle shutdown"
      /usr/local/LabWarden/util/gpupdate "-force"
    fi
    if [ ${iv_IdleSecs} -gt ${iv_LoginWindowIdleShutdownSecs} ]
    then
      # Shutdown if the workstation is still idle
      LW_nf_ShutdownNow "ATTENTION, workstation has been idle too long - we should shutdown"
    fi
  fi
  ;;
  
*)
  LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
