#!/bin/bash
#
# Short:    Policy script - Set system sleep options
# Author:   Mark J Swift
# Version:  1.0.92
# Modified: 21-Jul-2016
#
# Triggered by the following events:
#   LoginWindow (as root)
#   LoginBegin  (as root)
#
# Called as follows:    
#   SystemSleepSettings <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="1.0.92"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
LW_sv_LoggedInUserName="${3}"

# Get optional parameter
sv_OptionalParam="${4}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

Nf_SetSystemSleepSettings() # Trigger
{
  local sv_Trigger
  local iv_PowerSystemSleepSecs
  local iv_PowerDisplaySleepSecs
  local iv_PowerDiskSleepSecs
  local iv_BatterySystemSleepSecs
  local iv_BatteryDisplaySleepSecs
  local iv_BatteryDiskSleepSecs
  
  sv_Trigger="${1}"

  # Turn logging off
  LW_bv_LogIsActiveStatus="false"

  iv_PowerSystemSleepSecs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:${sv_Trigger}:Power:SystemSleep")"
  if test -n "${iv_PowerSystemSleepSecs}"
  then
    /usr/bin/pmset -a sleep "${iv_PowerSystemSleepSecs}"
  fi
  
  iv_PowerDisplaySleepSecs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:${sv_Trigger}:Power:DisplaySleep")"
  if test -n "${iv_PowerDisplaySleepSecs}"
  then
    /usr/bin/pmset -a displaysleep "${iv_PowerDisplaySleepSecs}"
  fi
  
  iv_PowerDiskSleepSecs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:${sv_Trigger}:Power:DiskSleep")"
  if test -n "${iv_PowerDiskSleepSecs}"
  then
    /usr/bin/pmset -a disksleep "${iv_PowerDiskSleepSecs}"
  fi
  
  iv_BatterySystemSleepSecs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:${sv_Trigger}:Battery:SystemSleep")"
  if test -n "${iv_BatterySystemSleepSecs}"
  then
    /usr/bin/pmset -b sleep "${iv_BatterySystemSleepSecs}"
  fi
  
  iv_BatteryDisplaySleepSecs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:${sv_Trigger}:Battery:DisplaySleep")"
  if test -n "${iv_BatteryDisplaySleepSecs}"
  then
    /usr/bin/pmset -b displaysleep "${iv_BatteryDisplaySleepSecs}"
  fi
  
  iv_BatteryDiskSleepSecs="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:${sv_Trigger}:Battery:DiskSleep")"
  if test -n "${iv_BatteryDiskSleepSecs}"
  then
    /usr/bin/pmset -b disksleep "${iv_BatteryDiskSleepSecs}"
  fi
  
  /usr/bin/pmset -a autorestart 1 womp 1

  # Turn logging on
  LW_bv_LogIsActiveStatus=${LW_bv_LogIsActiveDefault}

  if test -n "${iv_PowerSystemSleepSecs}${iv_PowerDisplaySleepSecs}${iv_PowerDiskSleepSecs}${iv_BatterySystemSleepSecs}${iv_BatteryDisplaySleepSecs}${iv_BatteryDiskSleepSecs}"
  then
    LW_nf_logmessage "ATTENTION, setting sleep settings for ${sv_EventName}"
    
  else
    LW_nf_QuickExit "NOTE, policy aborted: There are no sleep options defined."
    
  fi
}

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "NOTE, policy aborted: User '${LW_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  
else
  Nf_SetSystemSleepSettings "${sv_EventName}"

fi

# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
