#!/bin/bash
#
# Short:    Policy script - Set system sleep options
# Author:   Mark J Swift
# Version:  1.0.82
# Modified: 27-May-2016
#
# Triggered by the following events:
#   LoginWindow (as root)
#   LoginBegin  (as root)
#
# Called as follows:    
#   SystemSleepSettings <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

LCL_ScriptVersion="1.0.82"

if [ $# -eq 0 ]
then
  echo "${LCL_ScriptVersion}"
  exit 0
fi

# ---

# Take a note when this script started
LCL_MyStartEpoch=$(date -u "+%s")

# Get the config directory
LCL_ConfigDir="${1}"
if test -z "${LCL_ConfigDir}"
then
  # We need something to work with
  exit 0
fi

# Get event History
LCL_EventHistory="${2}"

# Get event that triggered this policy
LCL_EventName="$(echo ${LCL_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${LCL_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
GLB_LoggedInUserName="${3}"

# Get optional parameter
LCL_OptionalParam="${4}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Filename of this script)
LCL_PolicyName="${GLB_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
f_logmessage "NOTE, policy triggered: '${LCL_PolicyName}' ${LCL_OptionalParam} triggered by event '${LCL_EventHistory}' as user '${GLB_ThisUserName}' "

f_SetSystemSleepSettings() # Trigger
{
  local LCL_Trigger
  local LCL_SystemSleep
  local LCL_DisplaySleep
  local LCL_DiskSleep
  local LCL_SystemSleepBatt
  local LCL_DisplaySleepBatt
  local LCL_DiskSleepBatt
  
  LCL_Trigger="${1}"

  # Turn logging off
  GLB_LoggingStatus="off"

  LCL_SystemSleep="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:${LCL_Trigger}:Power:SystemSleep")"
  if test -n "${LCL_SystemSleep}"
  then
    /usr/bin/pmset -a sleep "${LCL_SystemSleep}"
  fi
  
  LCL_DisplaySleep="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:${LCL_Trigger}:Power:DisplaySleep")"
  if test -n "${LCL_DisplaySleep}"
  then
    /usr/bin/pmset -a displaysleep "${LCL_DisplaySleep}"
  fi
  
  LCL_DiskSleep="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:${LCL_Trigger}:Power:DiskSleep")"
  if test -n "${LCL_DiskSleep}"
  then
    /usr/bin/pmset -a disksleep "${LCL_DiskSleep}"
  fi
  
  LCL_SystemSleepBatt="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:${LCL_Trigger}:Battery:SystemSleep")"
  if test -n "${LCL_SystemSleepBatt}"
  then
    /usr/bin/pmset -b sleep "${LCL_SystemSleepBatt}"
  fi
  
  LCL_DisplaySleepBatt="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:${LCL_Trigger}:Battery:DisplaySleep")"
  if test -n "${LCL_DisplaySleepBatt}"
  then
    /usr/bin/pmset -b displaysleep "${LCL_DisplaySleepBatt}"
  fi
  
  LCL_DiskSleepBatt="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:${LCL_Trigger}:Battery:DiskSleep")"
  if test -n "${LCL_DiskSleepBatt}"
  then
    /usr/bin/pmset -b disksleep "${LCL_DiskSleepBatt}"
  fi
  
  /usr/bin/pmset -a autorestart 1 womp 1

  # Turn logging on
  GLB_LoggingStatus=${GLB_LoggingDefault}

  if test -n "${LCL_SystemSleep}${LCL_DisplaySleep}${LCL_DiskSleep}${LCL_SystemSleepBatt}${LCL_DisplaySleepBatt}${LCL_DiskSleepBatt}"
  then
    f_logmessage "ATTENTION, setting sleep settings for ${LCL_EventName}"
    
  else
    f_QuickExit "NOTE, policy aborted: There are no sleep options defined."
    
  fi
}

# Take a note of the Policy call
f_logmessage "NOTE, policy triggered: '${LCL_PolicyName}' ${LCL_OptionalParam} triggered by event '${LCL_EventHistory}' as user '${GLB_ThisUserName}' "

if [ "${GLB_ThisUserName}" != "root" ]
then
  f_QuickExit "NOTE, policy aborted: User '${GLB_ThisUserName}' is not supported by policy '${LCL_PolicyName}'"
  
else
  f_SetSystemSleepSettings "${LCL_EventName}"

fi

# Trigger an event
f_TriggerEvent "${LCL_EventHistory}" "${LCL_PolicyName}" "${LCL_OptionalParam}"

# Remove temporary files
rm -fR "${GLB_ThisScriptTempDir}"

# ---
