#!/bin/bash
#
# Short:    Policy script - Give certain processes access through proxy using workstation credentials
# Author:   Mark J Swift
# Version:  1.0.98
# Modified: 11-Oct-2016
#
# Triggered by the following events:
#   Boot (as root)
#
# Called as follows:    
#   SystemGiveSystemProxyAccess <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>

# ---

sv_CodeVersion="1.0.98"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

Nf_SystemProxyAccess() # protocol (eg 'http' 'htps' 'ftp') server (eg bisproxy1.lits.blackpool.ac.uk) port (eg 8080) appPath (eg /usr/sbin/ocspd)
{
  local iv_ProxyPort
  local sv_AllowAccessDirPathList
  local sv_Label
  local sv_ProxyProtocol
  local sv_ProxyServer
  local sv_Toption

  sv_ProxyProtocol="${1}"
  sv_ProxyServer="${2}"
  iv_ProxyPort="${3}"
  sv_AllowAccessDirPathList="${4}"
  
  LW_nf_logmessage "NOTE, allowing ${sv_AllowAccessDirPathList} through ${sv_ProxyProtocol}://${sv_ProxyServer}:${iv_ProxyPort}."

  sv_Toption="$(echo "${sv_AllowAccessDirPathList}" | sed "s|^|-T '|;s|$|'|;s|,|' -T '|g")"
  
  sv_Label="${sv_ProxyProtocol}_${sv_ProxyServer}_${iv_ProxyPort}"

  # Just a little trick to expand the sv_Toption variable, but keep the password quoted (eval wouldnt do)
  /usr/bin/su root <<HEREDOC

  security delete-internet-password -l "${sv_Label}" /Library/Keychains/System.keychain

  security add-internet-password -U -a "${LW_sv_ADTrustAccount}" -w "${LW_sv_ADTrustPassword}" -l "${sv_Label}" -P "${iv_ProxyPort}" -r "${sv_ProxyProtocol}" -s "${sv_ProxyServer}" ${sv_Toption} /Library/Keychains/System.keychain

HEREDOC
}

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "NOTE, policy aborted: User '${LW_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  
else    
  bv_PolicyExecuted="false"

  # Give certain processes access to through proxy using workstation credentials
  iv_ProxyCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Proxy")"
  for (( iv_LoopCount1=0; iv_LoopCount1<${iv_ProxyCount}; iv_LoopCount1++ ))
  do
    sv_ProxyProtocol="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:ProxyProtocol")"
    if test -n "${sv_ProxyProtocol}"
    then
      sv_ProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:ProxyAddress")"
      if test -n "${sv_ProxyServer}"
      then
        iv_ProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:ProxyPort")"
        if test -n "${iv_ProxyPort}"
        then
          sv_ProcessList=""
      
          iv_ProcessCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Process")"
          for (( iv_LoopCount2=0; iv_LoopCount2<${iv_ProcessCount}; iv_LoopCount2++ ))
          do
            sv_ProcessName="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Proxy:${iv_LoopCount1}:Process:${iv_LoopCount2}")"
            if test -n "${sv_ProcessName}"
            then
              if test -n "${sv_ProcessList}"
              then
                sv_ProcessList="${sv_ProcessList},"
              fi
              sv_ProcessList="${sv_ProcessList}${sv_ProcessName}"
            fi
          done

          if test -n "${sv_ProcessList}"
          then
            Nf_SystemProxyAccess "${sv_ProxyProtocol}" "${sv_ProxyServer}" "${iv_ProxyPort}" "${sv_ProcessList}"
            bv_PolicyExecuted="true"
          fi
      
        fi
      fi
    fi
  done

  if [ "${bv_PolicyExecuted}" = "true" ]
  then
    LW_nf_logmessage "ATTENTION, system proxy access configured."
  
  else
    LW_nf_QuickExit "NOTE, policy aborted: "
    
  fi

fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
