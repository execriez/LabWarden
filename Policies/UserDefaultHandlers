#!/bin/bash
#
# Short:    Policy script - Set default file type handlers for user
# Author:   Mark J Swift
# Version:  1.0.82
# Modified: 27-May-2016
#
# Triggered by the following events:
#   UserAtDesktop (as user)
#
# Called as follows:    
#   UserDefaultHandlers <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>
#
# I am uncertain as to whether it would be best to have this run as root (for all users)
# or to keep it user specific. 
# Setting handlers for public.html and https:// sometimes fails with error -54 when 
# running as a normal user (I don't know why).

# ---

LCL_ScriptVersion="1.0.82"

if [ $# -eq 0 ]
then
  echo "${LCL_ScriptVersion}"
  exit 0
fi

# ---

# Take a note when this script started
LCL_MyStartEpoch=$(date -u "+%s")

# Get the config directory
LCL_ConfigDir="${1}"
if test -z "${LCL_ConfigDir}"
then
  # We need something to work with
  exit 0
fi

# Get event History
LCL_EventHistory="${2}"

# Get event that triggered this policy
LCL_EventName="$(echo ${LCL_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${LCL_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
GLB_LoggedInUserName="${3}"

# Get optional parameter
LCL_OptionalParam="${4}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Filename of this script)
LCL_PolicyName="${GLB_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
f_logmessage "NOTE, policy triggered: '${LCL_PolicyName}' ${LCL_OptionalParam} triggered by event '${LCL_EventHistory}' as user '${GLB_ThisUserName}' "

if test -z "${GLB_LoggedInUserName}"
then
  f_QuickExit "NOTE, policy aborted: No-one is logged in."
  
else    

  # REF: http://duti.org - duti, set the default handlers
  if test -e "${GLB_BinDir}"/duti
  then
    f_logmessage "ATTENTION, setting default handlers."
  
    # Set default handlers
    LCL_ObjectCount="$(f_GetPlistArraySize "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:Handler")"

    for (( LCL_i=0; LCL_i<${LCL_ObjectCount}; LCL_i++ ))
    do
      LCL_ReqdBundleID="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:Handler:${LCL_i}:BundleID")"
      if test -n "${LCL_ReqdBundleID}"
      then
        LCL_ReqdUTI="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:Handler:${LCL_i}:UTI")"
        if test -n "${LCL_ReqdBundleID}"
        then
          GLB_LoggingStatus="off"
          LCL_ReqdRole="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:Handler:${LCL_i}:Role")"
          GLB_LoggingStatus=${GLB_LoggingDefault}
          if test -n "${LCL_ReqdRole}"
          then
            "${GLB_BinDir}"/duti -s "${LCL_ReqdBundleID}" "${LCL_ReqdUTI}" "${LCL_ReqdRole}"
          else
            "${GLB_BinDir}"/duti -s "${LCL_ReqdBundleID}" "${LCL_ReqdUTI}"
          fi
        fi
      fi
    done
  fi
  
fi
  
# Trigger an event
f_TriggerEvent "${LCL_EventHistory}" "${LCL_PolicyName}" "${LCL_OptionalParam}"

# Remove temporary files
rm -fR "${GLB_ThisScriptTempDir}"

# ---
