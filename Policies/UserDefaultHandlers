#!/bin/bash
#
# Short:    Policy script - Set default file type handlers for user
# Author:   Mark J Swift
# Version:  1.0.100
# Modified: 27-Oct-2016
#
# Triggered by the following events:
#   UserAtDesktop (as user)
#
# Called as follows:    
#   UserDefaultHandlers <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>
#
# I am uncertain as to whether it would be best to have this run as root (for all users)
# or to keep it user specific. 
# Setting handlers for public.html and https:// sometimes fails with error -54 when 
# running as a normal user (I don't know why).

# ---

sv_CodeVersion="1.0.100"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if test -z "${LW_sv_LoggedInUserName}"
then
  LW_nf_QuickExit "NOTE, policy aborted: No-one is logged in."
  
else    

  # REF: http://duti.org - duti, set the default handlers
  if test -e "${LW_sv_BinDirPath}"/duti
  then
    LW_nf_logmessage "ATTENTION, setting default handlers."
  
    # Set default handlers
    iv_ObjectCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Handler")"

    for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
    do
      sv_ReqdBundleID="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Handler:${iv_LoopCount}:BundleID")"
      if test -n "${sv_ReqdBundleID}"
      then
        sv_ReqdUTI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Handler:${iv_LoopCount}:UTI")"
        if test -n "${sv_ReqdBundleID}"
        then
          LW_bv_LogIsActiveStatus="false"
          sv_ReqdRole="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:Handler:${iv_LoopCount}:Role")"
          LW_bv_LogIsActiveStatus=${LW_bv_LogIsActiveDefault}
          if test -n "${sv_ReqdRole}"
          then
            "${LW_sv_BinDirPath}"/duti -s "${sv_ReqdBundleID}" "${sv_ReqdUTI}" "${sv_ReqdRole}"
          else
            "${LW_sv_BinDirPath}"/duti -s "${sv_ReqdBundleID}" "${sv_ReqdUTI}"
          fi
        fi
      fi
    done
  fi
  
fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
