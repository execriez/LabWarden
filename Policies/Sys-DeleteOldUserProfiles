#!/bin/bash
#
# Short:    Policy script - Deletes outdated user profiles
# Author:   Mark J Swift
# Version:  2.0.12
# Modified: 27-Jun-2017
#
# Triggered by the following events:
#   Sys-Boot (as root)
#
# Called as follows:    
#   Sys-DeleteOldUserProfiles <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.12"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

Sys-ConsoleUserLoggedIn|Sys-ConsoleUserLoggedOut|Sys-ConsoleUserSwitch|Sys-Login|Sys-Logout)
  GLB_sv_LoggedInUserName="${sv_OptionalParam}"
  ;;
  
esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Usr-PolicyInstall & Usr-PolicyUninstall events (which are called as a normal user) are ignored by system policies

if [ "${sv_EventName}" = "Usr-PolicyInstall" ] || [ "${sv_EventName}" = "Usr-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# Exit if we are not root
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_QuickExit "Policy aborted - User '${GLB_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
fi

# ---

case ${sv_EventName} in
    
Sys-Boot)
  # Get the min disk space allowed before user folders are considered for deletion
  iv_MinDiskSpaceMegs="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:MinDiskSpaceMegs")"

  if test -z "${iv_UserCacheEarliestEpoch}"
  then
    iv_MinDiskSpaceMegs=2048
  fi
  
  # Get the age in days before which user folders that are never deleted
  iv_LoginMinAgeDays="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:LoginMinAgeDays")"
  
  if test -z "${iv_LoginMinAgeDays}"
  then
    iv_LoginMinAgeDays=8
  fi
  
  # Get the days allowable between logins before profiles are deleted
  iv_LoginMaxAgeDays="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:LoginMaxAgeDays")"
  
  if test -z "${iv_LoginMaxAgeDays}"
  then
    iv_LoginMaxAgeDays=62
  fi
  
  # Get the earliest creation date/time allowable - cache files (in /private/var/folders) created earlier than this are deleted
  iv_UserCacheEarliestEpoch="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:UserCacheEarliestEpoch")"

  if test -z "${iv_UserCacheEarliestEpoch}"
  then
    iv_UserCacheEarliestEpoch=0
  fi
  
  while read sv_FolderDirPath
  do
    if test -d "${sv_FolderDirPath}"
    then
      GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Found user home for '${sv_FolderDirPath}'."
    
      sv_UserName="$(stat -f "%Su" "${sv_FolderDirPath}")"
      
      # Check if the user folder is potentially deletable (short-lived)
      
      # Check if user is a local account (returns "true" or "false")
      if [ "$(dseditgroup -o checkmember -m "${sv_UserName}" -n . localaccounts | cut -d" " -f1)" = "yes" ]
      then
        bv_UserIsLocal="true"
        bv_UserFolderIsShortLived="false"
    
      else
        bv_UserIsLocal="false"
    
        # Network user folders are temporary (unless mobile)
        sv_Attr="OriginalHomeDirectory";sv_Value="$(dscl 2>/dev/null localhost -read "/Local/Default/Users/${sv_UserName}" ${sv_Attr})";iv_Err=$?;sv_Value="$(echo "${sv_Value}" | sed "s|^[^:]*:${sv_Attr}:| ${sv_Attr}: |" | tr -d "\r" | tr "\n" "\r" | sed 's| '${sv_Attr}': |\
|'g | tail -n1 | tr "\r" "\n" | sed '/^\s*$/d')"
        if test -n "${sv_Value}"
        then
          bv_UserIsMobile="true"
          bv_UserFolderIsShortLived="false"
      
        else
          bv_UserIsMobile="false"
          bv_UserFolderIsShortLived="true"
      
        fi
      fi

      if [ "${bv_UserFolderIsShortLived}" = "false" ]
      then
        GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Skipping '${sv_FolderDirPath}', owner '${sv_UserName}' is local or mobile."
      
      else
        if test -e "${sv_FolderDirPath}/Library/Preferences/com.apple.finder.plist"
        then
          sv_ReasonToDelete=""
          
          iv_LastUseEpoch=$(stat -f "%m" "${sv_FolderDirPath}/Library/Preferences/com.apple.finder.plist")
          iv_AccountAgeSecs=$((${GLB_iv_ThisScriptStartEpoch}-${iv_LastUseEpoch}))
          iv_FreeMegs=$(df -hm / | awk 'NR==2 {print $4}')
          
          if [ ${iv_FreeMegs} -lt ${iv_MinDiskSpaceMegs} ]
          then
            if [ ${iv_AccountAgeSecs} -gt $((${iv_LoginMinAgeDays}*24*60*60)) ]
            then
              sv_ReasonToDelete="low disk space (${iv_FreeMegs} megs)."
            fi
          fi
          
          if [ ${iv_AccountAgeSecs} -gt $((${iv_LoginMaxAgeDays}*24*60*60)) ]
          then
            sv_ReasonToDelete="user hasn't logged on for more than ${iv_LoginMaxAgeDays} days."
          fi
          
          if test -n "${sv_ReasonToDelete}"
          then
            GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Deleting user home and user cache for '${sv_UserName}'; ${sv_ReasonToDelete}"
          
            # Delete the user folder
            rm -fR "${sv_FolderDirPath}"
          
            # Delete the user cache folders
            find /private/var/folders \( -depth 2 -prune \) -and -user "${sv_UserName}" -exec rm -fR "{}" \;
        
          else
            GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Skipping '${sv_FolderDirPath}'; no reason to delete."
      
          fi
          
        fi
      fi
      
      
      if test -n "${iv_UserCacheEarliestEpoch}"
      then
        while read sv_DelPath
        do
          iv_CreatedEpoch=$(stat -f "%c" "${sv_DelPath}")
          if [ ${iv_CreatedEpoch} -lt ${iv_UserCacheEarliestEpoch} ]
          then
            GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Deleting outdated user cache for '${sv_UserName}'"
            rm -fR "${sv_DelPath}"
          fi

        done < <(find /private/var/folders \( -depth 2 -prune \) -and \( -user "${sv_UserName}" \))
      fi
    
    fi
    
  done < <(find /Users -iregex "/Users/[^/]*/Library/Preferences/com.apple.finder.plist" | xargs -I{} stat -f "%m %N" "{}" | sort -n | cut -d" " -f2- | cut -d"/" -f 1-3)

  ;;

Sys-PolicyInstall|Sys-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#/usr/local/LabWarden/lib/Trigger "${sv_EventHistory}:${sv_PolicyName}" "$(whoami)" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
