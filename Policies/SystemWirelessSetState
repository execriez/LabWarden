#!/bin/bash
#
# Short:    Policy script - Turn wireless on or off
# Author:   Mark J Swift
# Version:  1.0.86
# Modified: 09-Jun-2016
#
# Triggered by the following events:
#   Boot (as root)
#
# Called as follows:    
#   SystemWirelessSetState <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

LCL_ScriptVersion="1.0.86"

if [ $# -eq 0 ]
then
  echo "${LCL_ScriptVersion}"
  exit 0
fi

# ---

# Take a note when this script started
LCL_MyStartEpoch=$(date -u "+%s")

# Get the config directory
LCL_ConfigDir="${1}"
if test -z "${LCL_ConfigDir}"
then
  # We need something to work with
  exit 0
fi

# Get event History
LCL_EventHistory="${2}"

# Get event that triggered this policy
LCL_EventName="$(echo ${LCL_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${LCL_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
GLB_LoggedInUserName="${3}"

# Get optional parameter
LCL_OptionalParam="${4}"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Filename of this script)
LCL_PolicyName="${GLB_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
f_logmessage "NOTE, policy triggered: '${LCL_PolicyName}' ${LCL_OptionalParam} triggered by event '${LCL_EventHistory}' as user '${GLB_ThisUserName}' "

if [ "${GLB_ThisUserName}" != "root" ]
then
  f_QuickExit "NOTE, policy aborted: User '${GLB_ThisUserName}' is not supported by policy '${LCL_PolicyName}'"
  
else
  LCL_PolicyExecuted="false"

  # Get the the hardware port for wireless (eg en1)
  LCL_WirelessHardwarePort="$(networksetup -listallhardwareports | tr "\n" ":" | sed "s|^[:]*||;s|::|;|g" | tr ";" "\n" | grep "Wi-Fi" | sed "s|\(.*Device:[ ]*\)\([^:]*\)\(.*\)|\2|")"
  
  if test -n "${LCL_WirelessHardwarePort}"
  then
    LCL_WirelessState="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:WirelessState")"

    if test -n "${LCL_WirelessState}"
    then
      LCL_PolicyExecuted="true"

      # Turn Wi-Fi port on or off
      networksetup -setairportpower ${LCL_WirelessHardwarePort} ${LCL_WirelessState}

      LCL_RequireAdminIBSS="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:RequireAdminIBSS")"
      if [ "${LCL_RequireAdminIBSS}" = "true" ]
      then
        LCL_RequireAdminIBSS="YES"
      else
        LCL_RequireAdminIBSS="NO"
      fi
      
      LCL_RequireAdminNetworkChange="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:RequireAdminNetworkChange")"
      if [ "${LCL_RequireAdminNetworkChange}" = "true" ]
      then
        LCL_RequireAdminNetworkChange="YES"
      else
        LCL_RequireAdminNetworkChange="NO"
      fi
      
      LCL_RequireAdminPowerToggle="$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":${LCL_PolicyName}:Config:RequireAdminPowerToggle")"
      if [ "${LCL_RequireAdminPowerToggle}" = "true" ]
      then
        LCL_RequireAdminPowerToggle="YES"
      else
        LCL_RequireAdminPowerToggle="NO"
      fi
      
      # Set the Wi-Fi options
      /usr/libexec/airportd prefs RequireAdminIBSS="${LCL_RequireAdminIBSS}" RequireAdminNetworkChange="${LCL_RequireAdminNetworkChange}" RequireAdminPowerToggle="${LCL_RequireAdminPowerToggle}"
    fi

    if [ "${LCL_PolicyExecuted}" = "true" ]
    then
      f_logmessage "ATTENTION, wireless state has been set."
  
    else
      f_QuickExit "NOTE, policy aborted: "
    
    fi
  
  fi

fi
  
# Trigger an event
f_TriggerEvent "${LCL_EventHistory}" "${LCL_PolicyName}" "${LCL_OptionalParam}"

# Remove temporary files
srm -fR "${GLB_ThisScriptTempDir}"

# ---
