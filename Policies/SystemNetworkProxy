#!/bin/bash
#
# Short:    Policy script - Set system Network Proxy options
# Author:   Mark J Swift
# Version:  1.0.90
# Modified: 01-Jul-2016
#
# Triggered by the following events:
#   NetworkUp     (as root)
#
# Called as follows:    
#   SystemNetworkProxy <ConfigDir> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="1.0.90"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get optional user
LW_sv_LoggedInUserName="${3}"

# Get optional parameter
sv_OptionalParam="${4}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  LW_nf_QuickExit "NOTE, policy aborted: User '${LW_sv_ThisUserName}' is not supported by policy '${sv_PolicyName}'"
  
else    
  if test -z "${LW_sv_NetworkServiceInterfaceName}"
  then
    # we need a network
    LW_nf_QuickExit "NOTE, policy aborted: no network"
    exit 0
  fi

  LW_nf_logmessage "NOTE, switching all proxy settings off for ${LW_sv_NetworkServiceInterfaceName}"
  /usr/sbin/networksetup -setproxyautodiscovery "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setautoproxystate "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setwebproxystate "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setsecurewebproxystate "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setftpproxystate "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setsocksfirewallproxystate "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setstreamingproxystate "${LW_sv_NetworkServiceInterfaceName}" off
  /usr/sbin/networksetup -setgopherproxystate "${LW_sv_NetworkServiceInterfaceName}" off

  if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
  then
    LW_nf_QuickExit "NOTE, policy aborted: not on ${LW_sv_ADDomainNameFlat} network"
    exit 0
  fi

  bv_ProxyAutoDiscoveryEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ProxyAutoDiscovery:Enabled")"
  if [ "${bv_ProxyAutoDiscoveryEnabled}" = "true" ]
  then
    LW_nf_logmessage "NOTE, switching on 'Auto Proxy Discovery'"
    /usr/sbin/networksetup -setproxyautodiscovery "${LW_sv_NetworkServiceInterfaceName}" on
  fi

  bv_AutoProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:AutoProxy:Enabled")"
  if [ "${bv_AutoProxyEnabled}" = "true" ]
  then
    sv_AutoProxyURL="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:AutoProxy:URL")"
    if test -n "${sv_AutoProxyURL}"
    then
      LW_nf_logmessage "NOTE, setting 'Automatic Proxy Configuration' to ${sv_AutoProxyURL}"
      /usr/sbin/networksetup -setautoproxyurl "${LW_sv_NetworkServiceInterfaceName}" "${sv_AutoProxyURL}"
      /usr/sbin/networksetup -setautoproxystate "${LW_sv_NetworkServiceInterfaceName}" on
    fi
  fi

  bv_WebProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:WebProxy:Enabled")"
  if [ "${bv_WebProxyEnabled}" = "true" ]
  then
    sv_WebProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:WebProxy:Address")"
    if test -n "${sv_WebProxyServer}"
    then
      iv_WebProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:WebProxy:Port")"
      if test -n "${iv_WebProxyPort}"
      then
        LW_nf_logmessage "NOTE, setting 'Web Proxy' to ${sv_WebProxyServer}:${iv_WebProxyPort}"
        /usr/sbin/networksetup -setwebproxy "${LW_sv_NetworkServiceInterfaceName}" "${sv_WebProxyServer}" "${iv_WebProxyPort}" off
        /usr/sbin/networksetup -setwebproxystate "${LW_sv_NetworkServiceInterfaceName}" on
      fi
    fi
  fi

  bv_SecureWebProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SecureWebProxy:Enabled")"
  if [ "${bv_SecureWebProxyEnabled}" = "true" ]
  then
    sv_SecureWebProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SecureWebProxy:Address")"
    if test -n "${sv_SecureWebProxyServer}"
    then
      iv_SecureWebProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SecureWebProxy:Port")"
      if test -n "${iv_SecureWebProxyPort}"
      then
        LW_nf_logmessage "NOTE, setting 'Secure Web Proxy' to ${sv_SecureWebProxyServer}:${iv_SecureWebProxyPort}"
        /usr/sbin/networksetup -setsecurewebproxy "${LW_sv_NetworkServiceInterfaceName}" "${sv_SecureWebProxyServer}" "${iv_SecureWebProxyPort}" off
        /usr/sbin/networksetup -setsecurewebproxystate "${LW_sv_NetworkServiceInterfaceName}" on
      fi
    fi
  fi

  bv_StreamingProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:StreamingProxy:Enabled")"
  if [ "${bv_StreamingProxyEnabled}" = "true" ]
  then
    sv_StreamingProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:StreamingProxy:Address")"
    if test -n "${sv_StreamingProxyServer}"
    then
      iv_StreamingProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:StreamingProxy:Port")"
      if test -n "${iv_StreamingProxyPort}"
      then
        LW_nf_logmessage "NOTE, setting 'Secure Streaming Proxy' to ${sv_StreamingProxyServer}:${iv_StreamingProxyPort}"
        /usr/sbin/networksetup -setstreamingproxy "${LW_sv_NetworkServiceInterfaceName}" "${sv_StreamingProxyServer}" "${iv_StreamingProxyPort}" off
        /usr/sbin/networksetup -setstreamingproxystate "${LW_sv_NetworkServiceInterfaceName}" on
      fi
    fi
  fi

  bv_FTPProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:FTPProxy:Enabled")"
  if [ "${bv_FTPProxyEnabled}" = "true" ]
  then
    sv_FTPProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:FTPProxy:Address")"
    if test -n "${sv_FTPProxyServer}"
    then
      iv_FTPProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:FTPProxy:Port")"
      if test -n "${iv_FTPProxyPort}"
      then
        LW_nf_logmessage "NOTE, setting 'FTP Proxy' to ${sv_FTPProxyServer}:${iv_FTPProxyPort}"
        /usr/sbin/networksetup -setftpproxy "${LW_sv_NetworkServiceInterfaceName}" "${sv_FTPProxyServer}" "${iv_FTPProxyPort}" off
        /usr/sbin/networksetup -setftpproxystate "${LW_sv_NetworkServiceInterfaceName}" on
      fi
    fi
  fi

  bv_SOCKSProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SOCKSProxy:Enabled")"
  if [ "${bv_SOCKSProxyEnabled}" = "true" ]
  then
    sv_SOCKSProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SOCKSProxy:Address")"
    if test -n "${sv_SOCKSProxyServer}"
    then
      iv_SOCKSProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:SOCKSProxy:Port")"
      if test -n "${iv_SOCKSProxyPort}"
      then
        LW_nf_logmessage "NOTE, setting 'SOCKS Proxy' to ${sv_SOCKSProxyServer}:${iv_SOCKSProxyPort}"
        /usr/sbin/networksetup -setsocksfirewallproxy "${LW_sv_NetworkServiceInterfaceName}" "${sv_SOCKSProxyServer}" "${iv_SOCKSProxyPort}" off
        /usr/sbin/networksetup -setsocksfirewallproxystate "${LW_sv_NetworkServiceInterfaceName}" on
      fi
    fi
  fi

  bv_GopherProxyEnabled="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:GopherProxy:Enabled")"
  if [ "${bv_GopherProxyEnabled}" = "true" ]
  then
    sv_GopherProxyServer="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:GopherProxy:Address")"
    if test -n "${sv_GopherProxyServer}"
    then
      iv_GopherProxyPort="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:GopherProxy:Port")"
      if test -n "${iv_GopherProxyPort}"
      then
        LW_nf_logmessage "NOTE, setting 'Gopher Proxy' to ${sv_GopherProxyServer}:${iv_GopherProxyPort}"
        /usr/sbin/networksetup -setgopherproxy "${LW_sv_NetworkServiceInterfaceName}" "${sv_GopherProxyServer}" "${iv_GopherProxyPort}" off
        /usr/sbin/networksetup -setgopherproxystate "${LW_sv_NetworkServiceInterfaceName}" on
      fi
    fi
  fi

  sv_ProxyBypassDomains="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:ProxyBypassDomains" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | tr "\n" " ")"
  if test -n "${sv_ProxyBypassDomains}"
  then
    LW_nf_logmessage "NOTE, setting Proxy Bypass Domains"
    /usr/sbin/networksetup -setproxybypassdomains "${LW_sv_NetworkServiceInterfaceName}" ${sv_ProxyBypassDomains}
  fi

  if test -n "${sv_AutoProxyURL}${iv_WebProxyPort}${iv_SecureWebProxyPort}${iv_StreamingProxyPort}${iv_FTPProxyPort}${iv_SOCKSProxyPort}${iv_GopherProxyPort}${sv_ProxyBypassDomains}"
  then
    LW_nf_logmessage "ATTENTION, proxy settings configured"
    
  else
  
    LW_nf_QuickExit "NOTE, policy aborted: No Proxy options found"
  fi

fi
  
# Trigger an event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
srm -fR "${LW_sv_ThisScriptTempDirPath}"

# ---

# Notes to self
# -display internet traffic
#  tcpdump -i en0 -n port 80
# -display traffic to a particular host (which you could pick out of the above output)
#  tcpdump -i en0 -n host 95.140.226.15
