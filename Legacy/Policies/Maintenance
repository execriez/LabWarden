#!/bin/bash
#
# Short:    Policy script - Run a system Maintenance
# Author:   Mark J Swift
# Version:  1.0.101
# Modified: 09-Dec-2016
#
# Triggered by the following events:
#   ManualUpdate    (as root)
#   LoginWindow     (as root)
#   LoginWindowIdle (as root)
#   UserAtDesktop   (as user)
#   UserPoll        (as user)
#
# Called as follows:    
#   Maintenance <ConfigDir> <EventHistory> <LoggedInUser> <ConfigEntryName> <OptionalParam>
# 
# This is a legacy policy that is replaced by the "SystemUpdate" policy.

# ---

sv_CodeVersion="1.0.101"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config directory
sv_ConfigDirPath="${1}"
if test -z "${sv_ConfigDirPath}"
then
  # We need something to work with
  exit 0
fi

# Get event History
sv_EventHistory="${2}"

# Get event that triggered this policy
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user, a null string signifies no-one is logged in
# This is generally null during a system event, and not null during a user event
LW_sv_LoggedInUserName="${3}"

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${4}"

# Get optional parameter
# So far, this is only ever used to get Application info after a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
sv_OptionalParam="${5}"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# ---

Nf_GetOpeningHours()   # messagetxt
{
  local iv_FutureOpenEpoch
  local iv_LoopCount
  local iv_MaintenanceEndEpoch
  local iv_MaintenanceStartEpoch
  local iv_NextCloseEpoch
  local iv_SafeEndEpoch
  local iv_SafetyNetMinutes
  local iv_ThisDayNum
  local iv_ThisOffsetEpoch
  local iv_ThisOffsetSecs
  local iv_ThisZerohourEpoch
  local sv_ThisOffsetTimeString
  local sv_OpenTime
  local sv_CloseTime
 
  # Calculate the following globals
  #  iv_CurrOpenEpoch
  #  iv_CurrCloseEpoch
  #  iv_NextOpenEpoch
  #  iv_NextMaintenanceEpoch
  # ...and schudule a poweron for the next update

  # Get the config settings
  for (( iv_LoopCount=0; iv_LoopCount<=6; iv_LoopCount++ ))
  do
    sv_OpenTime[${iv_LoopCount}]=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:OpeningHours:${iv_LoopCount}:OpenTime")
    sv_CloseTime[${iv_LoopCount}]=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:OpeningHours:${iv_LoopCount}:CloseTime")
  done

  # Find current open time (before now)
  iv_ThisZerohourEpoch=$(date -r ${LW_iv_ThisScriptStartEpoch} -v0H -v0M -v0S "+%s")
  while [ $((${LW_iv_ThisScriptStartEpoch} - ${iv_ThisZerohourEpoch})) -lt 604800 ]
  do
    iv_ThisDayNum=$(date -r ${iv_ThisZerohourEpoch} "+%w")
    sv_ThisOffsetTimeString=${sv_OpenTime[${iv_ThisDayNum}]}
    if test -n "${sv_ThisOffsetTimeString}"
    then
      iv_ThisOffsetSecs=$(($(echo "${sv_ThisOffsetTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
      iv_ThisOffsetEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
      if [ ${iv_ThisOffsetEpoch} -lt ${LW_iv_ThisScriptStartEpoch} ]
      then
        iv_CurrOpenEpoch=${iv_ThisOffsetEpoch}
        break;
      fi
    fi
    iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v-1d "+%s")
  done

  if test -n "${iv_CurrOpenEpoch}"
  then
    # find current close time (after current open)
    iv_ThisZerohourEpoch=$(date -r ${iv_CurrOpenEpoch} -v0H -v0M -v0S "+%s")
    while [ $((${iv_ThisZerohourEpoch} - ${iv_CurrOpenEpoch})) -lt 604800 ]
    do
      iv_ThisDayNum=$(date -r ${iv_ThisZerohourEpoch} "+%w")
      sv_ThisOffsetTimeString=${sv_CloseTime[${iv_ThisDayNum}]}
      if test -n "${sv_ThisOffsetTimeString}"
      then
        iv_ThisOffsetSecs=$(($(echo "${sv_ThisOffsetTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
        iv_ThisOffsetEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
        if [ ${iv_ThisOffsetEpoch} -gt ${iv_CurrOpenEpoch} ]
        then
          iv_CurrCloseEpoch=${iv_ThisOffsetEpoch}
          break;
        fi
      fi
      iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v+1d "+%s")
    done
  
    if test -n "${iv_CurrCloseEpoch}"
    then
      # Find the next open time
      iv_ThisZerohourEpoch=$(date -r ${iv_CurrCloseEpoch} -v0H -v0M -v0S "+%s")
      while [ $((${iv_ThisZerohourEpoch} - ${iv_CurrCloseEpoch})) -lt 604800 ]
      do
        iv_ThisDayNum=$(date -r ${iv_ThisZerohourEpoch} "+%w")
        sv_ThisOffsetTimeString=${sv_OpenTime[${iv_ThisDayNum}]}
        if test -n "${sv_ThisOffsetTimeString}"
        then
          iv_ThisOffsetSecs=$(($(echo "${sv_ThisOffsetTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
          iv_ThisOffsetEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
          if [ ${iv_ThisOffsetEpoch} -gt ${iv_CurrCloseEpoch} ]
          then
            iv_NextOpenEpoch=${iv_ThisOffsetEpoch}
            break;
          fi
        fi
        iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v+1d "+%s")
      done
    fi  
  
  fi

  if test -z "${iv_NextOpenEpoch}"
  then
    iv_CurrOpenEpoch=""
    iv_CurrCloseEpoch=""
    iv_NextMaintenanceEpoch=""
    LW_nf_logmessage "ATTENTION, opening times undefined"
  
  else
    # Take a note of results
    LW_nf_logmessage "NOTE, CurrOpen $(date -r ${iv_CurrOpenEpoch} "+%Y%m%d-%H:%M.%S")"
    LW_nf_logmessage "NOTE, CurrClose $(date -r ${iv_CurrCloseEpoch} "+%Y%m%d-%H:%M.%S")"
    LW_nf_logmessage "NOTE, NextOpen $(date -r ${iv_NextOpenEpoch} "+%Y%m%d-%H:%M.%S")"
  
    # Now we have to schedule a power on to allow for future Maintenance
    if [ ${LW_iv_ThisScriptStartEpoch} -lt ${iv_CurrCloseEpoch} ]
    then
      # we are somewhere between opening time and closing time
      iv_MaintenanceStartEpoch=${iv_CurrCloseEpoch}
      iv_MaintenanceEndEpoch=${iv_NextOpenEpoch}
    
    else
      # we are somewhere between closing time and the next opening time

      # find the next close time (after the next open)
      iv_ThisZerohourEpoch=$(date -r ${iv_NextOpenEpoch} -v0H -v0M -v0S "+%s")
      while [ $((${iv_ThisZerohourEpoch} - ${iv_NextOpenEpoch})) -lt 604800 ]
      do
        iv_ThisDayNum=$(date -r ${iv_ThisZerohourEpoch} "+%w")
        sv_ThisOffsetTimeString=${sv_CloseTime[${iv_ThisDayNum}]}
        if test -n "${sv_ThisOffsetTimeString}"
        then
          iv_ThisOffsetSecs=$(($(echo "${sv_ThisOffsetTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
          iv_ThisOffsetEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
          if [ ${iv_ThisOffsetEpoch} -gt ${iv_NextOpenEpoch} ]
          then
            iv_NextCloseEpoch=${iv_ThisOffsetEpoch}
            break;
          fi
        fi
        iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v+1d "+%s")
      done

      if test -n "${iv_NextCloseEpoch}"
      then
        # Find the open time after the next close time
        iv_ThisZerohourEpoch=$(date -r ${iv_NextCloseEpoch} -v0H -v0M -v0S "+%s")
        while [ $((${iv_ThisZerohourEpoch} - ${iv_NextCloseEpoch})) -lt 604800 ]
        do
          iv_ThisDayNum=$(date -r ${iv_ThisZerohourEpoch} "+%w")
          sv_ThisOffsetTimeString=${sv_OpenTime[${iv_ThisDayNum}]}
          if test -n "${sv_ThisOffsetTimeString}"
          then
            iv_ThisOffsetSecs=$(($(echo "${sv_ThisOffsetTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
            iv_ThisOffsetEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
            if [ ${iv_ThisOffsetEpoch} -gt ${iv_NextCloseEpoch} ]
            then
              iv_FutureOpenEpoch=${iv_ThisOffsetEpoch}
              break;
            fi
          fi
          iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v+1d "+%s")
        done
 
        if test -n "${iv_FutureOpenEpoch}"
        then
          iv_MaintenanceStartEpoch=${iv_NextCloseEpoch}
          iv_MaintenanceEndEpoch=${iv_FutureOpenEpoch}
        fi
      fi  

    fi
    
    if test -z "${iv_MaintenanceEndEpoch}"
    then
      LW_nf_logmessage "ATTENTION, I cannot calculate when is the best time to do the next Maintenance."
      
    else
      # do not poweron for an update within SafetyNetMinutes of the next opening time
      iv_SafeEndEpoch=${iv_MaintenanceEndEpoch}

      iv_SafetyNetMinutes=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:SafetyNetMinutes")
      if test -n "${iv_SafetyNetMinutes}"
      then
        iv_SafeEndEpoch=$((${iv_SafeEndEpoch}-(${iv_SafetyNetMinutes}*60)))
        if [ ${iv_MaintenanceStartEpoch} -gt ${iv_SafeEndEpoch} ]
        then
          iv_SafeEndEpoch=${iv_MaintenanceStartEpoch}
        fi
      fi

      # -- work out a good random-ish time to power on for the next Maintenance check.
      iv_NextMaintenanceEpoch=$(jot -r 1 ${iv_MaintenanceStartEpoch} ${iv_SafeEndEpoch})

      LW_nf_logmessage "NOTE, Next Scheduled Maintenance $(date -r ${iv_NextMaintenanceEpoch} "+%Y%m%d-%H:%M.%S")"
      LW_nf_schedule4epoch "${LW_sv_ThisScriptFileName}" "poweron" ${iv_NextMaintenanceEpoch}
    
    fi
  fi

  LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:CurrOpenEpoch" "${iv_CurrOpenEpoch}"
  LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:CurrCloseEpoch" "${iv_CurrCloseEpoch}"
  LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:NextOpenEpoch" "${iv_NextOpenEpoch}"
}

Nf_CheckWorkingHoursUserAccess()
{
  local bv_StrictWorkingHours
  local iv_LogoutWarningSecs
  local iv_CurrCloseEpoch
  local iv_RemainingSecs
  local iv_JobID
  
  # Log Users off out of hours

  # Note, we dont log users off when off-network
  if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
  then
    LW_nf_logmessage "NOTE, out of hours restrictions ignored (not on ${LW_sv_ADDomainNameFlat} network)."
    
  else
    # Note, we dont ever log the admin users off
    if [ "${LW_bv_LoggedInUserIsAdmin}" = "true" ]
    then
      LW_nf_logmessage "NOTE, out of hours restrictions ignored (user is admin)."
      
    else
      iv_CurrCloseEpoch=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:CurrCloseEpoch")
      if test -n "${iv_CurrCloseEpoch}"
      then
        bv_StrictWorkingHours=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:StrictWorkingHours")
        if [ "${bv_StrictWorkingHours}" = "false" ]
        then
          LW_nf_logmessage "NOTE, out of hours restrictions ignored (policy not strictly enforced)."
          
        else
          iv_LogoutWarningSecs=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:LogoutWarningSecs")
          if test -z "${iv_LogoutWarningSecs}"
          then
            iv_LogoutWarningSecs=600
          fi
    
          iv_RemainingSecs=$((${iv_CurrCloseEpoch}-${LW_iv_ThisScriptStartEpoch}))
    
          if [ ${iv_RemainingSecs} -gt ${iv_LogoutWarningSecs} ] 
          then
            LW_nf_logmessage "NOTE, User will not be logged off for a while."
          else
            if [ ${iv_RemainingSecs} -gt 0 ] 
            then
              LW_nf_logmessage "ATTENTION, User warned about impending out of hours force logout with ${iv_RemainingSecs} seconds remaining."
              LW_nf_ShowNotification "WARNING" "Closing time approaches. The system will log you off in about ${iv_RemainingSecs} seconds."
        
            else
              LW_nf_logmessage "ATTENTION, User out of hours force logout by system."
              LW_nf_ShowNotification "WARNING" "No out of hours access. The system is logging you off."
  
              # cycle through usual apps and kill them dead (unsaved changes will be lost)
              ps -ax | grep "/Applications/" | grep -v "grep" | sed "s|^[ ]*||" | cut -d" " -f1 | while read iv_JobID
              do
                kill ${iv_JobID}
              done

              # applescript to log out gracefully
              /usr/bin/osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
            fi
          fi
        fi
      fi
    fi
  fi
}

# ---

# Execute the Policy

# Take a note of the Policy call
LW_nf_logmessage "NOTE, policy triggered: '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${LW_sv_ThisUserName}' "

case ${sv_EventName} in
    
ManualUpdate)
  # Perform the Maintenance
  if test -e "/usr/local/LabWarden/util/Maintenance"
  then
    /usr/local/LabWarden/util/Maintenance
  else
    if test -e "/usr/local/LabWarden/legacy/util/Maintenance"
    then
      /usr/local/LabWarden/legacy/util/Maintenance
    else
      LW_nf_RestartNow "ERROR, cannot find maintenance utility."
    fi
  fi
  ;;

LoginWindow)
  # Setup Maintenance options
  LW_nf_logmessage "NOTE, calculating out of hours restrictions and next update time."
  Nf_GetOpeningHours

  LW_nf_QuickExit "NOTE, policy aborted: ${sv_PolicyName} is not ready to run at this time."
  ;;
  
LoginWindowIdle)
  bv_PolicyExecuted="false"
  bv_WithinWorkingHours="true"
  
  iv_CurrCloseEpoch=$(LW_sf_GetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:CurrCloseEpoch")
  if test -z "${iv_CurrCloseEpoch}"
  then
    LW_nf_logmessage "ATTENTION, working Hours Closing time not set"
    LW_nf_logmessage "NOTE, recalculating Working Hours"
    Nf_GetOpeningHours
  fi
  
  iv_LastMaintenanceEpoch=$(LW_sf_GetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:LastMaintenanceEpoch" 1136073660)
  iv_MaintenanceAgeMaxDays=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:MaintenanceAgeMaxDays")

  if test -n "${iv_MaintenanceAgeMaxDays}"
  then
    iv_MaintenanceAgeSecs=$((${LW_iv_ThisScriptStartEpoch}-${iv_LastMaintenanceEpoch}))
    iv_MaintenanceAgeDays=$((${iv_MaintenanceAgeSecs}/60/60/24))

    LW_nf_logmessage "NOTE, last Maintenance completed approximately ${iv_MaintenanceAgeDays} days ago."

    if [ ${iv_MaintenanceAgeDays} -gt ${iv_MaintenanceAgeMaxDays} ]
    then
      LW_nf_logmessage "ATTENTION, forcing Maintenance (maximum time has elapsed)."
      bv_PolicyExecuted="true"
    fi
  fi

  if [ "${bv_PolicyExecuted}" != "true" ]
  then
    if test -z "${iv_CurrCloseEpoch}"
    then
      LW_nf_logmessage "ATTENTION, working Hours Closing time not set"

    else
      if [ ${LW_iv_ThisScriptStartEpoch} -lt ${iv_CurrCloseEpoch} ]
      then
        LW_nf_logmessage "NOTE, within Working Hours"
        
      else
        bv_WithinWorkingHours="false"
        iv_NextOpenEpoch=$(LW_sf_GetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:NextOpenEpoch")
        if test -z "${iv_CurrCloseEpoch}"
        then
          LW_nf_logmessage "ATTENTION, working Hours Next Open time not set"
    
        else
          if [ ${LW_iv_ThisScriptStartEpoch} -gt ${iv_NextOpenEpoch} ]
          then
            LW_nf_logmessage "NOTE, recalculating Working Hours"
            Nf_GetOpeningHours
  
          else
            LW_nf_logmessage "NOTE, outside Working Hours"
        
            if [ ${iv_LastMaintenanceEpoch} -gt ${iv_CurrCloseEpoch} ]
            then
              LW_nf_logmessage "NOTE, ${sv_PolicyName} policy has recently completed"
    
            else
              # We haven't done an update recently
              bv_PolicyExecuted="true"

            fi
          fi
        fi
      fi
    fi
  fi

  # Don't run if we are not on the domain network
  if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
  then
    bv_PolicyExecuted="false"
  fi
  
  if [ "${bv_PolicyExecuted}" = "true" ]
  then
    # Take a note of when we ran the policy
    LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:LastMaintenanceEpoch" "${LW_iv_ThisScriptStartEpoch}"
          
    # Perform the Maintenance
    if test -e "/usr/local/LabWarden/util/Maintenance"
    then
      /usr/local/LabWarden/util/Maintenance
    else
      if test -e "/usr/local/LabWarden/legacy/util/Maintenance"
      then
        /usr/local/LabWarden/legacy/util/Maintenance
      else
        LW_nf_RestartNow "ERROR, cannot find maintenance utility."
      fi
    fi

    # Restart after a successful update
    LW_nf_RestartNow "ATTENTION, maintenance complete - we should reboot."

  else
    # Check if we should shutdown
    
    iv_IdleSecs=$(LW_if_SystemIdleSecs)
    LW_nf_logmessage "NOTE, workstation Idle for ${iv_IdleSecs} secs"

    iv_IdleShutdownSecs=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:IdleShutdownSecs")
    if test -z "${iv_IdleShutdownSecs}"
    then
      LW_nf_logmessage "ATTENTION, idle Shutdown value not set"
    
    else
      if [ ${iv_IdleSecs} -gt ${iv_IdleShutdownSecs} ]
      then
        bv_DoShutdown="true"
  
        if [ "${bv_WithinWorkingHours}" = "true" ]
        then
          bv_DoShutdown="false"
          bv_IdleShutdownInWorkingHours=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:IdleShutdownInWorkingHours")
          if [ "${bv_IdleShutdownInWorkingHours}" = "true" ]
          then
            bv_DoShutdown="true"
          fi
        fi

        if [ "${bv_DoShutdown}" = "true" ]
        then
          # Shutdown if the workstation has been idle
          LW_nf_ShutdownNow "ATTENTION, workstation has been idle too long - we should shutdown."
        fi
      fi
    fi

    LW_nf_QuickExit "NOTE, policy aborted: ${sv_PolicyName} is not ready to run at this time."
  fi
  ;;
  
UserAtDesktop)
  # Log Users off out of hours. Note, we dont ever log the admin users off
  LW_nf_logmessage "NOTE, checking time restrictions as user '${LW_sv_ThisUserName}'"
  Nf_CheckWorkingHoursUserAccess

  LW_nf_QuickExit "NOTE, policy aborted: ${sv_PolicyName} is not ready to run at this time."
  ;;
  
UserPoll)
  # Log Users off out of hours. Note, we dont ever log the admin users off
  LW_nf_logmessage "NOTE, checking time restrictions as user '${LW_sv_ThisUserName}'"
  Nf_CheckWorkingHoursUserAccess

  LW_nf_QuickExit "NOTE, policy aborted: ${sv_PolicyName} is not ready to run at this time."
  ;;

*)
  LW_nf_QuickExit "NOTE, policy aborted: Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac
  
if [ "${bv_PolicyExecuted}" = "true" ]
then
  # Trigger an event
  LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"
fi

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# ---
