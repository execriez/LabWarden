#!/bin/bash
#
# Short:    Utility Script - Perform a maintenance action (workstation update)
# Author:   Mark J Swift
# Version:  1.0.101
# Modified: 09-Dec-2016
#
# Called as follows:    
#   /usr/local/LabWarden/legacy/util/Maintenance

# Reads the software update method from the maintenance settings
# then calls the appropriate update script. Afterwards it performs a gpupdate.
#
# Convenient when you want to perform a manual software update.
#
# This is a legacy utility that is replaced by the "Update" utility.

# ---

sv_CodeVersion="1.0.101"

# ---

# Get filename of this script
sv_ThisScriptFileName="$(basename "${0}")"

# ---

# Get user name
sv_ThisUserName="$(whoami)"

if [ "${sv_ThisUserName}" != "root" ]
then
  # we only like root
  exit 0
fi

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_BuildVersionStampAsString}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

LW_nf_logmessage "ATTENTION, running ${LW_sv_ThisScriptFileName} version ${sv_CodeVersion}"

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# Where we find the config
sv_ConfigDirPath="${LW_sv_SettingsDirPath}/Config/Computers/${LW_sv_ADComputerName}"

# ---

if test -z "${sv_ConfigEntryName}"
then
  # Need to find the config entry name - as this has been called outside a Policy execution
  
  # We check for policies that are triggered by the LoginWindowIdle event
  sv_EventName="LoginWindowIdle"
  iv_DoesTriggerCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_EventName}:DoesTrigger")"
  for (( iv_DoesTriggerIndex=0; iv_DoesTriggerIndex<${iv_DoesTriggerCount}; iv_DoesTriggerIndex++ ))
  do
    sv_ConfigEntryName=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_EventName}:DoesTrigger:${iv_DoesTriggerIndex}")
    if test -n "${sv_ConfigEntryName}"
    then
      sv_PolicyName=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Name")
      if test -n "${sv_PolicyName}"
      then
        if [ "${sv_PolicyName}" = "Maintenance" ]
        then
          break
        fi
      fi
    fi
  done
  
fi

if [ "${sv_PolicyName}" != "Maintenance" ]
then
  LW_nf_logmessage "ATTENTION, sorry, I can't find the Maintenance settings."
fi

iv_UpdateArgCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:UpdateMethodArguments")"
if [ ${iv_UpdateArgCount} -eq 0 ]
then
  LW_nf_logmessage "ATTENTION, there are no defined update arguments."

else
  sv_UpdateExeURI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:UpdateMethodArguments:0")"
  if test -n "${sv_UpdateExeURI}"
  then
    sv_UpdateExeFilePath=$(LW_sf_ResolveFilename "${sv_UpdateExeURI}")
    if ! test -e "${sv_UpdateExeFilePath}"
    then
      # Its possible that we are assuming the lib directory
      sv_UpdateExeFilePath="/usr/local/LabWarden/lib/${sv_UpdateExeURI}"
    fi

    if ! test -e "${sv_UpdateExeFilePath}"
    then
      LW_nf_logmessage "ATTENTION, update script does not exist (${sv_UpdateExeFilePath})"

    else
      if ! test -x "${sv_UpdateExeFilePath}"
      then
        chown root:wheel "${sv_UpdateExeFilePath}"
        chmod u+x "${sv_UpdateExeFilePath}"
      fi
      for (( iv_UpdateArgIndex=1; iv_UpdateArgIndex<${iv_UpdateArgCount}; iv_UpdateArgIndex++ ))
      do
        sv_UpdateExeFilePath="${sv_UpdateExeFilePath} '""$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:Config:UpdateMethodArguments:${iv_UpdateArgIndex}")""'"
      done

      # Do a software update
      LW_nf_logmessage "ATTENTION, updating workstation software (${sv_UpdateExeFilePath})"
      eval "${sv_UpdateExeFilePath}" | tee -a "${LW_sv_ThisUserLogDirPath}/LabWarden.log"
    fi
  fi
fi

# Take a note of when we ran the maintenance
LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_ConfigEntryName}:LocalPrefs:LastMaintenanceEpoch" "${LW_iv_ThisScriptStartEpoch}"

# Do a full group policy update
LW_nf_logmessage "ATTENTION, force updating workstation group policies (via gpupdate)."
/usr/local/LabWarden/util/gpupdate "-force"
 
LW_nf_logmessage "NOTE, we should reboot now"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"
