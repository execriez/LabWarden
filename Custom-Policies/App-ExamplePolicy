#!/bin/bash
#
# Short:    App Policy Script - Example Application Policy script (A blank canvas)
# Author:   Mark J Swift
# Version:  2.0.10
# Modified: 12-Jun-2017
#
# Triggered by the following events:
#   App-WillLaunch           (as user)
#   App-DidLaunch            (as user)
#   App-DidTerminate         (as user)
#
#   ... see associated config 'Sys-ExamplePolicy.mobileconfig'
#
# Called as follows:    
#   App-ExamplePolicy <ConfigFilePath> <ConfigEntryName> <EventHistory> <LoggedInUser> <OptionalParam>

# ---

sv_CodeVersion="2.0.10"

if [ $# -eq 0 ]
then
  echo "${sv_CodeVersion}"
  exit 0
fi

# ---

# Get the config file path
sv_ConfigFilePath="${1}"
if test -z "${sv_ConfigFilePath}"
then
  # We need something to work with
  exit 0
fi

# Get config entry name. This is the entry in the config that holds the configurable parameters for this policy.
sv_ConfigEntryName="${2}"

# Get event History
sv_EventHistory="${3}"

# Calculate the event that triggered this policy.
sv_EventName="$(echo ${sv_EventHistory} | tr ":" "\n" | tail -n 1)"
if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get the name of the logged in user.
# A null string signifies no-one is logged in, or this is a system event.
GLB_sv_LoggedInUserName="${4}"

# Get optional parameter
# This is a general variable that is currently used to pass the following info:
#   Application info during a AppWillLaunch, AppDidLaunch or AppDidTerminate event.
#   User info during a Sys-ConsoleUserLoggedIn, Sys-ConsoleUserLoggedOut, Sys-ConsoleUserSwitch, Sys-Login or Sys-Logout event.
sv_OptionalParam="${5}"

# Get info from optional parameter
case ${sv_EventName} in

App-WillLaunch|App-DidLaunch|App-DidTerminate)

  # Get ApplicationBundleIdentifier e.g. com.apple.TextEdit
  # Note, older applications may return "(null)"
  sv_ThisAppBundleIdentifier="$(echo ${sv_OptionalParam} | cut -d":" -f3)"

  # Get notification e.g. WillLaunch, DidLaunch or DidTerminate
  sv_ThisAppNotificationType="$(echo ${sv_OptionalParam} | cut -d":" -f1)"

  # Get Date/Time Epoch of the notification
  iv_ThisAppNotificationEpoch="$(echo ${sv_OptionalParam} | cut -d":" -f2)"

  # Get ApplicationName e.g. TextEdit
  sv_ThisAppName="$(echo ${sv_OptionalParam} | cut -d":" -f4)"

  # Get ApplicationPath e.g. /Applications/TextEdit.app
  sv_ThisAppFilePath="$(echo ${sv_OptionalParam} | cut -d":" -f5)"

  # Get ApplicationProcessIdentifier - i.e. the process ID
  sv_ThisAppProcessID="$(echo ${sv_OptionalParam} | cut -d":" -f6)"
  
  # Note, we should quickly quit if are running an App that we are not interested in

  # ------------------
  # BEGIN YOUR CODE HERE

  # We could test for a specific App, but in this example we are interested in all Apps
  #
  # if [ "${sv_ThisAppBundleIdentifier}" != "org.mozilla.firefox" ]
  # then
  #   exit 0
  # fi

  # END YOUR CODE HERE
  # ------------------
  ;;

esac

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'CommonLib' for a complete list.

# ---

# Get policy name (Name of this script)
sv_PolicyName="${GLB_sv_ThisScriptName}"

# ---

# Calculate the pref file paths

# Local prefs are referenced by Policy UUID and are local to the running user. These are deleted when the policy is updated or uninstalled.
sv_ThisUserLocalPrefFilePath="${GLB_sv_ThisUserPrefDirPath}/${sv_ConfigEntryName}.plist"

# Global prefs are referenced by Policy Name and are read/write root but read-only for normal users. These survive policy updates and uninstalls.
sv_ThisPolicyGlobalPrefFilePath="${GLB_sv_ProjectConfigDirPath}/Config/Global/${sv_PolicyName}.plist"

# ---

# Sys-PolicyInstall & Sys-PolicyUninstall events (which are called as the root user) are ignored by application policies

if [ "${sv_EventName}" = "Sys-PolicyInstall" ] || [ "${sv_EventName}" = "Sys-PolicyUninstall" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Event '${sv_EventHistory}' ignored by policy '${sv_PolicyName}'"
  exit 0
fi

# ---

# Execute the Policy

# Take a note of the Policy call
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy '${sv_PolicyName}' ${sv_OptionalParam} triggered by event '${sv_EventHistory}' as user '${GLB_sv_ThisUserName}'"

# ---

# ------------------
# BEGIN YOUR CODE HERE
  
# Read some values from the policy config
bv_ExampleBool="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExampleBool")"
iv_ExampleNum="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExampleNum")"
sv_ExampleString="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExampleString")"
sv_ExampleArray0="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExampleArray:0")"
sv_ExampleArray1="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExampleArray:1")"
sv_ExampleArray2="$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_ConfigEntryName}:Config:ExampleArray:2")"

# We could do something with the values now

# Here we are just outputting the values to the log if the log level is Debug
GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "ExampleBool:${bv_ExampleBool}"
GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "ExampleNum:${iv_ExampleNum}"
GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "ExampleString:${sv_ExampleString}"
GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "ExampleArray[0]:${sv_ExampleArray0}"
GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "ExampleArray[1]:${sv_ExampleArray1}"
GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "ExampleArray[2]:${sv_ExampleArray2}"

# Lets handle the events

# In this example we are just using the 'say' command to speak what is happening

case ${sv_EventName} in

App-WillLaunch)
  # (as user) - Do this when an Application quits
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Policy is speaking."
  say "Application '${sv_ThisAppName}' is loading" &
  ;;

App-DidLaunch)
  # (as user) - Do this when an Application quits
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Policy is speaking."
  say "Application '${sv_ThisAppName}' fully loaded" &
  ;;

App-DidTerminate)
  # (as user) - Do this when an Application quits
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Policy is speaking."
  say "Application '${sv_ThisAppName}' just quit" &
  ;;

Usr-PolicyInstall|Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_nf_QuickExit "Policy aborted - Trigger '${sv_EventName}' is not supported by policy '${sv_PolicyName}'"
  ;;

esac

# Write a value to the local policy vars (root user and normal users have different local policies)
GLB_nf_SetPlistProperty "${sv_ThisUserLocalPrefFilePath}" ":${sv_ConfigEntryName}:LocalPrefs:LastRunEpoch" "${GLB_iv_ThisScriptStartEpoch}"

# END YOUR CODE HERE
# ------------------
    
# ---

# Take a note that the Policy is complete
GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Policy done."

# Trigger an event
#GLB_nf_TriggerEvent "${sv_EventHistory}" "${sv_PolicyName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

# ---
