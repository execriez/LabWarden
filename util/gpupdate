#!/bin/bash
#
# Short:    Utility Script - Perform a Group Policy update
# Author:   Mark J Swift
# Version:  1.0.97
# Modified: 19-Sep-2016
#
# Called as follows:    
#   gpupdate [-force|-quick] [<user>]
#
# Without a user specified, updates the group policies for the workstation.
# With a user, updates the group policies for the specified user.

# ---

sv_CodeVersion="1.0.97"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

LW_nf_logmessage "NOTE, ${LW_sv_ThisScriptFileName} version ${sv_CodeVersion}"

# ---

if test -z "${LW_sv_NetworkServiceInterfaceName}"
then
  # we need a network
  LW_nf_QuickExit "ERROR, no network"
fi

if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
then
  LW_nf_QuickExit "ERROR, not on ${LW_sv_ADDomainNameFlat} network"
fi

# ---

sv_GPoption="$(echo ${1} | tr [A-Z] [a-z])"

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  sv_GPOuser="${LW_sv_ThisUserName}"
fi

# ---

case "${sv_GPoption}" in
-force)
  # Update all (Computer and User) policies older than 5 minutes
  iv_GPCacheMaxAgeMinutes=5
  sv_GPOuser=${2}
  
  if test -z "${sv_GPOuser}"
  then
    if test -e "${LW_sv_SettingsDirPath}/Config/Users"
    then
      ls -1 "${LW_sv_SettingsDirPath}/Config/Users" | while read sv_KnownUser
      do
        /usr/local/LabWarden/util/gpupdate "-force" "${sv_KnownUser}"
      done
    fi
  fi
  ;;

-quick)
  # Only update if policy older than 180 days (or doesn't yet exist)
  iv_GPCacheMaxAgeMinutes=259200
  sv_GPOuser=${2}
  ;;
    
*)
  # Update if policy older than 1 day old (or doesn't yet exist)
  iv_GPCacheMaxAgeMinutes=1440
  sv_GPOuser=${1}
  ;;
    
esac

# ---

Sf_BuildGroupMembershipCache() # <Context> <ObjectName> - List object membership. Context can be Users, Computers or Groups.
{
  local sv_ObjectContext
  local sv_ObjectName
  local sv_NameDelim
  local sv_GroupName
  local sv_SubGroupName
  local iv_CacheEpoch
  local sv_Temp1FilePath

  sv_ObjectContext=${1}
  sv_ObjectName=${2}
  
  case "${sv_ObjectContext}" in
  Computers)
    sv_NameDelim="$"
    ;;

  Users|Groups)
    sv_NameDelim=""
    ;;
    
  *)
    exit 0
    ;;
    
  esac
  
  iv_CacheEpoch=0
  if test -e "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
  then
    iv_CacheEpoch=$(stat -f "%m" "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt")
  fi
  
  if [ $((${LW_iv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -lt $((${iv_GPCacheMaxAgeMinutes}*60)) ]
  then
    cat "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"

  else
    sv_Temp0FilePath=$(mktemp "${LW_sv_ThisScriptTempDirPath}/XXXXXXXX")
    
    # Get the memberOf field from AD 
    dscl 2>/dev/null localhost -read "/Search/${sv_ObjectContext}/${sv_ObjectName}${sv_NameDelim}" memberOf > "${sv_Temp0FilePath}"
    
    if [ "$?" != "0" ]
    then
      LW_nf_logmessage "ERROR, cannot get ${sv_ObjectContext} ${sv_ObjectName} 'memberOf' field from AD."
      if test -e "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      then
        LW_nf_logmessage "ATTENTION, using cached ${sv_ObjectContext} ${sv_ObjectName} 'memberOf' field."
        cat "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      fi
      
    else
      # LW_nf_logmessage "DEBUG, just read ${sv_ObjectContext} ${sv_ObjectName} 'memberOf' field from AD."
    
      sv_Temp1FilePath=$(mktemp "${LW_sv_ThisScriptTempDirPath}/XXXXXXXX")
      touch "${sv_Temp1FilePath}"

      cat "${sv_Temp0FilePath}" | tr -d "\n" | sed "s|dsAttrTypeNative:memberOf:||g;s| CN=|:|g;s|^:||" | tr ":" "\n" | cut -d"," -f1 | sort -u | while read sv_GroupName
      do
        echo "${sv_GroupName}"
        echo "${sv_GroupName}">>"${sv_Temp1FilePath}"
        Sf_BuildGroupMembershipCache "Groups" "${sv_GroupName}" | while read sv_SubGroupName
        do
          if [ "${sv_SubGroupName}" = "${sv_ObjectName}" ]
          then
            break
          
          else
            echo "${sv_SubGroupName}"
            echo "${sv_SubGroupName}">>"${sv_Temp1FilePath}"
          
          fi
        done
      done
      rm -f "${sv_Temp0FilePath}"
    
      sv_Temp2FilePath=$(mktemp "${LW_sv_ThisScriptTempDirPath}/XXXXXXXX")
      chmod 644 "${sv_Temp2FilePath}"
    
      cat "${sv_Temp1FilePath}" | sort -u >"${sv_Temp2FilePath}"
      rm -f "${sv_Temp1FilePath}"

      mkdir -p "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}"
      chmod 755 "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}"
    
      ln -fh "${sv_Temp2FilePath}" "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      rm -f "${sv_Temp2FilePath}"
      
      if [ "${sv_ObjectContext}" = "Groups" ]
      then
        # Get the Info (Notes) field from AD 
        dscl 2>/dev/null localhost -read "/Search/${sv_ObjectContext}/${sv_ObjectName}${sv_NameDelim}" info | sed "s|dsAttrTypeNative:info:||" | sed "s|^[ ]*||" | sed "s|[ ]*$||" | tr -s "\n" > "${sv_Temp1FilePath}"
        if [ "$?" != "0" ]
        then
          LW_nf_logmessage "ERROR, cannot get ${sv_ObjectContext} ${sv_ObjectName} 'info' (Notes) field from AD (maybe it hasn't connected yet)."
          
        else
          # LW_nf_logmessage "DEBUG, just read ${sv_ObjectContext} ${sv_ObjectName} 'info' (Notes) field from AD."
          
          # Keep the file if the Info field is not empty
          if test -s "${sv_Temp1FilePath}"
          then
            touch -t $(date -r ${LW_iv_ThisScriptStartEpoch} "+%Y%m%d%H%M.%S") "${sv_Temp1FilePath}"
            chmod 644 "${sv_Temp1FilePath}"
            mkdir -p "${LW_sv_SettingsDirPath}/Cache/Notes/${sv_ObjectContext}"
            chmod 755 "${LW_sv_SettingsDirPath}/Cache/Notes/${sv_ObjectContext}"
            ln -fh "${sv_Temp1FilePath}" "${LW_sv_SettingsDirPath}/Cache/Notes/${sv_ObjectContext}/${sv_ObjectName}.txt"
          fi
        fi
        rm -f "${sv_Temp1FilePath}"
        
      fi

    fi

  fi
  
}

Sf_ListGroups() # <Context> <ObjectName> - List object membership. Context can be Users, Computers or Groups.
{
  local sv_ObjectContext
  local sv_ObjectName

  sv_ObjectContext=${1}
  sv_ObjectName=${2}

  Sf_BuildGroupMembershipCache "${sv_ObjectContext}" "${sv_ObjectName}" | sort -u
  
}

# ---

# Here we start for real

if test -n "${sv_GPOuser}"
then
  sv_ObjectContext="Users"
  sv_ObjectName="${sv_GPOuser}"

  dscl >/dev/null 2>&1 localhost -read /Search/${sv_ObjectContext}/${sv_ObjectName} name
  if [ "$?" != "0" ]
  then
    LW_nf_QuickExit "ERROR, cannot find ${sv_ObjectContext} ${sv_ObjectName} in AD."
  fi
else
  sv_ObjectContext="Computers"
  sv_ObjectName="${LW_sv_ADComputerName}"
fi

sv_ConfigDirPath="${LW_sv_SettingsDirPath}/Config/${sv_ObjectContext}/${sv_ObjectName}"

if [ "${LW_sv_ThisUserName}" = "root" ]
then

  # If a config has never been set up for this workstation, create base folders and set access rights
  if ! test -e "${LW_sv_SettingsDirPath}/Config/Computers/${LW_sv_ADComputerName}/LabWarden.plist"
  then
    # Remove old configs
    rm -fR "${LW_sv_SettingsDirPath}"
    
    # Create base folders
    mkdir -p "${LW_sv_SettingsDirPath}/Cache/MemberOf/Computers"
    mkdir -p "${LW_sv_SettingsDirPath}/Cache/MemberOf/Users"
    mkdir -p "${LW_sv_SettingsDirPath}/Cache/Notes/Computers"
    mkdir -p "${LW_sv_SettingsDirPath}/Cache/Notes/Users"
    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Active/Computers"
    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Active/Users"
    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Disable/Computers"
    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Disable/Users"
    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Verify/Computers"
    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Verify/Users"
    mkdir -p "${LW_sv_SettingsDirPath}/Config/Computers"
    mkdir -p "${LW_sv_SettingsDirPath}/Config/Users"
    
    # Set access rights
    chown -R root:wheel "${LW_sv_SettingsDirPath}"
    chmod -R 755 "${LW_sv_SettingsDirPath}"
  fi

  if ! test -e "${sv_ConfigDirPath}/LabWarden.plist"
  then
    mkdir -p "${sv_ConfigDirPath}"
    chown -R root:wheel "${sv_ConfigDirPath}"
    chmod -R 755 "${sv_ConfigDirPath}"
    LW_nf_SetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:InstallEpoch" "${LW_iv_ThisScriptStartEpoch}"
  fi
  
  iv_ObjectEpoch=0
  if test -e "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
  then
    iv_ObjectEpoch=$(stat -f "%m" "${LW_sv_SettingsDirPath}/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt")
  fi
  
  if [ $((${LW_iv_ThisScriptStartEpoch}-${iv_ObjectEpoch})) -gt $((${iv_GPCacheMaxAgeMinutes}*60)) ]
  then
    LW_nf_logmessage "ATTENTION, Rebuilding cache for ${sv_ObjectContext} ${sv_ObjectName}"

    # If we are updating the Computer policies, update the LoginWindow Message and Remote Management strings
    if [ "${sv_ObjectContext}" = "Computers" ]
    then
      sv_ADpath=$(dscl 2>/dev/null localhost -read "/Search/Computers/${LW_sv_ADTrustAccount}" distinguishedName | sed 's|[^,]*=||g;s|,|\.|g;s|\.'${LW_sv_ADDomainNameDNS}'||g;s|\.|,|g' | cut -d',' -f2-)
      if test -n "${sv_ADpath}"
      then
        # Update the loginWindow Text
        sv_LoginWindowText="$(echo ${LW_sv_ADTrustAccount} | sed "s|\$$||"):$(echo ${sv_ADpath} | sed "s|,| - |g")"
        sv_LoginWindowText=$(echo "${sv_LoginWindowText}" | tr ":" "\n")
        /usr/bin/defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText -string "${sv_LoginWindowText}"

        # Update the RemoteDesktop Computer Info Fields #1-3
        /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -computerinfo -set1 -1 "$(echo "${sv_ADpath}" | cut -d"," -f1)" -set2 -2 "$(echo "${sv_ADpath}" | cut -d"," -f2)" -set3 -3 "$(echo "${sv_ADpath}" | cut -d"," -f3-)"
      fi
    fi

    # Fill a directory with the objects info payload(s)
    sv_UpdatedInfoPayloadDirPath=$(mktemp -d "${LW_sv_ThisScriptTempDirPath}/XXXXXXXX")

    Sf_ListGroups "${sv_ObjectContext}" "${sv_ObjectName}" | while read sv_ObjectGroup
    do
      if test -e "${LW_sv_SettingsDirPath}/Cache/Notes/Groups/${sv_ObjectGroup}.txt"
      then
        ln -fh "${LW_sv_SettingsDirPath}/Cache/Notes/Groups/${sv_ObjectGroup}.txt" "${sv_UpdatedInfoPayloadDirPath}/${sv_ObjectGroup}.txt"
      fi
    done

    # Join split info payloads into a new file
    cd "${sv_UpdatedInfoPayloadDirPath}"
    ls -1 "${sv_UpdatedInfoPayloadDirPath}" | grep -E "\-[0-9]{1}.txt$" | sed -E "s|(.*)(-[0-9]{1}.txt$)|\1|" | sort -u | while read sv_GroupName
    do
      # If the joined file doesn't exist, create a new file from the split parts
      if ! test -e "${sv_UpdatedInfoPayloadDirPath}/${sv_GroupName}.txt"
      then
        cat $(ls -1 "${sv_UpdatedInfoPayloadDirPath}" | grep -E "${sv_GroupName}-[0-9]{1}.txt$" | sort) > "${sv_UpdatedInfoPayloadDirPath}/${sv_GroupName}.txt"
        touch -t $(date -r ${LW_iv_ThisScriptStartEpoch} "+%Y%m%d%H%M.%S") "${sv_UpdatedInfoPayloadDirPath}/${sv_GroupName}.txt"
      fi
    done

    # Delete split payloads
    find "${sv_UpdatedInfoPayloadDirPath}" -iregex '.*\-[0-9]\{1\}.txt$' -exec rm -f "{}" \;

    # Unpack the info payload content
    sv_UpdatedPayloadContentDirPath=$(mktemp -d "${LW_sv_ThisScriptTempDirPath}/XXXXXXXX")

    cd "${sv_UpdatedPayloadContentDirPath}"
    ls -1 "${sv_UpdatedInfoPayloadDirPath}" | while read sv_InfoPayloadName
    do
      cat "${sv_UpdatedInfoPayloadDirPath}/${sv_InfoPayloadName}" | base64 2>/dev/null -D | tar 2>/dev/null -xvzf -
    done
    chown -R root:wheel "${sv_UpdatedPayloadContentDirPath}"

    # Installing/uninstalling mobileconfigs for other users, is not supported prior to 10.11
    # so normal users will have to be able to uninstall.
    if [ "${sv_ObjectContext}" = "Users" ]
    then
      if [ ${LW_iv_SystemVersionStampAsNumber} -lt 168493056 ]
      then
        ls -1 "${sv_UpdatedPayloadContentDirPath}" | grep -E ".*\.mobileconfig" | while read sv_PayloadContentName
        do
          iv_PayloadContentEpoch=$(stat -f "%m" "${sv_UpdatedPayloadContentDirPath}/${sv_PayloadContentName}")
          /usr/libexec/PlistBuddy -c "Delete ':PayloadRemovalDisallowed'" "${sv_UpdatedPayloadContentDirPath}/${sv_PayloadContentName}"
          touch -t $(date -r ${iv_PayloadContentEpoch} "+%Y%m%d%H%M.%S") "${sv_UpdatedPayloadContentDirPath}/${sv_PayloadContentName}"
        done
      fi
    fi

    # ---

    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Active/${sv_ObjectContext}/${sv_ObjectName}"
    chmod 755 "${LW_sv_SettingsDirPath}/Policies/Active/${sv_ObjectContext}/${sv_ObjectName}"

    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}"
    chmod 755 "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}"

    mkdir -p "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}"
    chmod 755 "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}"

    # ---

    # Here we decide what definitely needs to be uninstalled, and what needs to be verified

    cd "${LW_sv_ThisScriptTempDirPath}"

    # Get the src payload
    ls -1 "${sv_UpdatedPayloadContentDirPath}" > "${LW_sv_ThisScriptTempDirPath}/Policies-src.txt"

    # Get the dst (existing) payload
    ls -1 "${LW_sv_SettingsDirPath}/Policies/Active/${sv_ObjectContext}/${sv_ObjectName}" > "${LW_sv_ThisScriptTempDirPath}/Policies-dst.txt"

    # Build a list of payloads that are in src or dst, but not in both
    cat "${LW_sv_ThisScriptTempDirPath}/Policies-src.txt" "${LW_sv_ThisScriptTempDirPath}/Policies-dst.txt" | sort | uniq -u > "${LW_sv_ThisScriptTempDirPath}/Policies-uniq.txt"

    # Build a list of payloads unique to the dst (need to be uninstalled)
    cat "${LW_sv_ThisScriptTempDirPath}/Policies-uniq.txt" "${LW_sv_ThisScriptTempDirPath}/Policies-dst.txt" | sort | uniq -d > "${LW_sv_ThisScriptTempDirPath}/Policies-uninstall.txt"

    # Remove temp files
    rm -f "${LW_sv_ThisScriptTempDirPath}/Policies-src.txt"
    rm -f "${LW_sv_ThisScriptTempDirPath}/Policies-dst.txt"
    rm -f "${LW_sv_ThisScriptTempDirPath}/Policies-uniq.txt"

    # Update list of disabled policies (they still need to be uninstalled)
    cat "${LW_sv_ThisScriptTempDirPath}/Policies-uninstall.txt" | while read sv_PayloadFileName
    do
      ln -fh "${LW_sv_SettingsDirPath}/Policies/Active/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}" "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
      rm -f "${LW_sv_SettingsDirPath}/Policies/Active/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
    done

    # Update list of active policies (they still need to be verified)
    ls -1 "${sv_UpdatedPayloadContentDirPath}" | while read sv_PayloadFileName
    do
      ln -fh "${sv_UpdatedPayloadContentDirPath}/${sv_PayloadFileName}" "${LW_sv_SettingsDirPath}/Policies/Active/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
      ln -fh "${sv_UpdatedPayloadContentDirPath}/${sv_PayloadFileName}" "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
      rm -f "${sv_UpdatedPayloadContentDirPath}/${sv_PayloadFileName}"
    done
    
    LW_nf_SetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:Version" "${LW_sv_LabWardenVersion}"
    LW_nf_SetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" "${LW_iv_ThisScriptStartEpoch}"

  fi
  
fi

# This bit can be run as root or user

if test -e "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}"
then
  # uninstall payloads
  ls -1 "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}" | while read sv_PayloadFileName
  do
    sv_PayloadFileExt=$(echo "${sv_PayloadFileName}" | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
    
    sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/custom/${sv_PayloadFileExt}-uninstall"
    if ! test -e "${sv_HandlerFilePath}"
    then
      sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall"
      if ! test -e "${sv_HandlerFilePath}"
      then
        sv_HandlerFilePath=""
      fi
    fi

    if test -n "${sv_HandlerFilePath}"
    then
      LW_nf_logmessage "ATTENTION, uninstalling ${sv_PayloadFileName}"
      "${sv_HandlerFilePath}" "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}" "${sv_GPOuser}"
      if [ "$?" = "0" ]
      then
        rm -f "${LW_sv_SettingsDirPath}/Policies/Disable/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
      else
        LW_nf_logmessage "ERROR, failed to uninstall ${sv_PayloadFileName}"
      fi
    fi
  done
fi

if test -e "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}"
then
  # verify payloads
  ls -1 "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}" | while read sv_PayloadFileName
  do
    sv_PayloadFileExt=$(echo "${sv_PayloadFileName}" | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
    
    sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/custom/${sv_PayloadFileExt}-verify"
    if ! test -e "${sv_HandlerFilePath}"
    then
      sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-verify"
      if ! test -e "${sv_HandlerFilePath}"
      then
        sv_HandlerFilePath=""
      fi
    fi
    if test -n "${sv_HandlerFilePath}"
    then
      # Verify the payload
      "${sv_HandlerFilePath}" "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}" "${sv_GPOuser}"
      if [ "$?" = "0" ]
      then
        rm -f "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
        
      else
      
        sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/custom/${sv_PayloadFileExt}-uninstall"
        if ! test -e "${sv_HandlerFilePath}"
        then
          sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall"
          if ! test -e "${sv_HandlerFilePath}"
          then
            sv_HandlerFilePath=""
          fi
        fi
        if test -n "${sv_HandlerFilePath}"
        then
          # Uninstall the payload
          "${sv_HandlerFilePath}" "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}" "${sv_GPOuser}"

          sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/custom/${sv_PayloadFileExt}-install"
          if ! test -e "${sv_HandlerFilePath}"
          then
            sv_HandlerFilePath="/usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-install"
            if ! test -e "${sv_HandlerFilePath}"
            then
              sv_HandlerFilePath=""
            fi
          fi
          if test -n "${sv_HandlerFilePath}"
          then
            # Install the payload
            "${sv_HandlerFilePath}" "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}" "${sv_GPOuser}"
            if [ "$?" = "0" ]
            then
              rm -f "${LW_sv_SettingsDirPath}/Policies/Verify/${sv_ObjectContext}/${sv_ObjectName}/${sv_PayloadFileName}"
              
            else
              LW_nf_logmessage "ERROR, failed to install ${sv_PayloadFileName}"
              
            fi
          fi
        fi
      fi
    fi
  done
fi

# ---

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

exit 0
