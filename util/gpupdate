#!/bin/bash
#
# Short:    Utility Script - Perform a Group Policy update
# Author:   Mark J Swift
# Version:  1.0.90
# Modified: 01-Jul-2016
#
# Called as follows:    
#   gpupdate [<user>]
#
# Without a user specified, updates the group policies for the workstation.
# With a user, updates the group policies for the specified user.

# ---

sv_CodeVersion="1.0.90"

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

LW_nf_logmessage "NOTE, ${LW_sv_ThisScriptFileName} version ${sv_CodeVersion}"

# ---

if [ "${LW_sv_ThisUserName}" != "root" ]
then
  # we only like root
  LW_nf_QuickExit "ERROR, this script must be run with root privileges"
fi

if test -z "${LW_sv_NetworkServiceInterfaceName}"
then
  # we need a network
  LW_nf_QuickExit "ERROR, no network"
fi

if [ "${LW_sv_ADDomainNameDNS}" != "${LW_sv_NetworkServiceDHCPOption15}" ]
then
  LW_nf_QuickExit "ERROR, not on ${LW_sv_ADDomainNameFlat} network"
fi

# ---

Sf_ListGroups() # <Context> <ObjectName> - List object membership. Context can be Users, Computers or Groups.
{
  local sv_Context
  local sv_ObjectName
  local sv_NameDelim
  local sv_GroupName
  local sv_SubGroupName
  local iv_CacheEpoch

  sv_Context=${1}
  sv_ObjectName=${2}
  
  case "${sv_Context}" in
  Computers)
    sv_NameDelim="$"
    ;;

  Users|Groups)
    sv_NameDelim=""
    ;;
    
  *)
    exit 0
    ;;
    
  esac
  
  mkdir -p "${LW_sv_ConfigDirPath}/Cache/Membership"
  
  if test -e "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
  then
    iv_CacheEpoch=$(stat -f "%m" "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}")
    if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -gt $((${iv_GPCacheMaxAgeHours}*60*60)) ]
    then
      rm -f "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
    fi
  fi
  
  if ! test -e "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
  then
    touch "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
    dscl 2>/dev/null localhost -read "/Search/${sv_Context}/${sv_ObjectName}${sv_NameDelim}" memberOf | tr -d "\n" | sed "s|dsAttrTypeNative:memberOf:||;s| CN=|:|g;s|^:||" | tr ":" "\n" | cut -d"," -f1 | while read sv_GroupName
    do
      echo "${sv_GroupName}">>"${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
      Sf_ListGroups "Groups" "${sv_GroupName}" | while read sv_SubGroupName
      do
        if [ $(cat "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}" | grep -Ec "^${sv_SubGroupName}$") -eq 0 ]
        then
          echo "${sv_SubGroupName}">>"${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
        fi
      done
    done
  fi

  cat "${LW_sv_ConfigDirPath}/Cache/Membership/${sv_ObjectName}"
}

# ---

sv_GPOuser="${1}"

# ---

if test -n "${sv_GPOuser}"
then
  case "${sv_GPOuser}" in
  FLUSHCACHE)
    # Remove cached policies
    rm -fR "${LW_sv_ConfigDirPath}/Cache"
    
    # Remove temporary files
    srm -fR "${LW_sv_ThisScriptTempDirPath}"
    
    exit 0
    ;;
    
  USERS)
    while read sv_FolderDirPath
    do
      if test -d "${sv_FolderDirPath}"
      then
        sv_UserName="$(stat -f "%Su" "${sv_FolderDirPath}")"
        
        if test -e "${sv_FolderDirPath}/Library/Preferences/com.apple.finder.plist"
        then
          iv_LastUseEpoch=$(stat -f "%m" "${sv_FolderDirPath}/Library/Preferences/com.apple.finder.plist")
          if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_LastUseEpoch})) -lt $((2*31*24*60*60)) ]
          then
            LW_nf_logmessage "ATTENTION, auto-updating group policies for user '${sv_UserName}'"
            /usr/local/LabWarden/util/gpupdate "${sv_UserName}"
          
          else
            LW_nf_logmessage "NOTE, skipping auto-update of group policies for user '${sv_UserName}' (hasn't logged on for over 2 months)"
        
          fi
        
        else
          LW_nf_logmessage "NOTE, skipping auto-update of group policies for user '${sv_UserName}' (has never logged on)"
        
        fi
      
      fi
    done < <(find /Users \( -depth 1 -prune \) -and \( -type d \) -and \( ! -user root \))
    
    # Remove temporary files
    srm -fR "${LW_sv_ThisScriptTempDirPath}"

    exit 0
    ;;
    
  *)
    sv_ConfigDirPath="${LW_sv_ConfigDirPath}/${sv_GPOuser}"
    ;;
    
  esac
  
else
  sv_ConfigDirPath="${LW_sv_ConfigDirPath}/${LW_sv_ADComputerName}"
  
fi

# ---

if test -n "${sv_GPOuser}"
then
  dscl >/dev/null 2>&1 localhost -read /Search/Users/${sv_GPOuser} memberOf
  if [ "$?" != "0" ]
  then
    LW_nf_QuickExit "ERROR, cannot get user info from AD (maybe it hasn't connected yet)."
  fi
  sv_SemaphoreFilePath="${LW_sv_ThisUserTempDirPath}/.${LW_sv_ThisScriptFileName}-${sv_GPOuser}"
  
else
  dscl >/dev/null 2>&1 localhost -read /Search/Computers/${LW_sv_ADComputerName}$ memberOf
  if [ "$?" != "0" ]
  then
    LW_nf_QuickExit "ERROR, cannot get computer info from AD (maybe it hasn't connected yet)."
  fi
  sv_SemaphoreFilePath="${LW_sv_ThisUserTempDirPath}/.${LW_sv_ThisScriptFileName}-${LW_sv_ADComputerName}"

fi

# ---

# There might be a bit of mult-tasking going on - however we only want one task at a time updating individual policies

touch "${sv_SemaphoreFilePath}"
echo ${LW_iv_ThisScriptPID} >> "${sv_SemaphoreFilePath}"
iv_GPOScriptPID="$(cat "${sv_SemaphoreFilePath}" | head -n1)"

if [ "${iv_GPOScriptPID}" != "${LW_iv_ThisScriptPID}" ]
then
  # Another job is processing the policy update - so wait until its finished, then quit
  
  while [ -n "$(ps -p ${iv_GPOScriptPID} -o comm=)" ]
  do
    # we don't want to hog the CPU - so lets sleep a while
    sleep 1
  done
  
  rm -f "${sv_SemaphoreFilePath}"
  
  # Remove temporary files
  srm -fR "${LW_sv_ThisScriptTempDirPath}"

  exit 0
fi

# ---

mkdir -p "${sv_ConfigDirPath}"

if ! test -e "${sv_ConfigDirPath}/LabWarden.plist"
then
  # There's no config, so there shouldn't be any payloads
  rm -fR "${sv_ConfigDirPath}/ADPayload"
fi

mkdir -p "${sv_ConfigDirPath}/ADPayload"

# ---

LW_nf_SetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:Version" "${LW_sv_LabWardenVersion}"
LW_nf_SetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" "${LW_sv_ThisScriptStartEpoch}"

# ---

# Here we verify the already installed payloads
ls -1 "${sv_ConfigDirPath}/ADpayload" | while read sv_PayloadFileName
do
  sv_PayloadFileExt=$(echo ${sv_PayloadFileName} | sed 's|^[^\.]*\.||;s|\.|-|')
  if test -e /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-verify
  then
    /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-verify "${sv_ConfigDirPath}/ADpayload/${sv_PayloadFileName}" "${sv_GPOuser}"
    if [ "$?" != "0" ]
    then
      if test -e /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall
      then
        /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall "${sv_ConfigDirPath}/ADpayload/${sv_PayloadFileName}" "${sv_GPOuser}"
      fi
      rm -f "${sv_ConfigDirPath}/ADpayload/${sv_PayloadFileName}"
    fi
  fi
done

# ---

# Here we copy the relevant payloads from AD into a temporary folder - wherever possible, we do it from cache
mkdir -p "${LW_sv_ConfigDirPath}/Cache/Info"
cd "${LW_sv_ConfigDirPath}/Cache/Info"

# Check age of pre-existing split info files
ls -1 "${LW_sv_ConfigDirPath}/Cache/Info" | grep -E "\-[0-9]{1}.txt$" | sed -E "s|\.txt$||" | sort -u | while read sv_GroupName
do
  # If the companion joined file is too old, delete it and its split parts
  iv_CacheEpoch=$(stat -f "%m" "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt")
  if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -gt $((${iv_GPCacheMaxAgeHours}*60*60)) ]
  then
    rm -f "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    rm -f $(ls -1 "${LW_sv_ConfigDirPath}/Cache/Info" | grep -E "${sv_GroupName}-[0-9]{1}.txt$" | sort)
  fi
done

# Check age of normal info files
ls -1 "${LW_sv_ConfigDirPath}/Cache/Info" | grep -Ev "\-[0-9]{1}.txt$" | sed -E "s|\.txt$||" | sort -u | while read sv_GroupName
do
  # If the  file is too old, delete it
  iv_CacheEpoch=$(stat -f "%m" "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt")
  if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -gt $((${iv_GPCacheMaxAgeHours}*60*60)) ]
  then
    rm -f "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
  fi
done

# Read the AD payload from the Group notes field (info)
if test -n "${sv_GPOuser}"
then
  Sf_ListGroups "Users" "${sv_GPOuser}" | while read sv_GroupName
  do
    # Save group info to file

    if test -e "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    then
      iv_CacheEpoch=$(stat -f "%m" "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt")
      if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -gt $((${iv_GPCacheMaxAgeHours}*60*60)) ]
      then
        rm -f "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
      fi
    fi

    if ! test -e "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    then
      dscl 2>/dev/null localhost -read "/Search/Groups/${sv_GroupName}" info | sed "s|dsAttrTypeNative:info:||" | sed "s|^[ ]*||" | sed "s|[ ]*$||" | tr -s "\n" > "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
      touch -t $(date -r ${LW_sv_ThisScriptStartEpoch} "+%Y%m%d%H%M.%S") "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    fi
  done

else
  Sf_ListGroups "Computers" "${LW_sv_ADComputerName}" | while read sv_GroupName
  do
    # Save group info to file

    if test -e "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    then
      iv_CacheEpoch=$(stat -f "%m" "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt")
      if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -gt $((${iv_GPCacheMaxAgeHours}*60*60)) ]
      then
        rm -f "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
      fi
    fi

    if ! test -e "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    then
      dscl 2>/dev/null localhost -read "/Search/Groups/${sv_GroupName}" info | sed "s|dsAttrTypeNative:info:||" | sed "s|^[ ]*||" | sed "s|[ ]*$||" | tr -s "\n" > "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
      touch -t $(date -r ${LW_sv_ThisScriptStartEpoch} "+%Y%m%d%H%M.%S") "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    fi
  done
fi

# Join split group info
ls -1 "${LW_sv_ConfigDirPath}/Cache/Info" | grep -E "\-[0-9]{1}.txt$" | sed -E "s|(.*)(-[0-9]{1}.txt$)|\1|" | sort -u | while read sv_GroupName
do
  # If the joined file has a size of zero, create a new file from the split parts
  if ! test -s "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
  then
    cat $(ls -1 "${LW_sv_ConfigDirPath}/Cache/Info" | grep -E "${sv_GroupName}-[0-9]{1}.txt$" | sort) > "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
    touch -t $(date -r ${LW_sv_ThisScriptStartEpoch} "+%Y%m%d%H%M.%S") "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
  fi
done

# Unpack the payload(s)
mkdir -p "${LW_sv_ConfigDirPath}/Cache/Payload"
ls -1 "${LW_sv_ConfigDirPath}/Cache/Info" | grep -Ev "\-[0-9]{1}.txt$" | sed -E "s|\.txt$||" | sort -u | while read sv_GroupName
do
  # Check the age of any existing payload folders
  if test -e "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
  then
    iv_CacheEpoch=$(stat -f "%m" "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}")
    if [ $((${LW_sv_ThisScriptStartEpoch}-${iv_CacheEpoch})) -gt $((${iv_GPCacheMaxAgeHours}*60*60)) ]
    then
      rm -fR "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
    fi
  fi

  if test -s "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt"
  then
    if ! test -e "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
    then
      mkdir -p "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
      cd "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
      cat "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt" | base64 -D | tar -xvzf -
      if [ "$?" != "0" ]
      then
        LW_nf_logmessage "NOTE, the notes field on the AD group ${sv_GroupName} does not appear to be in a supported format"
        LW_nf_logmessage "$(cat "${LW_sv_ConfigDirPath}/Cache/Info/${sv_GroupName}.txt")"
      else
        touch -t $(date -r ${LW_sv_ThisScriptStartEpoch} "+%Y%m%d%H%M.%S") "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
      fi
    fi
  fi
done

# Copy Payloads to a temporary folder
mkdir -p "${LW_sv_ThisScriptTempDirPath}/ADpayload"

if test -n "${sv_GPOuser}"
then
  Sf_ListGroups "Users" "${sv_GPOuser}" | grep -Ev "\-[0-9]{1}$" | while read sv_GroupName
  do
    if test -e "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
    then
      cp -af "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}/" "${LW_sv_ThisScriptTempDirPath}/ADpayload"
    fi
  done

else
  Sf_ListGroups "Computers" "${LW_sv_ADComputerName}" | grep -Ev "\-[0-9]{1}$" | while read sv_GroupName
  do
    if test -e "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}"
    then
      cp -af "${LW_sv_ConfigDirPath}/Cache/Payload/${sv_GroupName}/" "${LW_sv_ThisScriptTempDirPath}/ADpayload"
    fi
  done
  
fi

# ---

# Here we decide what needs to be uninstalled, and what needs to be installed

cd "${LW_sv_ThisScriptTempDirPath}"

# Get the src payload
ls -1 "${LW_sv_ThisScriptTempDirPath}/ADpayload" > "${LW_sv_ThisScriptTempDirPath}/ADpayload-src.txt"

# Get the dst (existing) payload
ls -1 "${sv_ConfigDirPath}/ADPayload" > "${LW_sv_ThisScriptTempDirPath}/ADpayload-dst.txt"

# Build a list of payloads that are in both src and dst (need to be checked for differences before installation)
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-src.txt" "${LW_sv_ThisScriptTempDirPath}/ADpayload-dst.txt" | sort | uniq -d > "${LW_sv_ThisScriptTempDirPath}/ADpayload-replace.txt"

# Build a list of payloads that are in src or dst, but not in both
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-src.txt" "${LW_sv_ThisScriptTempDirPath}/ADpayload-dst.txt" | sort | uniq -u > "${LW_sv_ThisScriptTempDirPath}/ADpayload-uniq.txt"

# Build a list of payloads unique to the src (need to be installed)
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-uniq.txt" "${LW_sv_ThisScriptTempDirPath}/ADpayload-src.txt" | sort | uniq -d > "${LW_sv_ThisScriptTempDirPath}/ADpayload-install.txt"

# Build a list of payloads unique to the dst (need to be uninstalled)
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-uniq.txt" "${LW_sv_ThisScriptTempDirPath}/ADpayload-dst.txt" | sort | uniq -d > "${LW_sv_ThisScriptTempDirPath}/ADpayload-uninstall.txt"

# Remove temp files
rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload-src.txt"
rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload-dst.txt"
rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload-uniq.txt"

# If necessary, replace payloads that already exist
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-replace.txt" | while read sv_PayloadFileName
do
  iv_SrcFileEpoch=$(stat -f "%m" "${LW_sv_ThisScriptTempDirPath}/ADpayload/${sv_PayloadFileName}")
  iv_DstFileEpoch=$(stat -f "%m" "${sv_ConfigDirPath}/ADPayload/${sv_PayloadFileName}")
  if [ ${iv_SrcFileEpoch} -ne ${iv_DstFileEpoch} ]
  then
    # We need to uninstall then re-install this payload
    echo "${sv_PayloadFileName}" >> "${LW_sv_ThisScriptTempDirPath}/ADpayload-uninstall.txt"
    echo "${sv_PayloadFileName}" >> "${LW_sv_ThisScriptTempDirPath}/ADpayload-install.txt"
  else
    # The payload is not newer than the existing payload
    rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload/${sv_PayloadFileName}"
  fi
done
rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload-replace.txt"

# ---

# uninstall payloads
rm -fR "${sv_ConfigDirPath}/DelayedUninstall"
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-uninstall.txt" | while read sv_PayloadFileName
do
  sv_PayloadFileExt=$(echo "${sv_PayloadFileName}" | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
  if test -e /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall
  then
    /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall "${sv_ConfigDirPath}/ADPayload/${sv_PayloadFileName}" "${sv_GPOuser}"
    if [ "$?" = "0" ]
    then
      rm -f "${sv_ConfigDirPath}/ADPayload/${sv_PayloadFileName}"
    else
      mkdir -p "${sv_ConfigDirPath}/DelayedUninstall"
      mv "${LW_sv_ThisScriptTempDirPath}/ADpayload/${sv_PayloadFileName}" "${sv_ConfigDirPath}/DelayedUninstall/"

      if test -n "${sv_GPOuser}"
      then
        # The user will have to be able to delete the payload after install/uninstall
        chown -R "${sv_GPOuser}":admin "${sv_ConfigDirPath}/DelayedUninstall"
        chmod -R 770 "${sv_ConfigDirPath}/DelayedUninstall"
        
        # installing/uninstalling mobileconfigs for other users, is not supported prior to 10.11
        if [ "${sv_PayloadFileExt}" = "mobileconfig" ]
        then
          if [ ${LW_iv_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # The user will have to be able to uninstall the payload
            /usr/libexec/PlistBuddy -c "Delete ':PayloadRemovalDisallowed'" "${sv_ConfigDirPath}/DelayedUninstall/${sv_PayloadFileName}"
          fi
        fi
      fi
      
    fi
  fi
done
rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload-uninstall.txt"

# ---

# install payloads
rm -fR "${sv_ConfigDirPath}/DelayedInstall"
cat "${LW_sv_ThisScriptTempDirPath}/ADpayload-install.txt" | while read sv_PayloadFileName
do
  sv_PayloadFileExt=$(echo ${sv_PayloadFileName} | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
  if test -e /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-install
  then
    /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-install "${LW_sv_ThisScriptTempDirPath}/ADpayload/${sv_PayloadFileName}" "${sv_GPOuser}"
    if [ "$?" = "0" ]
    then
      mv "${LW_sv_ThisScriptTempDirPath}/ADpayload/${sv_PayloadFileName}" "${sv_ConfigDirPath}/ADPayload/"
    else
      mkdir -p "${sv_ConfigDirPath}/DelayedInstall"
      mv "${LW_sv_ThisScriptTempDirPath}/ADpayload/${sv_PayloadFileName}" "${sv_ConfigDirPath}/DelayedInstall/"

      if test -n "${sv_GPOuser}"
      then
        # The user will have to be able to delete the payload after install/uninstall
        chown -R "${sv_GPOuser}":admin "${sv_ConfigDirPath}/DelayedInstall"
        chmod -R 770 "${sv_ConfigDirPath}/DelayedInstall"
        
        # installing/uninstalling mobileconfigs for other users, is not supported prior to 10.11
        if [ "${sv_PayloadFileExt}" = "mobileconfig" ]
        then
          if [ ${LW_iv_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # The user will have to be able to uninstall the payload
            /usr/libexec/PlistBuddy -c "Delete ':PayloadRemovalDisallowed'" "${sv_ConfigDirPath}/DelayedInstall/${sv_PayloadFileName}"
          fi
        fi
      fi

    fi
  fi
done
rm -f "${LW_sv_ThisScriptTempDirPath}/ADpayload-install.txt"

# ---

# delete the remaining temporary files
rm -fR "${LW_sv_ThisScriptTempDirPath}/ADpayload"

# ---

# Release the semaphore
rm -f "${sv_SemaphoreFilePath}"

# Remove temporary files
srm -fR "${LW_sv_ThisScriptTempDirPath}"
