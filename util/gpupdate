#!/bin/bash
#
# Short:    Utility Script - Perform a Group Policy update
# Author:   Mark J Swift
# Version:  1.0.82
# Modified: 27-May-2016
#
# Called as follows:    
#   gpupdate [<user>]
#
# Without a user specified, updates the group policies for the workstation.
# With a user, updates the group policies for the specified user.

# ---

LCL_ScriptVersion="1.0.82"

# ---

# Take a note when this script started
LCL_MyStartEpoch=$(date -u "+%s")

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

f_logmessage "NOTE, ${GLB_ThisScriptName} version ${LCL_ScriptVersion}"

# ---

if [ "${GLB_ThisUserName}" != "root" ]
then
  # we only like root
  f_QuickExit "ERROR, this script must be run with root privileges"
fi

if test -z "${GLB_NetworkServiceInterfaceName}"
then
  # we need a network
  f_QuickExit "ERROR, no network"
fi

if [ "${GLB_ADDomainNameDNS}" != "${GLB_NetworkServiceDHCPOption15}" ]
then
  f_QuickExit "ERROR, not on ${GLB_ADDomainNameFlat} network"
fi

# ---

f_ListGroups() # <Context> <ObjectName> - List object membership. Context can be Users, Computers or Groups.
{
  local LCL_Context
  local LCL_ObjectName
  local LCL_NameDelim
  local LCL_GroupName
  local LCL_SubGroupName
  local LCL_CacheEpoch

  LCL_Context=${1}
  LCL_ObjectName=${2}
  
  case "${LCL_Context}" in
  Computers)
    LCL_NameDelim="$"
    ;;

  Users|Groups)
    LCL_NameDelim=""
    ;;
    
  *)
    exit 0
    ;;
    
  esac
  
  mkdir -p "${GLB_LabConfigDir}/Cache/Membership"
  
  if test -e "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
  then
    LCL_CacheEpoch=$(stat -f "%m" "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}")
    if [ $((${LCL_MyStartEpoch}-${LCL_CacheEpoch})) -gt $((${GLB_GPCacheMaxAgeHours}*60*60)) ]
    then
      rm -f "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
    fi
  fi
  
  if ! test -e "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
  then
    touch "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
    dscl 2>/dev/null localhost -read "/Search/${LCL_Context}/${LCL_ObjectName}${LCL_NameDelim}" memberOf | tr -d "\n" | sed "s|dsAttrTypeNative:memberOf:||;s| CN=|:|g;s|^:||" | tr ":" "\n" | cut -d"," -f1 | while read LCL_GroupName
    do
      echo "${LCL_GroupName}">>"${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
      f_ListGroups "Groups" "${LCL_GroupName}" | while read LCL_SubGroupName
      do
        if [ $(cat "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}" | grep -Ec "^${LCL_SubGroupName}$") -eq 0 ]
        then
          echo "${LCL_SubGroupName}">>"${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
        fi
      done
    done
  fi

  cat "${GLB_LabConfigDir}/Cache/Membership/${LCL_ObjectName}"
}

# ---

LCL_GPOuser="${1}"

# ---

if test -n "${LCL_GPOuser}"
then
  case "${LCL_GPOuser}" in
  FLUSHCACHE)
    # Remove cached policies
    rm -fR "${GLB_LabConfigDir}/Cache"
    
    # Remove temporary files
    rm -fR "${GLB_ThisScriptTempDir}"
    
    exit 0
    ;;
    
  USERS)
    while read LCL_UserFolder
    do
      if test -d "${LCL_UserFolder}"
      then
        LCL_User="$(stat -f "%Su" "${LCL_UserFolder}")"
        
        if test -e "${LCL_UserFolder}/Library/Preferences/com.apple.finder.plist"
        then
          LCL_LastUseEpoch=$(stat -f "%m" "${LCL_UserFolder}/Library/Preferences/com.apple.finder.plist")
          if [ $((${LCL_MyStartEpoch}-${LCL_LastUseEpoch})) -lt $((2*31*24*60*60)) ]
          then
            f_logmessage "ATTENTION, auto-updating group policies for user '${LCL_User}'"
            /usr/local/LabWarden/util/gpupdate "${LCL_User}"
          
          else
            f_logmessage "NOTE, skipping auto-update of group policies for user '${LCL_User}' (hasn't logged on for over 2 months)"
        
          fi
        
        else
          f_logmessage "NOTE, skipping auto-update of group policies for user '${LCL_User}' (has never logged on)"
        
        fi
      
      fi
    done < <(find /Users \( -depth 1 -prune \) -and \( -type d \) -and \( ! -user root \))
    
    # Remove temporary files
    rm -fR "${GLB_ThisScriptTempDir}"

    exit 0
    ;;
    
  *)
    LCL_ConfigDir="${GLB_LabConfigDir}/${LCL_GPOuser}"
    ;;
    
  esac
  
else
  LCL_ConfigDir="${GLB_LabConfigDir}/${GLB_ADComputerName}"
  
fi

# ---

if test -n "${LCL_GPOuser}"
then
  dscl >/dev/null 2>&1 localhost -read /Search/Users/${LCL_GPOuser} memberOf
  if [ "$?" != "0" ]
  then
    f_QuickExit "ERROR, cannot get user info from AD (maybe it hasn't connected yet)."
  fi
  LCL_SemaphoreFile="${GLB_ThisUserTempDir}/.${GLB_ThisScriptName}-${LCL_GPOuser}"
  
else
  dscl >/dev/null 2>&1 localhost -read /Search/Computers/${GLB_ADComputerName}$ memberOf
  if [ "$?" != "0" ]
  then
    f_QuickExit "ERROR, cannot get computer info from AD (maybe it hasn't connected yet)."
  fi
  LCL_SemaphoreFile="${GLB_ThisUserTempDir}/.${GLB_ThisScriptName}-${GLB_ADComputerName}"

fi

# ---

# There might be a bit of mult-tasking going on - however we only want one task at a time updating individual policies

touch "${LCL_SemaphoreFile}"
echo ${GLB_ThisScriptPID} >> "${LCL_SemaphoreFile}"
LCL_GPOScriptPID="$(cat "${LCL_SemaphoreFile}" | head -n1)"

if [ "${LCL_GPOScriptPID}" != "${GLB_ThisScriptPID}" ]
then
  # Another job is processing the policy update - so wait until its finished, then quit
  
  while [ -n "$(ps -p ${LCL_GPOScriptPID} -o comm=)" ]
  do
    # we don't want to hog the CPU - so lets sleep a while
    sleep 1
  done
  
  rm -f "${LCL_SemaphoreFile}"
  
  # Remove temporary files
  rm -fR "${GLB_ThisScriptTempDir}"

  exit 0
fi

# ---

mkdir -p "${LCL_ConfigDir}"

if ! test -e "${LCL_ConfigDir}/LabWarden.plist"
then
  # There's no config, so there shouldn't be any payloads
  rm -fR "${LCL_ConfigDir}/ADPayload"
fi

mkdir -p "${LCL_ConfigDir}/ADPayload"

# ---

f_SetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":LabWarden:LocalPrefs:Version" "${GLB_LabWardenVersion}"
f_SetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" "${LCL_MyStartEpoch}"

# ---

# Here we verify the already installed payloads
ls -1 "${LCL_ConfigDir}/ADpayload" | while read LCL_PayloadName
do
  LCL_PayloadExt=$(echo ${LCL_PayloadName} | sed 's|^[^\.]*\.||;s|\.|-|')
  if test -e /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-verify
  then
    /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-verify "${LCL_ConfigDir}/ADpayload/${LCL_PayloadName}" "${LCL_GPOuser}"
    if [ "$?" != "0" ]
    then
      if test -e /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-uninstall
      then
        /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-uninstall "${LCL_ConfigDir}/ADpayload/${LCL_PayloadName}" "${LCL_GPOuser}"
      fi
      rm -f "${LCL_ConfigDir}/ADpayload/${LCL_PayloadName}"
    fi
  fi
done

# ---

# Here we copy the relevant payloads from AD into a temporary folder - wherever possible, we do it from cache
mkdir -p "${GLB_LabConfigDir}/Cache/Info"
cd "${GLB_LabConfigDir}/Cache/Info"

# Check age of pre-existing split info files
ls -1 "${GLB_LabConfigDir}/Cache/Info" | grep -E "\-[0-9]{1}.txt$" | sed -E "s|\.txt$||" | sort -u | while read LCL_Group
do
  # If the companion joined file is too old, delete it and its split parts
  LCL_CacheEpoch=$(stat -f "%m" "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt")
  if [ $((${LCL_MyStartEpoch}-${LCL_CacheEpoch})) -gt $((${GLB_GPCacheMaxAgeHours}*60*60)) ]
  then
    rm -f "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    rm -f $(ls -1 "${GLB_LabConfigDir}/Cache/Info" | grep -E "${LCL_Group}-[0-9]{1}.txt$" | sort)
  fi
done

# Check age of normal info files
ls -1 "${GLB_LabConfigDir}/Cache/Info" | grep -Ev "\-[0-9]{1}.txt$" | sed -E "s|\.txt$||" | sort -u | while read LCL_Group
do
  # If the  file is too old, delete it
  LCL_CacheEpoch=$(stat -f "%m" "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt")
  if [ $((${LCL_MyStartEpoch}-${LCL_CacheEpoch})) -gt $((${GLB_GPCacheMaxAgeHours}*60*60)) ]
  then
    rm -f "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
  fi
done

# Read the AD payload from the Group notes field (info)
if test -n "${LCL_GPOuser}"
then
  f_ListGroups "Users" "${LCL_GPOuser}" | while read LCL_Group
  do
    # Save group info to file

    if test -e "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    then
      LCL_CacheEpoch=$(stat -f "%m" "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt")
      if [ $((${LCL_MyStartEpoch}-${LCL_CacheEpoch})) -gt $((${GLB_GPCacheMaxAgeHours}*60*60)) ]
      then
        rm -f "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
      fi
    fi

    if ! test -e "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    then
      dscl 2>/dev/null localhost -read "/Search/Groups/${LCL_Group}" info | sed "s|dsAttrTypeNative:info:||" | sed "s|^[ ]*||" | sed "s|[ ]*$||" | tr -s "\n" > "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
      touch -t $(date -r ${LCL_MyStartEpoch} "+%Y%m%d%H%M.%S") "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    fi
  done

else
  f_ListGroups "Computers" "${GLB_ADComputerName}" | while read LCL_Group
  do
    # Save group info to file

    if test -e "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    then
      LCL_CacheEpoch=$(stat -f "%m" "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt")
      if [ $((${LCL_MyStartEpoch}-${LCL_CacheEpoch})) -gt $((${GLB_GPCacheMaxAgeHours}*60*60)) ]
      then
        rm -f "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
      fi
    fi

    if ! test -e "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    then
      dscl 2>/dev/null localhost -read "/Search/Groups/${LCL_Group}" info | sed "s|dsAttrTypeNative:info:||" | sed "s|^[ ]*||" | sed "s|[ ]*$||" | tr -s "\n" > "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
      touch -t $(date -r ${LCL_MyStartEpoch} "+%Y%m%d%H%M.%S") "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    fi
  done
fi

# Join split group info
ls -1 "${GLB_LabConfigDir}/Cache/Info" | grep -E "\-[0-9]{1}.txt$" | sed -E "s|(.*)(-[0-9]{1}.txt$)|\1|" | sort -u | while read LCL_Group
do
  # If the joined file has a size of zero, create a new file from the split parts
  if ! test -s "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
  then
    cat $(ls -1 "${GLB_LabConfigDir}/Cache/Info" | grep -E "${LCL_Group}-[0-9]{1}.txt$" | sort) > "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
    touch -t $(date -r ${LCL_MyStartEpoch} "+%Y%m%d%H%M.%S") "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
  fi
done

# Unpack the payload(s)
mkdir -p "${GLB_LabConfigDir}/Cache/Payload"
ls -1 "${GLB_LabConfigDir}/Cache/Info" | grep -Ev "\-[0-9]{1}.txt$" | sed -E "s|\.txt$||" | sort -u | while read LCL_Group
do
  # Check the age of any existing payload folders
  if test -e "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
  then
    LCL_CacheEpoch=$(stat -f "%m" "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}")
    if [ $((${LCL_MyStartEpoch}-${LCL_CacheEpoch})) -gt $((${GLB_GPCacheMaxAgeHours}*60*60)) ]
    then
      rm -fR "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
    fi
  fi

  if test -s "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt"
  then
    if ! test -e "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
    then
      mkdir -p "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
      cd "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
      cat "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt" | base64 -D | tar -xvzf -
      if [ "$?" != "0" ]
      then
        f_logmessage "NOTE, the notes field on the AD group ${LCL_Group} does not appear to be in a supported format"
        f_logmessage "$(cat "${GLB_LabConfigDir}/Cache/Info/${LCL_Group}.txt")"
      else
        touch -t $(date -r ${LCL_MyStartEpoch} "+%Y%m%d%H%M.%S") "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
      fi
    fi
  fi
done

# Copy Payloads to a temporary folder
mkdir -p "${GLB_ThisScriptTempDir}/ADpayload"

if test -n "${LCL_GPOuser}"
then
  f_ListGroups "Users" "${LCL_GPOuser}" | grep -Ev "\-[0-9]{1}$" | while read LCL_Group
  do
    if test -e "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
    then
      cp -af "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}/" "${GLB_ThisScriptTempDir}/ADpayload"
    fi
  done

else
  f_ListGroups "Computers" "${GLB_ADComputerName}" | grep -Ev "\-[0-9]{1}$" | while read LCL_Group
  do
    if test -e "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}"
    then
      cp -af "${GLB_LabConfigDir}/Cache/Payload/${LCL_Group}/" "${GLB_ThisScriptTempDir}/ADpayload"
    fi
  done
  
fi

# ---

# Here we decide what needs to be uninstalled, and what needs to be installed

cd "${GLB_ThisScriptTempDir}"

# Get the src payload
ls -1 "${GLB_ThisScriptTempDir}/ADpayload" > "${GLB_ThisScriptTempDir}/ADpayload-src.txt"

# Get the dst (existing) payload
ls -1 "${LCL_ConfigDir}/ADPayload" > "${GLB_ThisScriptTempDir}/ADpayload-dst.txt"

# Build a list of payloads that are in both src and dst (need to be checked for differences before installation)
cat "${GLB_ThisScriptTempDir}/ADpayload-src.txt" "${GLB_ThisScriptTempDir}/ADpayload-dst.txt" | sort | uniq -d > "${GLB_ThisScriptTempDir}/ADpayload-replace.txt"

# Build a list of payloads that are in src or dst, but not in both
cat "${GLB_ThisScriptTempDir}/ADpayload-src.txt" "${GLB_ThisScriptTempDir}/ADpayload-dst.txt" | sort | uniq -u > "${GLB_ThisScriptTempDir}/ADpayload-uniq.txt"

# Build a list of payloads unique to the src (need to be installed)
cat "${GLB_ThisScriptTempDir}/ADpayload-uniq.txt" "${GLB_ThisScriptTempDir}/ADpayload-src.txt" | sort | uniq -d > "${GLB_ThisScriptTempDir}/ADpayload-install.txt"

# Build a list of payloads unique to the dst (need to be uninstalled)
cat "${GLB_ThisScriptTempDir}/ADpayload-uniq.txt" "${GLB_ThisScriptTempDir}/ADpayload-dst.txt" | sort | uniq -d > "${GLB_ThisScriptTempDir}/ADpayload-uninstall.txt"

# Remove temp files
rm -f "${GLB_ThisScriptTempDir}/ADpayload-src.txt"
rm -f "${GLB_ThisScriptTempDir}/ADpayload-dst.txt"
rm -f "${GLB_ThisScriptTempDir}/ADpayload-uniq.txt"

# If necessary, replace payloads that already exist
cat "${GLB_ThisScriptTempDir}/ADpayload-replace.txt" | while read LCL_PayloadName
do
  LCL_SrcEpoch=$(stat -f "%m" "${GLB_ThisScriptTempDir}/ADpayload/${LCL_PayloadName}")
  LCL_DstEpoch=$(stat -f "%m" "${LCL_ConfigDir}/ADPayload/${LCL_PayloadName}")
  if [ ${LCL_SrcEpoch} -ne ${LCL_DstEpoch} ]
  then
    # We need to uninstall then re-install this payload
    echo "${LCL_PayloadName}" >> "${GLB_ThisScriptTempDir}/ADpayload-uninstall.txt"
    echo "${LCL_PayloadName}" >> "${GLB_ThisScriptTempDir}/ADpayload-install.txt"
  else
    # The payload is not newer than the existing payload
    rm -f "${GLB_ThisScriptTempDir}/ADpayload/${LCL_PayloadName}"
  fi
done
rm -f "${GLB_ThisScriptTempDir}/ADpayload-replace.txt"

# ---

# uninstall payloads
rm -fR "${LCL_ConfigDir}/DelayedUninstall"
cat "${GLB_ThisScriptTempDir}/ADpayload-uninstall.txt" | while read LCL_PayloadName
do
  LCL_PayloadExt=$(echo "${LCL_PayloadName}" | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
  if test -e /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-uninstall
  then
    /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-uninstall "${LCL_ConfigDir}/ADPayload/${LCL_PayloadName}" "${LCL_GPOuser}"
    if [ "$?" = "0" ]
    then
      rm -f "${LCL_ConfigDir}/ADPayload/${LCL_PayloadName}"
    else
      mkdir -p "${LCL_ConfigDir}/DelayedUninstall"
      mv "${GLB_ThisScriptTempDir}/ADpayload/${LCL_PayloadName}" "${LCL_ConfigDir}/DelayedUninstall/"

      if test -n "${LCL_GPOuser}"
      then
        # The user will have to be able to delete the payload after install/uninstall
        chown -R "${LCL_GPOuser}":admin "${LCL_ConfigDir}/DelayedUninstall"
        chmod -R 770 "${LCL_ConfigDir}/DelayedUninstall"
        
        # installing/uninstalling mobileconfigs for other users, is not supported prior to 10.11
        if [ "${LCL_PayloadExt}" = "mobileconfig" ]
        then
          if [ ${GLB_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # The user will have to be able to uninstall the payload
            /usr/libexec/PlistBuddy -c "Delete ':PayloadRemovalDisallowed'" "${LCL_ConfigDir}/DelayedUninstall/${LCL_PayloadName}"
          fi
        fi
      fi
      
    fi
  fi
done
rm -f "${GLB_ThisScriptTempDir}/ADpayload-uninstall.txt"

# ---

# install payloads
rm -fR "${LCL_ConfigDir}/DelayedInstall"
cat "${GLB_ThisScriptTempDir}/ADpayload-install.txt" | while read LCL_PayloadName
do
  LCL_PayloadExt=$(echo ${LCL_PayloadName} | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
  if test -e /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-install
  then
    /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-install "${GLB_ThisScriptTempDir}/ADpayload/${LCL_PayloadName}" "${LCL_GPOuser}"
    if [ "$?" = "0" ]
    then
      mv "${GLB_ThisScriptTempDir}/ADpayload/${LCL_PayloadName}" "${LCL_ConfigDir}/ADPayload/"
    else
      mkdir -p "${LCL_ConfigDir}/DelayedInstall"
      mv "${GLB_ThisScriptTempDir}/ADpayload/${LCL_PayloadName}" "${LCL_ConfigDir}/DelayedInstall/"

      if test -n "${LCL_GPOuser}"
      then
        # The user will have to be able to delete the payload after install/uninstall
        chown -R "${LCL_GPOuser}":admin "${LCL_ConfigDir}/DelayedInstall"
        chmod -R 770 "${LCL_ConfigDir}/DelayedInstall"
        
        # installing/uninstalling mobileconfigs for other users, is not supported prior to 10.11
        if [ "${LCL_PayloadExt}" = "mobileconfig" ]
        then
          if [ ${GLB_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # The user will have to be able to uninstall the payload
            /usr/libexec/PlistBuddy -c "Delete ':PayloadRemovalDisallowed'" "${LCL_ConfigDir}/DelayedInstall/${LCL_PayloadName}"
          fi
        fi
      fi

    fi
  fi
done
rm -f "${GLB_ThisScriptTempDir}/ADpayload-install.txt"

# ---

# delete the remaining temporary files
rm -fR "${GLB_ThisScriptTempDir}/ADpayload"

# ---

# Release the semaphore
rm -f "${LCL_SemaphoreFile}"

# Remove temporary files
rm -fR "${GLB_ThisScriptTempDir}"
