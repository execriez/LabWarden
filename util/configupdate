#!/bin/bash
#
# Short:    Utility Script - Update configs from installed mobileconfigs
# Author:   Mark J Swift
# Version:  2.0.18
# Modified: 11-Oct-2017
#
# Called as follows:    
#   configupdate [<user>]
#
# Without a user specified, updates the workstation config.
# With a user, updates the config for the specified user.

# ---

sv_CodeVersion="2.0.18"

# ---

# Load the library, only if it is not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Common.sh
fi

# ---

# Here we start for real

# ---

if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  exit 0
fi

# ---

sv_UserName=${1}

if test -z "${sv_UserName}"
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "${GLB_sv_ThisScriptFileName} (version ${sv_CodeVersion})"
  
  # Grab  lock
  if [ $(GLB_bf_GrabNamedLock "${GLB_sv_ThisScriptFileName}") = "false" ]
  then
    GLB_nf_QuickExit "'${GLB_sv_ThisScriptFileName}' aborted. Another instance is already running ."
  fi
  
else
  GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "${GLB_sv_ThisScriptFileName} '${sv_UserName}'  (version ${sv_CodeVersion})"
  
  # Grab  lock
  if [ $(GLB_bf_GrabNamedLock "${GLB_sv_ThisScriptFileName}-${sv_UserName}") = "false" ]
  then
    GLB_nf_QuickExit "'${GLB_sv_ThisScriptFileName}' '${sv_UserName}' aborted. Another instance is already running ."
  fi
fi

# ---

# If a config has never been set up for this workstation, create base folders and set access rights
if ! test -e "${GLB_sv_ProjectConfigDirPath}/Config"
then
  # Create base folders
  mkdir -p "${GLB_sv_ProjectConfigDirPath}/Config/Global"
  mkdir -p "${GLB_sv_ProjectConfigDirPath}/Config/Computers"
  mkdir -p "${GLB_sv_ProjectConfigDirPath}/Config/Users"
    
  # Set access rights
  chown -R root:wheel "${GLB_sv_ProjectConfigDirPath}"
  chmod -R 755 "${GLB_sv_ProjectConfigDirPath}"
fi

# ---

if test -n "${sv_UserName}"
then
  sv_ObjectContext="Users"
  sv_ObjectName="${sv_UserName}"

else
  sv_ObjectContext="Computers"
  sv_ObjectName="${GLB_sv_Hostname}"
  
fi
 
sv_ConfigDirPath="${GLB_sv_ProjectConfigDirPath}/Config/${sv_ObjectContext}/${sv_ObjectName}"

# --- now check that the config files exist and have the correct privs

sv_ConfigTmpDirPath="${GLB_sv_ThisScriptTempDirPath}/${sv_ObjectName}/Config"
mkdir -p "${sv_ConfigTmpDirPath}"

sv_EventsFileName="LabWarden-Events.plist"
sv_KnownProfilesFileName="LabWarden-KnownProfiles.txt"

sv_EventsFilePath="${sv_ConfigDirPath}/${sv_EventsFileName}"

# ---

# If the events plist exists, and has a size of zero - something has gone wrong - so rebuild from scratch
if test -f "${sv_EventsFilePath}"
then
  if ! test -s "${sv_EventsFilePath}"
  then
    rm -fR "${sv_ConfigDirPath}"
    GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "File possibly corrupt '${sv_ConfigDirPath}' - rebuilding..."
  fi
fi

if ! test -e "${sv_ConfigDirPath}"
then
  mkdir -p "${sv_ConfigDirPath}"
  chown -R root:wheel "${sv_ConfigDirPath}"
  chmod -R 755 "${sv_ConfigDirPath}"
fi

if ! test -e "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}"
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Creating empty '${sv_ConfigDirPath}/${sv_KnownProfilesFileName}'"
  touch "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}"
fi

if ! test -e "${sv_EventsFilePath}"
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Creating empty '${sv_EventsFilePath}'"
  /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Save" "${sv_EventsFilePath}"
fi

# Fix possible access issues
chown root:wheel "${sv_EventsFilePath}"
chmod 755 "${sv_EventsFilePath}"

# --- make sure the managed prefs files exists and wait a short time (2 secs) until there are no more updates

sv_ManagedPrefsFilePath="/Library/Managed Preferences/${GLB_sv_ProjectSignature}.plist"
if [ ! -e "${sv_ManagedPrefsFilePath}" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Creating empty '${sv_ManagedPrefsFilePath}'"
  /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Save" "${sv_ManagedPrefsFilePath}"
  chown root:wheel "${sv_ManagedPrefsFilePath}"
  chmod 644
fi

# Wait until there hasn't been a change to the managed pref file for a short time
while [ $(($(date -u "+%s")-$(stat -f "%m" "${sv_ManagedPrefsFilePath}"))) -le 2 ]
do
  sleep 1
done

# --- now strip the configs from the installed mobileconfigs
  
bv_CheckConfig="true"

while [ "${bv_CheckConfig}" = "true" ]
do
  bv_CheckConfig="false"
  
  if [ "${sv_ObjectContext}" = "Computers" ]
  then
    profiles -L | grep "profileIdentifier:" | cut -d" " -f 4- | sort -u > "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt"
    sv_TopLevelKeyName="_computerlevel"

  else
    profiles -L -U ${sv_ObjectName} | grep "profileIdentifier:" | cut -d" " -f 4- | sort -u > "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt"
    sv_TopLevelKeyName=${sv_ObjectName}

  fi

  cat "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}" | sort -u > "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"

  diff "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt" | grep -E "^> " | cut -d" " -f2 > "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt"
  diff "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt" | grep -E "^< " | cut -d" " -f2 > "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"

  #echo "ALREADY INSTALLED"
  #cat "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"

  #echo "INSTALL THESE"
  #cat "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt"

  #echo "UNINSTALL THESE"
  #cat "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"


  if [ -s "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt" ]
  then
    bv_CheckConfig="true"

    while read sv_ProfileIdentifier
    do
      GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Removing config for profile ${sv_ProfileIdentifier}"
    
      # Remove profile entry from Installed Profiles list
      if test -s "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}"
      then
        cat "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}" | grep -v "${sv_ProfileIdentifier}" > "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"
        cp -f "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}"
      fi
    
      # Remove payload entries from events plist
      if test -f "${sv_ConfigDirPath}/${sv_ProfileIdentifier}.txt"
      then
        while read sv_PayloadUUID
        do
          GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Removing config for payload ${sv_PayloadUUID}"
          if test -f "${sv_EventsFilePath}"
          then
            cat "${sv_EventsFilePath}" | grep -v "${sv_PayloadUUID}" > "${sv_ConfigTmpDirPath}/${sv_EventsFileName}"
            cp -f "${sv_ConfigTmpDirPath}/${sv_EventsFileName}" "${sv_EventsFilePath}"
            chown root:wheel "${sv_EventsFilePath}"
    		chmod 755 "${sv_EventsFilePath}"
          fi
          sv_ConfigFilePath="${sv_ConfigDirPath}/${sv_PayloadUUID}.plist"
        
          sv_PolicyFilePath=$(GLB_sf_PolicyFilePath "${sv_ConfigFilePath}" "${sv_PayloadUUID}")
          if test -n "${sv_PolicyFilePath}"
          then

            if [ "${sv_ObjectContext}" = "Computers" ]
            then

              # Call Policy script passing an "Sys-PolicyUninstall" event - wait for policy to finish before continuing (don't run in background)
              GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing: '${sv_PolicyFilePath}' '${sv_ConfigFilePath}' '${sv_PayloadUUID}' '${GLB_sv_ThisScriptFileName}:Sys-PolicyUninstall' '${GLB_sv_LoggedInUserName}' ''"
              "${sv_PolicyFilePath}" "${sv_ConfigFilePath}" "${sv_PayloadUUID}" "${GLB_sv_ThisScriptFileName}:Sys-PolicyUninstall" "${GLB_sv_LoggedInUserName}" ""

              who -q | grep -Ev "^#" | grep -Ev "^root$" | tr " " "\n" | sort -u | grep -Ev "^$" | while read sv_UserName
              do
                GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing: '${sv_PolicyFilePath}' '${sv_ConfigFilePath}' '${sv_PayloadUUID}' '${GLB_sv_ThisScriptFileName}:Usr-PolicyUninstall' '${sv_UserName}' ''"
                # Call Policy script as user passing an "Usr-PolicyUninstall" event - wait for policy to finish before continuing (don't run in background)
                sudo -u "${sv_UserName}" "${sv_PolicyFilePath}" "${sv_ConfigFilePath}" "${sv_PayloadUUID}" "${GLB_sv_ThisScriptFileName}:Usr-PolicyUninstall" "${sv_UserName}" ""
              done
              sv_UserName=""
            
            else

              GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing: '${sv_PolicyFilePath}' '${sv_ConfigFilePath}' '${sv_PayloadUUID}' '${GLB_sv_ThisScriptFileName}:Usr-PolicyUninstall' '${sv_ObjectName}' ''"
              # Call Policy script as user passing an "Usr-PolicyUninstall" event - wait for policy to finish before continuing (don't run in background)
              sudo -u "${sv_ObjectName}" "${sv_PolicyFilePath}" "${sv_ConfigFilePath}" "${sv_PayloadUUID}" "${GLB_sv_ThisScriptFileName}:Usr-PolicyUninstall" "${sv_ObjectName}" ""

            fi
          fi

          # Delete config
          rm -f "${sv_ConfigFilePath}"
        done < "${sv_ConfigDirPath}/${sv_ProfileIdentifier}.txt"
      
        # Delete identifier payload list
        rm -f "${sv_ConfigDirPath}/${sv_ProfileIdentifier}.txt"
      fi
    
    done < "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"
  fi

  if [ -s "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt" ]
  then
    bv_CheckConfig="true"

    sv_ProfilesFilePath="${sv_ConfigTmpDirPath}/object.xml"
    rm -f "${sv_ProfilesFilePath}"
    rm -f "${sv_ProfilesFilePath}.plist"

    if [ "${sv_ObjectContext}" = "Computers" ]
    then
      profiles -Lv -o "${sv_ProfilesFilePath}"

    else
      profiles -Lv -U ${sv_ObjectName} -o "${sv_ProfilesFilePath}"

    fi
    
    # Bug fix for early versions of the profiles command that add .plist to the end of the supplied filename
    if [ -f "${sv_ProfilesFilePath}.plist" ]
    then
      sv_ProfilesFilePath="${sv_ProfilesFilePath}.plist"
    fi

    iv_TopLevelKeyCount=$(GLB_if_GetPlistArraySize ${sv_ProfilesFilePath} ":${sv_TopLevelKeyName}")

    for (( iv_LoopCount1=0; iv_LoopCount1<${iv_TopLevelKeyCount}; iv_LoopCount1++ ))
    do
      sv_ProfileIdentifier="$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileIdentifier'" "${sv_ProfilesFilePath}")"

      if test -n "$(cat "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt" | grep "${sv_ProfileIdentifier}")"
      then

        GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Processing mobileconfig '${sv_ProfileIdentifier}' for config payloads"

        bv_configOK="true"
    
        sv_ProfileDisplayName="$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileDisplayName'" "${sv_ProfilesFilePath}")"

        if test -n "$(echo ${sv_ProfileDisplayName} | grep -E "^${GLB_sv_ProjectInitials} ")"
        then
          iv_ProfileItemsCount=$(GLB_if_GetPlistArraySize ${sv_ProfilesFilePath} ":${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems")

          for (( iv_LoopCount2=0; iv_LoopCount2<${iv_ProfileItemsCount}; iv_LoopCount2++ ))
          do
            sv_PayloadType=$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems:${iv_LoopCount2}:PayloadType'" ${sv_ProfilesFilePath})
#            if [ "${sv_PayloadType}" = "${GLB_sv_ProjectSignature}" ] # Will re-introduce this at some point, but at the moment case doesn't matter       
            if test -n "$(echo "${sv_PayloadType}" | grep -iE "^${GLB_sv_ProjectSignature}$")"        
            then
              sv_PayloadUUID=$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems:${iv_LoopCount2}:PayloadUUID'" ${sv_ProfilesFilePath})

              GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Installing config for payload '${sv_PayloadUUID}'"

              sv_ConfigFilePath="${sv_ConfigDirPath}/${sv_PayloadUUID}.plist"
        
              if ! test -f "${sv_ConfigFilePath}"
              then
        
                /usr/libexec/PlistBuddy 2>/dev/null -x -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems:${iv_LoopCount2}:PayloadContent'" ${sv_ProfilesFilePath} >"${sv_ConfigFilePath}"

                if test -f "${sv_ConfigFilePath}"
                then
                  iv_TriggeredByItemsCount=$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_PayloadUUID}:TriggeredBy")
                  for (( iv_LoopCount3=0; iv_LoopCount3<${iv_TriggeredByItemsCount}; iv_LoopCount3++ ))
                  do

                    sv_TriggeredByEventName=$(GLB_sf_GetPlistProperty "${sv_ConfigFilePath}" ":${sv_PayloadUUID}:TriggeredBy:${iv_LoopCount3}")
                    if test -n "${sv_TriggeredByEventName}"
                    then
                      # Create object
                      /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}'" "${sv_EventsFilePath}"
                      if [ $? -ne 0 ]
                      then
                        # Add a new object
                        /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}' dict" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Failed to Add dict ':${sv_TriggeredByEventName}' to '${sv_EventsFilePath}'"
                          bv_configOK="false"
                          break 2
                        fi
                      fi

                      # Create array
                      /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}:DoesTrigger'" "${sv_EventsFilePath}"
                      if [ $? -ne 0 ]
                      then
                        # Add a new object
                        /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}:DoesTrigger' array" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          GLB_nf_logmessage ${GLB_iv_MsgLevelErr}  "Failed to Add dict ':${sv_TriggeredByEventName}:DoesTrigger' to '${sv_EventsFilePath}'"
                          bv_configOK="false"
                          break 2
                        fi
                      fi
            
                      iv_DoesTriggerCount="$(GLB_if_GetPlistArraySize "${sv_ConfigFilePath}" ":${sv_TriggeredByEventName}:DoesTrigger")"

                      if test -z "$(/usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}:DoesTrigger'" "${sv_EventsFilePath}" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | grep -E "^${sv_PayloadUUID}$")"
                      then
                        /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' string" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Failed to Add array entry ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' to '${sv_EventsFilePath}'"
                          bv_configOK="false"
                          break 2
                        fi
            
                        # Set array Value    
                        /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Set ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' '${sv_PayloadUUID}'" "${sv_EventsFilePath}"
            
                      fi

                    fi

                  done
          
                fi
              fi
        
              echo "${sv_PayloadUUID}" >> "${sv_ConfigDirPath}/${sv_ProfileIdentifier}.txt"
       
              sv_PolicyFilePath=$(GLB_sf_PolicyFilePath "${sv_ConfigFilePath}" "${sv_PayloadUUID}")
              if test -n "${sv_PolicyFilePath}"
              then
              
                if [ "${sv_ObjectContext}" = "Computers" ]
                then

                  # Call Policy script passing an "Sys-PolicyInstall" event - wait for policy to finish before continuing (don't run in background)
                  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing: '${sv_PolicyFilePath}' '${sv_ConfigFilePath}' '${sv_PayloadUUID}' '${GLB_sv_ThisScriptFileName}:Sys-PolicyInstall' '${GLB_sv_LoggedInUserName}' ''"
                  "${sv_PolicyFilePath}" "${sv_ConfigFilePath}" "${sv_PayloadUUID}" "${GLB_sv_ThisScriptFileName}:Sys-PolicyInstall" "${GLB_sv_LoggedInUserName}" ""

                  who -q | grep -Ev "^#" | grep -Ev "^root$" | tr " " "\n" | sort -u | grep -Ev "^$" | while read sv_UserName
                  do
                    GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing: '${sv_PolicyFilePath}' '${sv_ConfigFilePath}' '${sv_PayloadUUID}' '${GLB_sv_ThisScriptFileName}:Usr-PolicyInstall' '${sv_UserName}' ''"
                    # Call Policy script as user passing an "Usr-PolicyInstall" event - wait for policy to finish before continuing (don't run in background)
                    sudo -u "${sv_UserName}" "${sv_PolicyFilePath}" "${sv_ConfigFilePath}" "${sv_PayloadUUID}" "${GLB_sv_ThisScriptFileName}:Usr-PolicyInstall" "${sv_UserName}" ""
                  done
                  sv_UserName=""
            
                else

                  GLB_nf_logmessage ${GLB_iv_MsgLevelDebug} "Executing: '${sv_PolicyFilePath}' '${sv_ConfigFilePath}' '${sv_PayloadUUID}' '${GLB_sv_ThisScriptFileName}:Usr-PolicyInstall' '${sv_ObjectName}' ''"
                  # Call Policy script as user passing an "Usr-PolicyInstall" event - wait for policy to finish before continuing (don't run in background)
                  sudo -u "${sv_ObjectName}" "${sv_PolicyFilePath}" "${sv_ConfigFilePath}" "${sv_PayloadUUID}" "${GLB_sv_ThisScriptFileName}:Usr-PolicyInstall" "${sv_ObjectName}" ""

                fi
              fi

            fi
          done
        fi

        if [ "${bv_configOK}" = "true" ]
        then
          echo "${sv_ProfileIdentifier}" >> "${sv_ConfigDirPath}/${sv_KnownProfilesFileName}"
      
        else
          rm -f "${sv_ConfigDirPath}/${sv_ProfileIdentifier}.txt"
          GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Failed to install config for profile '${sv_ProfileIdentifier}'"
      
        fi
    
      fi
    done

  fi

done

# ---

# Release configupdate lock

if test -z "${sv_UserName}"
then
  # Release lock
  GLB_nf_ReleaseNamedLock "${GLB_sv_ThisScriptFileName}"
  
else
  # Release lock
  GLB_nf_ReleaseNamedLock "${GLB_sv_ThisScriptFileName}-${sv_UserName}"
  
fi

# ---

GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "'${GLB_sv_ThisScriptFileName}' complete"

# ---

# Remove temporary files
rm -fPR "${GLB_sv_ThisScriptTempDirPath}"

exit 0
