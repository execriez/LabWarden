#!/bin/bash
#
# Short:    Utility Script - Perform a maintenance action (workstation update)
# Author:   Mark J Swift
# Version:  1.0.90
# Modified: 01-Jul-2016
#
# Called as follows:    
#   /usr/local/LabWarden/util/Maintenance

# Reads the software update method from the maintenance settings
# then calls the appropriate update script. Afterwards it performs a gpupdate.
#
# Convenient when you want to perform a manual software update.

# ---

sv_CodeVersion="1.0.90"

# ---

# Get filename of this script
sv_ThisScriptFileName="$(basename "${0}")"

# ---

# Get user name
sv_ThisUserName="$(whoami)"

if [ "${sv_ThisUserName}" != "root" ]
then
  # we only like root
  exit 0
fi

# ---

# If we are not running from a remote shell, and iHook is available - then use it
if test -z "$(who am i | grep -E ".*\([^(]*\)$")"
then
  if test -e "/usr/local/labwarden/bin/iHook.app/Contents/MacOS/iHook"
  then
    iv_MyParentProcess="$(ps -o comm= $PPID | tr "/" "\n" | tail -n1)"
    if [ "${iv_MyParentProcess}" != "iHook" ]
    then
      /usr/local/labwarden/bin/iHook.app/Contents/MacOS/iHook --no-titlebar --script="${0}"
      exit 0
    else
      echo "%WINDOWSIZE 640 456"
      if test -f "/usr/local/labwarden/images/${sv_ThisScriptFileName}.jpg"
      then
        echo "%BACKGROUND /usr/local/labwarden/images/${sv_ThisScriptFileName}.jpg"
        echo "%TEXTCOLOR WHITE"
      fi
      echo "%UIMODE AUTOCRATIC"
      echo "%WINDOWZOOM DISABLE"
      echo "%SHOWTIMER"
      echo "%TITLE ${sv_ThisScriptFileName}"
    fi
  fi
fi

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

LW_nf_logmessage "ATTENTION, running ${LW_sv_ThisScriptFileName} version ${sv_CodeVersion}"

# ---

# Get policy name (Name of this script)
sv_PolicyName="${LW_sv_ThisScriptName}"

# Where we find the config
sv_ConfigDirPath="${LW_sv_ConfigDirPath}/${LW_sv_ADComputerName}"

# ---

iv_UpdateArgCount="$(LW_if_GetPlistArraySize "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:UpdateMethodArguments")"
if [ ${iv_UpdateArgCount} -eq 0 ]
then
  LW_nf_logmessage "ATTENTION, there are no defined update arguments."

else
  sv_UpdateExeURI="$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:UpdateMethodArguments:0")"
  sv_UpdateExeFilePath=$(LW_sf_ResolveFilename "${sv_UpdateExeURI}")
  if test -z "${sv_UpdateExeFilePath}"
  then
    # Its possible that we are assuming the lib directory
    sv_UpdateExeFilePath="/usr/local/LabWarden/lib/${sv_UpdateExeURI}"
  fi
  if !test -e "${sv_UpdateExeFilePath}"
  then
    LW_nf_logmessage "ATTENTION, update script does not exist (${sv_UpdateExeFilePath})"

  else
    if !test -x "${sv_UpdateExeFilePath}"
    then
      chown root:wheel "${sv_UpdateExeFilePath}"
      chmod u+x "${sv_UpdateExeFilePath}"
    fi
    for (( iv_UpdateArgIndex=1; iv_UpdateArgIndex<${iv_UpdateArgCount}; iv_UpdateArgIndex++ ))
    do
      sv_UpdateExeFilePath="${sv_UpdateExeFilePath} '""$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":${sv_PolicyName}:Config:UpdateMethodArguments:${iv_UpdateArgIndex}")""'"
    done

    # Do a software update
    LW_nf_logmessage "ATTENTION, updating workstation software (${sv_UpdateExeFilePath})"
    eval "${sv_UpdateExeFilePath}" | tee -a "${LW_sv_ThisUserLogDirPath}/LabWarden.log"
  fi
fi

# Take a note of when we ran the maintenance
LW_nf_SetPlistProperty "${LW_sv_ThisUserPrefDirPath}/LabWarden.plist" ":${sv_PolicyName}:LocalPrefs:LastMaintenanceEpoch" "${LW_sv_ThisScriptStartEpoch}"

sv_ADpath=$(dscl 2>/dev/null localhost -read "/Search/Computers/${LW_sv_ADTrustAccount}" distinguishedName | sed 's|[^,]*=||g;s|,|\.|g;s|\.'${LW_sv_ADDomainNameDNS}'||g;s|\.|,|g' | cut -d',' -f2-)
if test -n "${sv_ADpath}"
then
  # Update the loginWindow Text
  sv_LoginWindowText="$(echo ${LW_sv_ADTrustAccount} | sed "s|\$$||"):$(echo ${sv_ADpath} | sed "s|,| - |g")"
  sv_LoginWindowText=$(echo "${sv_LoginWindowText}" | tr ":" "\n")
  /usr/bin/defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText -string "${sv_LoginWindowText}"

  # Update the RemoteDesktop Computer Info Fields #1-3
  /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -computerinfo -set1 -1 "$(echo "${sv_ADpath}" | cut -d"," -f1)" -set2 -2 "$(echo "${sv_ADpath}" | cut -d"," -f2)" -set3 -3 "$(echo "${sv_ADpath}" | cut -d"," -f3-)"
fi

# Flush any cached group policy info
LW_nf_logmessage "ATTENTION, flushing group policies (via gpupdate)."
/usr/local/LabWarden/util/gpupdate "FLUSHCACHE"
 
# Do a workstation group policy update
LW_nf_logmessage "ATTENTION, updating workstation group policies (via gpupdate)."
/usr/local/LabWarden/util/gpupdate
 
# Do a user group policy update
LW_nf_logmessage "ATTENTION, updating user group policies for all users (via gpupdate)."
/usr/local/LabWarden/util/gpupdate "USERS"
 
LW_nf_logmessage "NOTE, we should reboot now"

# Remove temporary files
srm -fR "${LW_sv_ThisScriptTempDirPath}"
