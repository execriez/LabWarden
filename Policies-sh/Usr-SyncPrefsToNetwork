#!/bin/bash
#
# Short:    Usr Policy script - Syncs specified folders from the users local home to network home
# Author:   Mark J Swift
# Version:  3.3.0
# Modified: 22-May-2022
#
# Triggered by the following events:
#   Usr-VolDidMount (as user)
#   Usr-Poll        (as user)
#
# Called as follows:    
#   Usr-SyncPrefsToNetwork <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" = "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.3.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST=""

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.

# ---

nf_SyncFiles() # Src Dst
{
  local sv_SrcDirPath
  local sv_DstDirPath

  sv_SrcDirPath="${1}"
  sv_DstDirPath="${2}"
      
  if [ -e "${sv_SrcDirPath}" ]
  then
    # Source exists
    if [ -d "${sv_SrcDirPath}" ]
    then
      # Sync directory
      if [ -n "$(ls -A1 "${sv_SrcDirPath}" | grep -Ev "^.DS_Store$|^.localized$")" ]
      then
        # Only sync if the source dir is not empty
        mkdir -p "${sv_DstDirPath}"
        # Remove any "com.apple.FinderInfo" xattr attribute
        while read sv_FilePath
        do
          if test -n "$(ls -ld@ "${sv_FilePath}" | grep -E '\tcom.apple.FinderInfo\t[ ]*\-1')"
          then
            xattr -ds 'com.apple.FinderInfo' "${sv_FilePath}"
          fi
        done < <(find "${sv_SrcDirPath}")
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Executing rsync -rltDxXv '${sv_SrcDirPath}/' '${sv_DstDirPath}' --delete"
        "${GLB_SV_PROJECTDIRPATH}"/bin/rsync -rltDxXv "${sv_SrcDirPath}/" "${sv_DstDirPath}" --delete
      fi
    else
      # Sync File
      mkdir -p "$(dirname "${sv_DstDirPath}")"
      # Remove any "com.apple.FinderInfo" xattr attribute
      if test -n "$(ls -ld@ "${sv_SrcDirPath}" | grep 'com.apple.FinderInfo')"
      then
        xattr -ds 'com.apple.FinderInfo' "${sv_SrcDirPath}"
      fi
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Executing rsync -rltDxXv '${sv_SrcDirPath}' '${sv_DstDirPath}'"
      "${GLB_SV_PROJECTDIRPATH}"/bin/rsync -rltDxXv "${sv_SrcDirPath}" "${sv_DstDirPath}"
    fi
  fi
      
}
  
# ---

if [ "${GLB_BV_CONSOLEUSERISLOCAL}" = ${GLB_BC_TRUE} ]
then
  # Exit if user account is local
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Policy aborted - User account is local."
else
  if [ -z "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
  then
    # Exit if the Network home is undefined or the share is unavailable
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Network home is undefined or the share is unavailable."
  else
    if [ ! -e "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
    then
      # Exit if the Network home doesn't exist or is unavailable
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Network home doesn't exist or is unavailable."
    else
      if [ -z "${GLB_SV_CONSOLEUSERHOMEDIRPATH}" ]
      then
        # Exit if the user home is undefined or the share is unavailable
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Home folder is undefined or the share is unavailable."
      else
        if [ ! -e "${GLB_SV_CONSOLEUSERHOMEDIRPATH}" ]
        then
          # Exit if the user home doesn't exist
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Home folder doesn't exist."
        else
          if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_FALSE} ]
          then
            # Exit if the user home is on the network
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Home folder is on the network."
          else
          
            # Grab  lock
            if [ $(GLB_BF_NAMEDLOCKGRAB "SyncHomeFolder") = ${GLB_BC_FALSE} ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Cannot grab lock."
  
            else
            
# ---

case ${GLB_SV_EVENTNAME} in
    
Usr-VolDidMount)
  if [ -n "${GLB_SV_MOUNTEDVOLUMEDIRPATH}" ]
  then
    if [ -z "$(echo "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" | grep -i "^${GLB_SV_MOUNTEDVOLUMEDIRPATH}")" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Mount wasn't the user network home."

    else
      # The user network home was just mounted

      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "This policy can be potentially unsafe if misconfigured"

      bv_SafeFlag="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:SafeFlag")"
      if [ "${bv_SafeFlag}" = ${GLB_BC_FALSE} ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Safe mode off, syncs are not restricted to the user Library folder"
      else
        bv_SafeFlag=${GLB_BC_TRUE}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Safe mode on, syncs are restricted to the user Library folder"
      fi

      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Syncing files down [ LOCAL <-- NET ] "

      iv_ObjectCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Path")"
      for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
      do
        sv_ReqdObjectFilePath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Path:${iv_LoopCount}")"

        # Sanitise the Entry
        sv_ReqdObjectFilePath=$(echo "${sv_ReqdObjectFilePath}" | sed "s|^|/|;s|^/[/]*|/|;s|[/]*$||")
  
        if test -n "${sv_ReqdObjectFilePath}"
        then
          # If the filepath references a link, get the originating filepath
          sv_SrcDirPath=$(GLB_SF_ORIGINALFILEPATH "${GLB_SV_CONSOLEUSERSHAREDIRPATH}${sv_ReqdObjectFilePath}")
          sv_DstDirPath=$(GLB_SF_ORIGINALFILEPATH "${GLB_SV_CONSOLEUSERHOMEDIRPATH}${sv_ReqdObjectFilePath}")

          if [ "${bv_SafeFlag}" = ${GLB_BC_TRUE} ]
          then
            sv_SrcDirPath="$(echo ${sv_SrcDirPath} | grep "${GLB_SV_CONSOLEUSERSHAREDIRPATH}/Library")"
            sv_DstDirPath="$(echo ${sv_DstDirPath} | grep "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/Library")"
          fi
    
          # Sync the prefs down
          if [ -n "${sv_SrcDirPath}" ] && [ -n "${sv_DstDirPath}" ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Syncing down '${sv_ReqdObjectFilePath}'"
            nf_SyncFiles "${sv_SrcDirPath}" "${sv_DstDirPath}"
          fi
        fi
      done

    fi
  fi
  ;;

Usr-Poll|Usr-PolicyInstall)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Syncing files up [ LOCAL --> NET ] "

  iv_ObjectCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Path")"
  for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
  do
    sv_ReqdObjectFilePath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Path:${iv_LoopCount}")"

    # Sanitise the Entry
    sv_ReqdObjectFilePath=$(echo "${sv_ReqdObjectFilePath}" | sed "s|^|/|;s|^/[/]*|/|;s|[/]*$||")
  
    if test -n "${sv_ReqdObjectFilePath}"
    then
      # Sync the prefs back up
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Syncing up '${sv_ReqdObjectFilePath}'"
      nf_SyncFiles "${GLB_SV_CONSOLEUSERHOMEDIRPATH}${sv_ReqdObjectFilePath}" "${GLB_SV_CONSOLEUSERSHAREDIRPATH}${sv_ReqdObjectFilePath}"
    fi
  done
  ;;
  
Usr-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac

# ---

              # Release lock
              GLB_NF_NAMEDLOCKRELEASE "SyncHomeFolder"
            fi
          fi
        fi
      fi
    fi
  fi
fi

# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
