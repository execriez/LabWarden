#!/bin/bash
#
# Short:    Sys Policy script - Sets up remote access to a workstation
# Author:   Mark J Swift
# Version:  3.3.0
# Modified: 22-May-2022
#
# references:
#  https://www.jamf.com/jamf-nation/discussions/6682/ard-kickstart-script-to-contribute
#  https://ssl.apple.com/remotedesktop/pdf/ARD3_AdminGuide.pdf
#
# Triggered by the following events:
#   Sys-Poll (as root)
#
# Called as follows:    
#   Sys-LocalAccess <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" != "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.3.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST=""

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.

# ---

nf_PrepGroups()
{
  local sv_GroupName
  local sv_err
  local iv_err
  
  while read sv_GroupName
  do
    sv_err=$(dseditgroup -n . ${sv_GroupName})
    iv_err=$?
    if [ ${iv_err} -ne 0 ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating local group '${sv_GroupName}'"
      dseditgroup -o create -q -n . ${sv_GroupName}
      
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Group '${sv_GroupName}' already exists"
      
    fi
  done < <(printf "com.apple.access_ssh\nard_admin\nard_interact\nard_manage\nard_reports\n")
}

nf_FirstConfig()
{
  local iv_FirstConfigEpoch
  local sv_LocalGroupName
  local sv_err
  local iv_err
  local sv_NestedGroupUUID
  local iv_NowEpoch
  
  iv_FirstConfigEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Epoch:FirstConfig")
  if [ -z "${iv_FirstConfigEpoch}" ]
  then
    # Clear any existing nested groups from the admin groups
  
    while read sv_LocalGroupName
    do
      sv_err=$(dseditgroup 2>&1 -n . ${sv_LocalGroupName})
      iv_err=$?
      if [ ${iv_err} -ne 0 ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error looking for group '${sv_LocalGroupName}'; (${iv_err}) ${sv_err}"
      
      else
        sv_err=$(dscl 2>&1 . -read /Groups/"${sv_LocalGroupName}" NestedGroups)
        iv_err=$?
        if [ ${iv_err} -ne 0 ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Error reading NestedGroups for group '${sv_LocalGroupName}'; (${iv_err}) ${sv_err}"
      
        else
          if [ -n "$(echo ${sv_err} | grep "NestedGroups:")" ]
          then
            while read sv_NestedGroupUUID
            do
              sv_err=$(dscl . -delete /Groups/${sv_LocalGroupName} NestedGroups ${sv_NestedGroupUUID})
              iv_err=$?
	          if [ ${iv_err} -ne 0 ]
	          then
	            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error removing '${sv_NestedGroupUUID}' from '${sv_LocalGroupName}' NestedGroups; (${iv_err}) ${sv_err}"

              else
	            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Removed '${sv_NestedGroupUUID}' from '${sv_LocalGroupName}' NestedGroups"

	          fi
            done < <(dscl 2>&1 . -read /Groups/"${sv_LocalGroupName}" NestedGroups | tr " " "\n" | grep -v "NestedGroups:")
          fi
        
        fi
      fi
    done < <(printf "admin\ncom.apple.access_ssh\nard_admin\nard_interact\nard_manage\nard_reports\n")
  
    iv_NowEpoch=$(date -u "+%s")
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Epoch:FirstConfig" ${iv_NowEpoch}
  fi
}


nf_EnableARD()
{
  local sv_PrefFile
  local sv_ARDsetting
  
  sv_PrefFile="/Library/Preferences/com.apple.RemoteManagement.plist"
  
  # Check the current ARD kickstart options
  sv_ARDsetting="$(GLB_SF_GETPLISTPROPERTY "${sv_PrefFile}" ":ARD_AllLocalUsers"):$(GLB_SF_GETPLISTPROPERTY "${sv_PrefFile}" ":DirectoryGroupLoginsEnabled"):$(GLB_SF_GETPLISTPROPERTY "${sv_PrefFile}" ":LoadRemoteManagementMenuExtra")"
  if [ ${sv_ARDsetting} != "false:true:true" ]
  then
    # Only set ARD kickstart options if no-one is logged in - otherwise the logged in user may get weird pop-ups
    if [ "$(stat -f '%Su' /dev/console)" = "root" ]
    then
      # Uninstall all existing ARD settings and prefs, enable directory authentication options, restrict ARD service access to specific users, activate and restart agent, always enable menuextra so that users know they are being observed
      /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -quiet -uninstall -settings -prefs -configure -allowAccessFor -specifiedUsers -clientopts -setmenuextra -menuextra yes -setdirlogins -dirlogins yes -setreqperm -reqperm yes -activate -restart -agent -console
	  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Reconfiguring ARD kickstart settings"

    else
	  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Delaying ARD kickstart settings configuration (someone is logged in)"
	  
    fi
  else
	GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "ARD kickstart settings are already configured"

  fi

}

nf_EnableSSH()
{
  # Note, the existence of the group com.apple.access_ssh restricts access to specific users/groups

  if [ ${GLB_IV_SYSTEMVERSIONSTAMPASNUMBER} -ge 168689664 ]
  then
    # MacOS 10.14 and later
   launchctl load -w /System/Library/LaunchDaemons/ssh.plist 
          
  else
    # MacOS 10.13 and earlier
    sudo systemsetup -setremotelogin on
  fi
}

nf_DisableSSH()
{
  if [ ${GLB_IV_SYSTEMVERSIONSTAMPASNUMBER} -ge 168689664 ]
  then
    # MacOS 10.14 and later
   launchctl unload /System/Library/LaunchDaemons/ssh.plist 
          
  else
    # MacOS 10.13 and earlier
    sudo systemsetup -setremotelogin off
  fi
}

# Add directory groups to appropriate local groups
nf_AddDirGroupsToLocalgroups()
{
  local iv_AssociationCount
  local iv_AssociationIndex
  local sv_DirGroupName
  local iv_LocalGroupCount
  local iv_LocalGroupIndex
  local sv_LocalGroupName
  local sv_DirGroupUUID
  local sv_err
  local iv_err
  local iv_PrefsAssociationCount

  iv_AssociationCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Association")"
  for (( iv_AssociationIndex=0; iv_AssociationIndex<${iv_AssociationCount}; iv_AssociationIndex++ ))
  do
    sv_DirGroupName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Association:${iv_AssociationIndex}:DirectoryGroup")"
	  
    iv_LocalGroupCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Association:${iv_AssociationIndex}:LocalGroup")"
    for (( iv_LocalGroupIndex=0; iv_LocalGroupIndex<${iv_LocalGroupCount}; iv_LocalGroupIndex++ ))
    do
      sv_LocalGroupName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Association:${iv_AssociationIndex}:LocalGroup:${iv_LocalGroupIndex}")"

      sv_err=$(dscl 2>&1 . -read /Groups/"${sv_LocalGroupName}")
      iv_err=$?
      if [ ${iv_err} -ne 0 ]
	  then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error looking for group '${sv_LocalGroupName}'; (${iv_err}) ${sv_err}"
		
	  else
        # Get the UUID for the user group - we may need this later if directory not available when removing the group 
	    sv_err=$(dsmemberutil 2>&1 getuuid -G "${sv_DirGroupName}")
	    iv_err=$?
        if [ ${iv_err} -ne 0 ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Error getting UUID for group '${sv_DirGroupName}'; (${iv_err}) ${sv_err}"
          
        else
          sv_DirGroupUUID=${sv_err}

          if [ -z "$(dscl . -read /Groups/"${sv_LocalGroupName}" NestedGroups | tr " " "\n" | grep "${sv_DirGroupUUID}")" ]
          then
            sv_err=$(dseditgroup 2>&1 -o edit -a "${sv_DirGroupName}" -t group "${sv_LocalGroupName}")
            iv_err=$?
		    if [ ${iv_err} -ne 0 ]
            then
		      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Error adding group '${sv_DirGroupName}' to ${sv_LocalGroupName}; (${iv_err}) ${sv_err}"
          
		    else
		      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Group '${sv_DirGroupName}' added to ${sv_LocalGroupName}"

	          iv_PrefsAssociationCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association")"
              GLB_NF_SETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association:${iv_PrefsAssociationCount}:DirGroupName" "${sv_DirGroupName}"
              GLB_NF_SETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association:${iv_PrefsAssociationCount}:DirGroupUUID" "${sv_DirGroupUUID}"
              GLB_NF_SETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association:${iv_PrefsAssociationCount}:LocalGroupName" "${sv_LocalGroupName}"
		    fi
		    
		  else
		    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Group ${sv_DirGroupName} is already a member of ${sv_LocalGroupName}"

		  fi
        fi
	  fi
	done
  done
}

# Remove directory groups to appropriate local groups
nf_RemoveDirGroupsFromLocalgroups()
{
  local iv_PrefsAssociationCount
  local iv_PrefsAssociationIndex
  local sv_LocalGroupName
  local sv_DirGroupName
  local sv_DirGroupUUID
  local sv_err
  local iv_err

  iv_PrefsAssociationCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association")"
  for (( iv_PrefsAssociationIndex=0; iv_PrefsAssociationIndex<${iv_PrefsAssociationCount}; iv_PrefsAssociationIndex++ ))
  do
    sv_DirGroupName=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association:${iv_PrefsAssociationIndex}:DirGroupName")
    sv_DirGroupUUID=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association:${iv_PrefsAssociationIndex}:DirGroupUUID")
    sv_LocalGroupName=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_POLICYPREFSFILEPATH}" ":${GLB_SV_CONFIGUUID}:Prefs:Association:${iv_PrefsAssociationIndex}:LocalGroupName")

	sv_err=$(dscl 2>&1 . -read /Groups/"${sv_LocalGroupName}")
	iv_err=$?
	if [ ${iv_err} -ne 0 ]
	then
	  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error looking for group '${sv_LocalGroupName}'; (${iv_err}) ${sv_err}"
		
	else
	  # We are not using dseditgroup to remove the group, because we are unsure if the directory info is available; or if the group has been deleted at some point

      sv_err=$(dscl 2>&1 . -read /Groups/"${sv_LocalGroupName}" NestedGroups)
      iv_err=$?
	  if [ ${iv_err} -ne 0 ]
	  then
	    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error checking group '${sv_LocalGroupName}' for NestedGroups; (${iv_err}) ${sv_err}"
	    
	  else
	    if [ "$(echo "${sv_err}" | tr " " "\n" | grep -E "${sv_DirGroupUUID}")" != "${sv_DirGroupUUID}" ]
        then
		  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Group '${sv_DirGroupName}' not removed from ${sv_LocalGroupName} (not a member)"
		  
        else
          sv_err=$(dscl . -delete /Groups/${sv_LocalGroupName} NestedGroups ${sv_DirGroupUUID})
          iv_err=$?
	      if [ ${iv_err} -ne 0 ]
	      then
	        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error removing '${sv_DirGroupUUID}' from '${sv_LocalGroupName}' NestedGroups; (${iv_err}) ${sv_err}"

          else
	        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Removed '${sv_DirGroupUUID}' from '${sv_LocalGroupName}' NestedGroups"

	      fi
	    fi
	  fi	  
	fi
  done
}

# ---

# Grab lock - we only want one instance of this policy running at any time
if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_POLICYNAME}") = ${GLB_BC_FALSE} ]
then
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted. Cannot grab lock."
else

# ---

nf_PrepGroups
nf_FirstConfig

case ${GLB_SV_EVENTNAME} in

Sys-Poll|Sys-PolicyInstall)
  nf_EnableSSH
  nf_EnableARD
  nf_AddDirGroupsToLocalgroups
  ;;
  
Sys-PolicyUninstall)
  nf_RemoveDirGroupsFromLocalgroups
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Release lock
GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_POLICYNAME}"

fi

# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
