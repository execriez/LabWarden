#!/bin/bash
#
# Short:    When a user logs out - call the LOGOUT trigger(s)
# Author:   Mark J Swift
# Version:  3.2.5
# Modified: 30-Dec-2020
#
# Called as root at user login as follows:    
#   LogoutHook username
#
# Executes the following Triggers
#   Usr-Logout <user> (as user)
#   Sys-Logout <user>  (as root)
#   Sys-LoginWindowRestartOrShutdown (as root)

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# ---

# Get user name
GLB_SV_RUNUSERNAME="$(whoami)"

if [ "${GLB_SV_RUNUSERNAME}" != "root" ]
then
  exit 0
fi

# ---

# Check we have the correct number of parameters
if [ $# -lt 1 ]
then
  exit 0
fi

# -- Login/Logout hooks run as root and pass the user as first parameter --

# Get user name
GLB_SV_CONSOLEUSERNAME="${1}"

# We are assuming that we never log in as root, therefore the only time that
# root logs out is when you press "Restart" or "Shutdown" at the LoginWindow
if [ "${GLB_SV_CONSOLEUSERNAME}" = "root" ]
then
  "${GLB_SV_PROJECTDIRPATH}"/bin/Trigger "Sys-LoginWindowRestartOrShutdown"

else
  # -- The following is executed as the user who is logging in --

# HEREDOC is not quoted, so variables are expanded before entry.
# This means that new variables cannot be created inside.
 
/usr/bin/su ${GLB_SV_CONSOLEUSERNAME} <<HEREDOC

"${GLB_SV_PROJECTDIRPATH}"/bin/Trigger "Usr-Logout" &

HEREDOC

  # -- The following is executed as root --

  "${GLB_SV_PROJECTDIRPATH}"/bin/Trigger "Sys-Logout" "${GLB_SV_CONSOLEUSERNAME}" &

fi

# ---

# We dont want to quit until all sub tasks are finished
while [ -n "$(jobs -r)" ]
do
  # We don't want to hog the CPU - so lets sleep a while
  sleep 1
done

