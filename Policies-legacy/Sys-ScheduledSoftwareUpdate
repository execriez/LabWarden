#!/bin/bash
#
# Short:    Sys Policy script - Runs a custom update script
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 12-Nov-2020
#
# Triggered by the following events:
#   Sys-ManualTrigger   (as root)
#   Sys-NetworkUp       (as root)
#   Sys-Poll            (as root)
#   Sys-LoginWindowIdle (as root)
#
# Called as follows:    
#   Sys-SoftwareManifest <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" != "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.2.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Sys-SoftwareManifest"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.
# Look at '/inc-sh/Common.sh' for a complete list.

# ---

# Defining this allows me use the same core code with multiple policies

# Is this setting associated with a network interface
bv_IsNetworkInterfaceSetting=${GLB_BC_FALSE}

# ---

bf_UpdatesAllowed() # returns true if updates are allowed to run right now
{
  local iv_CurrOutOfHoursStartTime
  local iv_CurrOutOfHoursStartHour
  local iv_CurrOutOfHoursStartMinute
  local iv_CurrOutOfHoursStartEpoch
  local iv_CurrOutOfHoursEndTime
  local iv_CurrOutOfHoursEndHour
  local iv_CurrOutOfHoursEndMinute
  local iv_CurrOutOfHoursEndEpoch
  local iv_LastUpdateEpoch
  local bv_DoUpdate
  local bv_OutOfHoursPowerOn
  local iv_NextUpdateEpoch
  local iv_NextOutOfHoursStartEpoch
  local iv_NextOutOfHoursEndEpoch
  local iv_NextOutOfHoursUpdateEpoch

  local sv_ActiveConfig
  local sv_ConfigOptionPath

  bv_DoUpdate=${GLB_BC_FALSE}

  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" != "CLEAR" ]
      then
        # config options

        iv_CurrOutOfHoursStartTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:OutOfHoursStartTime" | grep -E "^[0-9]{1,2}:[0-9]{2}$")
        if test -n "${iv_CurrOutOfHoursStartTime}"
        then
          # Get update start time before now
          iv_CurrOutOfHoursStartHour=$(echo "${iv_CurrOutOfHoursStartTime}" | cut -d":" -f1)
          iv_CurrOutOfHoursStartMinute=$(echo "${iv_CurrOutOfHoursStartTime}" | cut -d":" -f2)
          iv_CurrOutOfHoursStartEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v${iv_CurrOutOfHoursStartHour}H -v${iv_CurrOutOfHoursStartMinute}M -v0S "+%s")

          if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOutOfHoursStartEpoch} ]
          then
            iv_CurrOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v-1d "+%s")
          fi

          iv_CurrOutOfHoursEndTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:OutOfHoursEndTime" | grep -E "^[0-9]{1,2}:[0-9]{2}$")
          if test -n "${iv_CurrOutOfHoursEndTime}"
          then
            iv_CurrOutOfHoursEndHour=$(echo "${iv_CurrOutOfHoursEndTime}" | cut -d":" -f1)
            iv_CurrOutOfHoursEndMinute=$(echo "${iv_CurrOutOfHoursEndTime}" | cut -d":" -f2)
            iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v${iv_CurrOutOfHoursEndHour}H -v${iv_CurrOutOfHoursEndMinute}M -v0S "+%s")

            if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
            then
              iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
            fi
        
            # Adjust end to allow at least one Sys-LoginWindowPoll to happen - if an update is scheduled at the end of the out-of-hours period
            iv_CurrOutOfHoursEndEpoch=$((${iv_CurrOutOfHoursEndEpoch}-${GLB_IC_SYSLOGINWINDOWPOLLTRIGGERSECS}*2))
            if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
            then
              # The defined period is clearly not long enough, so null the value
              iv_CurrOutOfHoursEndEpoch=""
            fi

          fi
        fi

        if test -z "${iv_CurrOutOfHoursEndEpoch}"
        then
          # The defined period is unset or invalid, so assume it's OK between 3:00am and 4:00am
          iv_CurrOutOfHoursStartEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v3H -v0M -v0S "+%s")
          if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOutOfHoursStartEpoch} ]
          then
            iv_CurrOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v-1d "+%s")
          fi
    
          iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v4H -v0M -v0S "+%s")
          if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
          then
            iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
          fi
        fi

        if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOutOfHoursEndEpoch} ]
        then
          iv_LastUpdateEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:LastUpdateEpoch")
          if test -z "${iv_LastUpdateEpoch}"
          then
            iv_LastUpdateEpoch=0
          fi
      
          if [ ${iv_LastUpdateEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We are out-of-hours, so updates are enabled"
            bv_DoUpdate=${GLB_BC_TRUE}
        
          else
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "An update has recently happened, so updates are disabled"
            bv_DoUpdate=${GLB_BC_FALSE}
        
          fi
      
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We are within working hours, so updates are disabled"
          bv_DoUpdate=${GLB_BC_FALSE}
      
        fi

        if [ "${bv_DoUpdate}" = ${GLB_BC_FALSE} ]
        then
          iv_LastUpdateEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:LastUpdateEpoch")
          if test -z "${iv_LastUpdateEpoch}"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Updates have never run, so updates have been enabled"
            bv_DoUpdate=${GLB_BC_TRUE}
          fi
        fi

        bv_OutOfHoursPowerOn=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:OutOfHoursPowerOn")
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "LOOKHERE bv_OutOfHoursPowerOn '${bv_OutOfHoursPowerOn}'"
        if [ "${bv_OutOfHoursPowerOn}" = ${GLB_BC_TRUE} ]
        then
          # Get the existing next scheduled update value
          iv_NextUpdateEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NextUpdateEpoch")
          if test -z "${iv_NextUpdateEpoch}"
          then
            iv_NextUpdateEpoch=0
          fi

          # Check if the next scheduled update has already passed, and if so schedule another one
          if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -ge ${iv_NextUpdateEpoch} ]
          then
            # -- work out a good random-ish time to power on for the next Update
            iv_NextOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v+1d "+%s")
            iv_NextOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
            iv_NextOutOfHoursUpdateEpoch=$(jot -r 1 ${iv_NextOutOfHoursStartEpoch} ${iv_NextOutOfHoursEndEpoch})
            GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NextUpdateEpoch" "${iv_NextOutOfHoursUpdateEpoch}"
            GLB_NF_SCHEDULE4EPOCH "${GLB_SV_THISSCRIPTFILENAME}" "poweron" ${iv_NextOutOfHoursUpdateEpoch}

            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Next update will likely be $(date -r ${iv_NextOutOfHoursUpdateEpoch} "+%Y%m%d-%H:%M.%S")"
          fi
      
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "PowerOn updates aren't scheduled"
      
        fi
      
      fi
    
    fi
  
  fi
  
  echo "${bv_DoUpdate}"
}

nf_DoUpdate()
{
  local bv_UpdateScriptActive
  local iv_UpdateExeArgCount
  local sv_UpdateExeURI
  local sv_UpdateExeCommand
  local iv_UpdateExeArgIndex

  local sv_ActiveConfig
  local sv_ConfigOptionPath

  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" != "CLEAR" ]
      then
        # config options

        sv_UpdateExeCommand=""
        iv_UpdateExeArgCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:UpdateExe")"
        if [ ${iv_UpdateExeArgCount} -eq 0 ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "There are no defined update arguments."
          sv_UpdateExeCommand=""

        else
          sv_UpdateExeURI="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:UpdateExe:0")"
          if test -n "${sv_UpdateExeURI}"
          then
            sv_UpdateExeCommand=$(GLB_SF_RESOLVEFILEURITOPATH "${sv_UpdateExeURI}")
            if ! test -e "${sv_UpdateExeCommand}"
            then
              # Its possible that the exe has been moved to the bin directory
              sv_UpdateExeURI="$(basename "${sv_UpdateExeURI}")"
              sv_UpdateExeCommand="${GLB_SV_PROJECTDIRPATH}"/bin"/${sv_UpdateExeURI}"
            fi

            if ! test -e "${sv_UpdateExeCommand}"
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "The specified update script does not exist (${sv_UpdateExeCommand})"
              sv_UpdateExeCommand=""

            else
              if ! test -x "${sv_UpdateExeCommand}"
              then
                chown root:wheel "${sv_UpdateExeCommand}"
                chmod u+x "${sv_UpdateExeCommand}"
              fi
              for (( iv_UpdateExeArgIndex=1; iv_UpdateExeArgIndex<${iv_UpdateExeArgCount}; iv_UpdateExeArgIndex++ ))
              do
                sv_UpdateExeCommand="${sv_UpdateExeCommand} '""$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:UpdateExe:${iv_UpdateExeArgIndex}")""'"
              done

              # Do a software update
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Running update (${sv_UpdateExeCommand})"
              eval "${sv_UpdateExeCommand}"
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Ideally we should restart now"

            fi
          fi
        fi
  
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:LastUpdateEpoch" "${GLB_IV_THISSCRIPTSTARTEPOCH}" 
      fi
    
    fi
  
  fi 
}

if_GetConfigOptionPathFromDomain() # <TargetDomain> - Return the config ConfigOptionPath for the supplied target domain
{
  local sv_TargetDomain
  local iv_ConfigOptionCount
  local iv_DomainListCount
  local sv_DomainListEntry
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X) 
  local iv_IsActiveForDomainCount
  local iv_IsActiveForDomainIndex
  local sv_IsActiveForDomain
# END LEGACY CONFIG SUPPORT (PRE 3.X)
# ----------
  
  sv_TargetDomain="${1}"
  
  iv_ConfigOptionCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption")"
  if [ ${iv_ConfigOptionCount} -gt 0 ]
  then
    for (( iv_ConfigOptionIndex=0; iv_ConfigOptionIndex<${iv_ConfigOptionCount}; iv_ConfigOptionIndex++ ))
    do
      iv_DomainListCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList")"
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "${sv_TargetDomain}" ] || [ "${sv_DomainListEntry}" = "ALL" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "DEFAULT" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
    done
    
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X)
  else
    # Support for the old-style config. This will be removed in future updates.
    iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain")"
    if [ ${iv_IsActiveForDomainCount} -gt 0 ]
    then
      for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
      do
        sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain:${iv_IsActiveForDomainIndex}")
        if test -n "${sv_IsActiveForDomain}"
        then
          case ${sv_IsActiveForDomain} in
          ALL)
            echo ":${GLB_SV_CONFIGUUID}:Config"
            break 2
            ;;
        
          NONE)
            ;;
        
          ADDOMAIN)
            sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
            ;;
          
          esac
        fi
    
        if [ "${sv_IsActiveForDomain}" = "${sv_TargetDomain}" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config"
          break
        fi
      done
    fi
# END LEGACY CONFIG SUPPORT (PRE 3.X) 
# ----------

  fi
}

# ---

case ${GLB_SV_EVENTNAME} in
    
Sys-PolicyUninstall)
  # Clear the settings first - if appropriate

  # Grab lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi
  
  # Get the current active settings
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting, so it's our responsibility to clear it
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Sys-NetworkUp|Sys-PolicyInstall) 
  # Apply settings for active domain
  sv_TargetDomain="${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}"

  if [ -z "${sv_TargetDomain}" ]
  then
    sv_TargetDomain="NONE"
  fi
  
  # Grab  lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi

  # Get the existing active config
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  sv_ConfigOptionPath=$(if_GetConfigOptionPathFromDomain "${sv_TargetDomain}")
  if [ -n "${sv_ConfigOptionPath}" ]
  then
    # This config contains the new active settings

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings were found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" != "${GLB_SV_CONFIGUUID}" ]
      then
        # Another config is currently active, so It's that configs responsibility to clear the active settings

        # Release lock in order for the other config to do its stuff
        GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
      
        # Wait up to 10 seconds for the other config to clear the active settings
        for (( iv_WaitIndex=0; iv_WaitIndex<10; iv_WaitIndex++ ))
        do
          sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
          if [ -z "${sv_LastActiveConfig}" ]
          then
            break
          fi
          sleep 1
        done

        # Grab  lock
        if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
        fi

        # Check if the config was cleared
        sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
        if [ -n "${sv_LastActiveConfig}" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "The config that configured the existing settings did not clear them, so we will instead."
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
        fi
      fi
    fi
    
    # Check if the setup is different
    sv_LastNetworkServiceInterfaceName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NetworkServiceInterfaceName")"
    if [ "${bv_IsNetworkInterfaceSetting}" = ${GLB_BC_TRUE} ] && [ "${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}" != "${sv_LastNetworkServiceInterfaceName}" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Network interface has changed from '${sv_LastNetworkServiceInterfaceName}' to '${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}'"
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi

    sv_LastConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ "${sv_ConfigOptionPath}" != "${sv_LastConfigOptionPath}" ] 
    then
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi
    
    # If the setup has changed, we will want to apply the new settings
    if [ "${bv_SetupIsDifferent}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Applying new settings for domain '${sv_TargetDomain}'"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "${sv_ConfigOptionPath}"
      
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings for domain '${sv_TargetDomain}' are already in place"
    
    fi
    
  else
    # Another config contains the new active settings
    
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "No settings found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
      then
        # This config contains the current active setting, so it's our responsibility to clear it
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
      fi
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Sys-Poll)
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting
      
      # This function returns true if updates are allowed, and schedules a poweron for the next update if necessary
      bv_DoUpdate=$(bf_UpdatesAllowed)
    fi
  fi
  ;;
    
Sys-ManualTrigger)
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting
      
      # Manual update requested via /usr/local/LabWarden/bin/Update
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Running a manual Update."
  
      # Perform a workstation update (software and group policies)
      nf_DoUpdate

      # Do a full group policy update
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Updating group policies (via gpupdate)."
      "${GLB_SV_PROJECTDIRPATH}"/bin/gpupdate "-force"
    fi
  fi
  ;;
  
Sys-LoginWindowIdle)
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting
      
      # Get the path to the policy options
      sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"

      # This function returns true if updates are allowed, and schedules a poweron for the next update if necessary
      bv_DoUpdate=$(bf_UpdatesAllowed)

      iv_IdleSecs=$(GLB_IF_SYSTEMIDLESECS)
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Workstation Idle for ${iv_IdleSecs} secs"

      bv_OutOfHoursPowerOn=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:OutOfHoursPowerOn")
      if [ "${bv_OutOfHoursPowerOn}" != "${GLB_BC_TRUE}" ]
      then
        bv_OutOfHoursPowerOn=${GLB_BC_FALSE}
      fi

      iv_LoginWindowIdleShutdownSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:LoginWindowIdleShutdownSecs" | grep -E "^[0-9]*$")
      if test -z "${iv_LoginWindowIdleShutdownSecs}"
      then
        if [ "${bv_OutOfHoursPowerOn}" = ${GLB_BC_TRUE} ]
        then
          iv_LoginWindowIdleShutdownSecs=1200
        else
          iv_LoginWindowIdleShutdownSecs=0
        fi
      fi

      if [ ${iv_IdleSecs} -lt ${iv_LoginWindowIdleShutdownSecs} ]
      then
        bv_DoUpdate=${GLB_BC_FALSE}  
      fi

      if [ "${bv_DoUpdate}" = ${GLB_BC_TRUE} ]
      then
        nf_DoUpdate
        GLB_NF_NAMEDFLAGCREATE "Restart"
      fi

      if [ ${iv_LoginWindowIdleShutdownSecs} -gt 0 ]
      then
        if [ ${iv_IdleSecs} -gt ${iv_LoginWindowIdleShutdownSecs} ]
        then
          # Shutdown if the workstation is still idle
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Workstation has been idle for ${iv_IdleSecs} seconds - we should shutdown"
          GLB_NF_NAMEDFLAGCREATE "Shutdown"
        fi
      fi
    fi
  fi
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
