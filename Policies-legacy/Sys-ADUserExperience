#!/bin/bash
#
# Short:    Sys Policy script - Sets how user homes on network accounts are handled as determined by the "User Experience" tab of the Directory Utility app
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 12-Nov-2020
#
# Reference: Remove network home question mark from dock - jclark - https://jamfnation.jamfsoftware.com/discussion.html?id=10753
#
# Triggered by the following events:
#   Sys-ActiveDirectoryUp (as root)
#
# Called as follows:    
#   Sys-ADUserExperience <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" != "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.2.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Sys-UserExperience"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.
# Look at '/inc-sh/Common.sh' for a complete list.

# ---

# Defining this allows me use the same core code with multiple policies

# Is this setting associated with a network interface
bv_IsNetworkInterfaceSetting=${GLB_BC_FALSE}

# ---

if_GetConfigOptionPathFromDomain() # <TargetDomain> - Return the config ConfigOptionPath for the supplied target domain
{
  local sv_TargetDomain
  local iv_ConfigOptionCount
  local iv_DomainListCount
  local sv_DomainListEntry
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X) 
  local iv_IsActiveForDomainCount
  local iv_IsActiveForDomainIndex
  local sv_IsActiveForDomain
# END LEGACY CONFIG SUPPORT (PRE 3.X)
# ----------
  
  sv_TargetDomain="${1}"
  
  iv_ConfigOptionCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption")"
  if [ ${iv_ConfigOptionCount} -gt 0 ]
  then
    for (( iv_ConfigOptionIndex=0; iv_ConfigOptionIndex<${iv_ConfigOptionCount}; iv_ConfigOptionIndex++ ))
    do
      iv_DomainListCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList")"
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "${sv_TargetDomain}" ] || [ "${sv_DomainListEntry}" = "ALL" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "DEFAULT" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
    done
    
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X)
  else
    # Support for the old-style config. This will be removed in future updates.
    iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain")"
    if [ ${iv_IsActiveForDomainCount} -gt 0 ]
    then
      for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
      do
        sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain:${iv_IsActiveForDomainIndex}")
        if test -n "${sv_IsActiveForDomain}"
        then
          case ${sv_IsActiveForDomain} in
          ALL)
            echo ":${GLB_SV_CONFIGUUID}:Config"
            break 2
            ;;
        
          NONE)
            ;;
        
          ADDOMAIN)
            sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
            ;;
          
          esac
        fi
    
        if [ "${sv_IsActiveForDomain}" = "${sv_TargetDomain}" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config"
          break
        fi
      done
    fi
# END LEGACY CONFIG SUPPORT (PRE 3.X) 
# ----------

  fi
}

sf_SetSearchPathForAD() # <recordpath> <value>
{
  local sv_RecordPath
  local sv_Value
  local bv_ReloadDirectoryServices
  local bv_AddActiveSearchPath
  local sv_SearchPath
  
  sv_RecordPath="${1}"
  sv_Value="${2}"

  bv_ReloadDirectoryServices=${GLB_BC_FALSE}
  bv_AddActiveSearchPath=${GLB_BC_TRUE}
  
  dscl "${sv_RecordPath}" -create / SearchPolicy CSPSearchPath

  while read sv_SearchPath
  do
    if [ "${sv_SearchPath}" = "${sv_Value}" ]
    then
      bv_AddActiveSearchPath=${GLB_BC_FALSE}
      
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Deleting CSPSearchPath: '${sv_SearchPath}' from '${sv_RecordPath}'"
      bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      dscl "${sv_RecordPath}" -delete / CSPSearchPath "${sv_SearchPath}"
    fi
  done < <(dscl "${sv_RecordPath}" -read / CSPSearchPath | sed 's|^CSPSearchPath:||;s|^[ ]*||;/^\s*$/d' | grep "/Active Directory")
  
  if [ "${bv_AddActiveSearchPath}" = ${GLB_BC_TRUE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Appending CSPSearchPath: '${sv_Value}' to '${sv_RecordPath}'"
    dscl "${sv_RecordPath}" -append / CSPSearchPath "${sv_Value}"
    bv_ReloadDirectoryServices=${GLB_BC_TRUE}
  fi

  echo "${bv_ReloadDirectoryServices}"
}

nf_ApplyGlobalPrefs() # Apply settings from Global Prefs
{
  local sv_ActiveConfig
  local sv_ConfigOptionPath
  local sv_NetworkServiceInterfaceName

  local sv_PropertyString
  local sv_RunningOPTmobile
  local sv_RunningOPTmobileconfirm
  local sv_RunningOPTlocalhome
  local sv_RunningOPTsharepoint
  local sv_RunningOPTuseuncpath
  local sv_RunningOPTprotocol
  local sv_RunningOPTallomains
  local sv_RunningOPTpreferredserver
  local sv_RunningOPTActiveSearchPath
  local sv_RunningOPTActiveSearchContactsPath
  local sv_OPTmobile
  local sv_OPTmobileconfirm
  local sv_OPTlocalhome
  local sv_OPTsharepoint
  local sv_OPTuseuncpath
  local sv_OPTprotocol
  local sv_OPTallomains
  local sv_OPTpreferredserver
  local sv_OPTActiveSearchPath
  local sv_OPTActiveSearchContactsPath
  local bv_ReloadDirectoryServices
  local bv_Reload

  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" = "CLEAR" ]
      then
        # default options
    
        sv_OPTmobile="disable"
        sv_OPTlocalhome="enable"
        sv_OPTsharepoint="disable"
        sv_OPTuseuncpath="disable"
        sv_OPTallomains="enable"
        sv_OPTprotocol="smb"
    
      else
        # config options
    
        sv_PropertyName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:mobile")"
        sv_OPTmobile="disable";[ "${sv_PropertyName}" = ${GLB_BC_TRUE} ] && sv_OPTmobile="enable"
	    if [ "${sv_OPTmobile}" = "enable" ]
	    then
          sv_PropertyName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:mobileconfirm")"
          sv_OPTmobileconfirm="disable";[ "${sv_PropertyName}" = ${GLB_BC_TRUE} ] && sv_OPTmobileconfirm="enable"
        fi
    
        sv_PropertyName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:localhome")"
        sv_OPTlocalhome="disable";[ "${sv_PropertyName}" = ${GLB_BC_TRUE} ] && sv_OPTlocalhome="enable"

        sv_PropertyName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:sharepoint")"
        sv_OPTsharepoint="disable";[ "${sv_PropertyName}" = ${GLB_BC_TRUE} ] && sv_OPTsharepoint="enable"

        if [ "${sv_OPTlocalhome}" != "enable" ]
        then
          sv_OPTsharepoint="disable"
        fi

        sv_PropertyName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:useuncpath")"
        sv_OPTuseuncpath="disable";[ "${sv_PropertyName}" = ${GLB_BC_TRUE} ] && sv_OPTuseuncpath="enable"
        
        sv_OPTprotocol="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:protocol")"

	    if [ "${sv_OPTuseuncpath}" = "disable" ]
	    then
          sv_OPTprotocol="smb"
        fi
    
        sv_PropertyName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:alldomains")"
        sv_OPTallomains="disable";[ "${sv_PropertyName}" = ${GLB_BC_TRUE} ] && sv_OPTallomains="enable"

        sv_OPTpreferredserver="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:preferredserver")"
  
      fi

      # Get currently live values - exit if the relevant string isn't found
    
      bv_Err=${GLB_BC_FALSE}

      sv_PropertyString="Create mobile account at login";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTmobile="${sv_PropertyValue}"
	
      sv_PropertyString="Require confirmation";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTmobileconfirm="${sv_PropertyValue}"
	
      sv_PropertyString="Force home to startup disk";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTlocalhome="${sv_PropertyValue}"
	
      sv_PropertyString="Mount home as sharepoint";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTsharepoint="${sv_PropertyValue}"
	
      sv_PropertyString="Use Windows UNC path for home";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTuseuncpath="${sv_PropertyValue}"
	
      if [ "${sv_RunningOPTuseuncpath}" = "enable" ]
      then
        sv_PropertyString="Network protocol to be used";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||")
    	if [ -z "${sv_PropertyValue}" ]
    	then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
          bv_Err=${GLB_BC_TRUE}
    	fi
        sv_RunningOPTprotocol="${sv_PropertyValue}"
      fi
    
      sv_PropertyString="Authentication from any domain";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||;s|Enabled|enable|;s|Disabled|disable|")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTallomains="${sv_PropertyValue}"
	
      sv_PropertyString="Preferred Domain controller";sv_PropertyValue=$(dsconfigad -show | grep "${sv_PropertyString}" | cut -d "=" -f2 | sed "s|^[ ]*||;s|[ ]*$||")
      if [ -z "${sv_PropertyValue}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN}  "dsconfigad string expected but not found '${sv_PropertyString}'"
        bv_Err=${GLB_BC_TRUE}
      fi
      sv_RunningOPTpreferredserver="${sv_PropertyValue}"
      if [ "${sv_RunningOPTpreferredserver}" = "not set" ]
      then
    	sv_RunningOPTpreferredserver=""
      fi

      sv_RunningOPTActiveSearchPath=$(dscl "/Search" -read / CSPSearchPath | sed 's|^CSPSearchPath:||;s|^[ ]*||;/^\s*$/d' | grep "/Active Directory" | tr "\n" "," | sed "s|,$||")
      sv_RunningOPTActiveSearchContactsPath=$(dscl "/Search/Contacts" -read / CSPSearchPath | sed 's|^CSPSearchPath:||;s|^[ ]*||;/^\s*$/d' | grep "/Active Directory" | tr "\n" "," | sed "s|,$||")

      if [ "${bv_Err}" = ${GLB_BC_TRUE} ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - dsconfigad not working as expected"
      else

      # ---
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "sv_OPTmobile:${sv_OPTmobile} sv_RunningOPTmobile:${sv_RunningOPTmobile}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "sv_OPTlocalhome:${sv_OPTlocalhome} sv_RunningOPTlocalhome:${sv_RunningOPTlocalhome}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "sv_OPTuseuncpath:${sv_OPTuseuncpath} sv_RunningOPTuseuncpath:${sv_RunningOPTuseuncpath}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "sv_OPTpreferredserver:${sv_OPTpreferredserver} sv_RunningOPTpreferredserver:${sv_RunningOPTpreferredserver}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "sv_OPTallomains:${sv_OPTallomains} sv_RunningOPTallomains:${sv_RunningOPTallomains}"
  
      # Set the new live options
      
      bv_ReloadDirectoryServices=${GLB_BC_FALSE}
      
      if [ "${sv_OPTmobile}" != "${sv_RunningOPTmobile}" ]
      then
        dsconfigad -mobile ${sv_OPTmobile}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -mobile ${sv_OPTmobile}"
      
        if [ "${sv_OPTmobile}" = "enable" ]
        then
          if [ "${sv_OPTmobileconfirm}" != "${sv_RunningOPTmobileconfirm}" ]
          then
            dsconfigad -mobileconfirm ${sv_OPTmobileconfirm}
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -mobileconfirm ${sv_OPTmobileconfirm}"
          fi
        fi
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi
    
    
      if [ "${sv_OPTlocalhome}" != "${sv_RunningOPTlocalhome}" ]
      then
        dsconfigad -localhome ${sv_OPTlocalhome}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -localhome ${sv_OPTlocalhome}"
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi
      
      if [ "${sv_OPTsharepoint}" != "${sv_RunningOPTsharepoint}" ]
      then
        dsconfigad -sharepoint ${sv_OPTsharepoint}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -sharepoint ${sv_OPTsharepoint}"
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi

      if [ "${sv_OPTuseuncpath}" != "${sv_RunningOPTuseuncpath}" ]
      then
        dsconfigad -useuncpath ${sv_OPTuseuncpath}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -useuncpath ${sv_OPTuseuncpath}"
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi
    
      if [ "${sv_OPTprotocol}" != "${sv_RunningOPTprotocol}" ]
      then
        dsconfigad -protocol ${sv_OPTprotocol}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -protocol ${sv_OPTprotocol}"
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi
  
      if [ "${sv_OPTpreferredserver}" != "${sv_RunningOPTpreferredserver}" ]
      then
        if [ -n "${sv_OPTpreferredserver}" ]
        then
          dsconfigad -preferred ${sv_OPTpreferredserver}
          sv_PreferredText="-preferred ${sv_OPTpreferredserver}"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -preferred ${sv_OPTpreferredserver}"
        else
          dsconfigad -nopreferred
          sv_PreferredText="-nopreferred"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -nopreferred"
        fi
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi


      if [ "${sv_OPTallomains}" != "${sv_RunningOPTallomains}" ]
      then
        dsconfigad -alldomains ${sv_OPTallomains}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting user experience: -alldomains ${sv_OPTallomains}"
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi


      if [ "${sv_OPTallomains}" = "enable" ]
      then
        sv_OPTActiveSearchPath="/Active Directory/${GLB_SV_ADFLATDOMAINNAME}/All Domains"
      else
        sv_OPTActiveSearchPath="/Active Directory/${GLB_SV_ADFLATDOMAINNAME}/${GLB_SV_ADDNSDOMAINNAME}"
      fi
  
      bv_Reload=$(sf_SetSearchPathForAD "/Search" "${sv_OPTActiveSearchPath}")
      if [ "${bv_Reload}" = ${GLB_BC_TRUE} ]
      then
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi
    
      bv_Reload=$(sf_SetSearchPathForAD "/Search/Contacts" "${sv_OPTActiveSearchPath}")
      if [ "${bv_Reload}" = ${GLB_BC_TRUE} ]
      then
        bv_ReloadDirectoryServices=${GLB_BC_TRUE}
      fi
  
  
      if [ "${bv_ReloadDirectoryServices}" = ${GLB_BC_TRUE} ]
      then
        # This will cause an Sys-ActiveDirectoryUp event, so its important that we don't get caught in a loop
        # (If nothing changes, bv_ReloadDirectoryServices will be ${GLB_BC_FALSE})
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Reloading directory services"
        killall DirectoryService
      else
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Live settings do not need to change"
      fi
  
      # Remove network home question mark from dock - thanks to - jclark - https://jamfnation.jamfsoftware.com/discussion.html?id=10753
      /usr/libexec/PlistBuddy 2>/dev/null -c "Delete :module\ options:ActiveDirectory:managed\ client\ template:mcx_application_data:com.apple.dock:Forced:0:mcx_preference_settings:MCXDockSpecialFolders-Raw:0" "/Library/Preferences/OpenDirectory/Configurations/Active Directory/${GLB_SV_ADFLATDOMAINNAME}.plist"

      fi
      
    fi
  
  fi 
}

# ---

case ${GLB_SV_EVENTNAME} in
    
Sys-PolicyUninstall)
  # Clear the settings first - if appropriate

  # Grab lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi
  
  # Get the current active settings
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting, so it's our responsibility to clear it
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
      nf_ApplyGlobalPrefs
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Sys-ActiveDirectoryUp|Sys-PolicyInstall) 
  # Apply settings for active domain
  sv_TargetDomain="${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}"

  if [ -z "${sv_TargetDomain}" ]
  then
    sv_TargetDomain="NONE"
  fi
  
  # Grab  lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi

  # Get the existing active config
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  sv_ConfigOptionPath=$(if_GetConfigOptionPathFromDomain "${sv_TargetDomain}")
  if [ -n "${sv_ConfigOptionPath}" ]
  then
    # This config contains the new active settings

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings were found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" != "${GLB_SV_CONFIGUUID}" ]
      then
        # Another config is currently active, so It's that configs responsibility to clear the active settings

        # Release lock in order for the other config to do its stuff
        GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
      
        # Wait up to 10 seconds for the other config to clear the active settings
        for (( iv_WaitIndex=0; iv_WaitIndex<10; iv_WaitIndex++ ))
        do
          sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
          if [ -z "${sv_LastActiveConfig}" ]
          then
            break
          fi
          sleep 1
        done

        # Grab  lock
        if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
        fi

        # Check if the config was cleared
        sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
        if [ -n "${sv_LastActiveConfig}" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "The config that configured the existing settings did not clear them, so we will instead."
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
          nf_ApplyGlobalPrefs
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
        fi
      fi
    fi
    
    # Check if the setup is different
    sv_LastNetworkServiceInterfaceName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NetworkServiceInterfaceName")"
    if [ "${bv_IsNetworkInterfaceSetting}" = ${GLB_BC_TRUE} ] && [ "${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}" != "${sv_LastNetworkServiceInterfaceName}" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Network interface has changed from '${sv_LastNetworkServiceInterfaceName}' to '${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}'"
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi

    sv_LastConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ "${sv_ConfigOptionPath}" != "${sv_LastConfigOptionPath}" ] 
    then
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi
    
    # If the setup has changed, we will want to apply the new settings
    if [ "${bv_SetupIsDifferent}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Applying settings for domain '${sv_TargetDomain}'"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "${sv_ConfigOptionPath}"
      nf_ApplyGlobalPrefs
      
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings for domain '${sv_TargetDomain}' are already in place"
        
    fi
    
  else
    # Another config contains the new active settings
    
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "No settings found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
      then
        # This config contains the current active setting, so it's our responsibility to clear it
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
        nf_ApplyGlobalPrefs
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
      fi
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
