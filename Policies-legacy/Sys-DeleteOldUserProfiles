#!/bin/bash
#
# Short:    Policy script - Deletes outdated user profiles
# Author:   Mark J Swift
# Version:  3.3.0
# Modified: 22-May-2022
#
# Triggered by the following events:
#   Sys-Poll (as root)
#
# Called as follows:    
#   Sys-DeleteOldUserProfiles <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" != "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.3.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Sys-LocalProfileRetention"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.

# ---

# Declare which file we are using to determine when a user last logged in
sv_LastUseFile="/Library/Preferences/com.apple.finder.plist"

# List all user "last login files" in no particular order - the "last login file" is a user file that was modified when the user last logged in
sf_ListUserLastLoginFiles()
{
  local sv_UserDirName
  local sv_LastUseFilePath

  while read sv_UserDirName
  do
    sv_LastUseFilePath="/Users/${sv_UserDirName}${sv_LastUseFile}"
    if [ -e "${sv_LastUseFilePath}" ]
    then
      echo ${sv_LastUseFilePath}
    fi
  done < <(ls -1 /Users)
    
}
  
# ---

case ${GLB_SV_EVENTNAME} in
    
Sys-Poll)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "This policy can be potentially unsafe if misconfigured"

  # Get the min disk space allowed before user folders are considered for deletion
  iv_MinDiskSpaceMegs="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:MinDiskSpaceMegs")"

  if test -z "${iv_UserCacheEarliestEpoch}"
  then
    iv_MinDiskSpaceMegs=2048
  fi
  
  # Get the age in days before which user folders that are never deleted
  iv_LoginMinAgeDays="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:LoginMinAgeDays")"
  if test -z "${iv_LoginMinAgeDays}"
  then
    iv_LoginMinAgeDays=8
  fi
  
  # Get the days allowable between logins before profiles are deleted
  iv_LoginMaxAgeDays="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:LoginMaxAgeDays")"
  if test -z "${iv_LoginMaxAgeDays}"
  then
    iv_LoginMaxAgeDays=62
  fi
  
  # Get the earliest creation date/time allowable - cache files (in /private/var/folders) created earlier than this are deleted
  iv_UserCacheEarliestEpoch="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:UserCacheEarliestEpoch")"
  if test -z "${iv_UserCacheEarliestEpoch}"
  then
    iv_UserCacheEarliestEpoch=0
  fi
  
  # Check whether we should delete mobile accounts
  bv_DeleteMobileAccounts="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:DeleteMobileAccounts")"
  if test -z "${bv_DeleteMobileAccounts}"
  then
    bv_DeleteMobileAccounts=${GLB_BC_FALSE}
  fi

  while read sv_FolderDirPath
  do
    if test -d "${sv_FolderDirPath}"
    then
      sv_UserName="$(stat -f "%Su" "${sv_FolderDirPath}")"
      
      # Check if the user has recently logged in
      iv_LastUseEpoch=$(stat -f "%m" "${sv_FolderDirPath}${sv_LastUseFile}")
      iv_AccountAgeSecs=$((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_LastUseEpoch}))
      if [ ${iv_AccountAgeSecs} -lt $((${iv_LoginMinAgeDays}*24*60*60)) ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Skipping remaining folders, the owners have recently logged in."
        break
      fi
          
      # Check if the user is currently logged in
      if [ -n "$(who -q | grep -Ev "^#" | tr " " "\n" | sort -u | grep -Ev "^$" | grep -E "^"$(printf "%q" ${sv_UserName})"$")" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Skipping folder '${sv_FolderDirPath}', owner '${sv_UserName}' is logged in."
        
      else
        # Check if user is a local account
        sv_UserIsLocal="$(dseditgroup -o checkmember -m "${sv_UserName}" -n . localaccounts | cut -d" " -f1)"
        if [ -z "${sv_UserIsLocal}" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Skipping folder '${sv_FolderDirPath}', owner '${sv_UserName}' is unknown."
          
        else
        
        if [ "${sv_UserIsLocal}" = "yes" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Skipping folder '${sv_FolderDirPath}', owner '${sv_UserName}' is local."
    
        else
      
          # Network user folders are always temporary (unless mobile)
          
          #  Get the local accounts 'OriginalHomeDirectory' property
          sv_Value=$(GLB_SF_GETDIRECTORYOBJECTATTRVALUE "/Local/Default/Users" "${sv_UserName}" "OriginalHomeDirectory")
          if [ "${sv_Value}" = "ERROR" ]
          then
            sv_Value=""
          fi

          if test -n "${sv_Value}"
          then
            bv_UserIsMobile=${GLB_BC_TRUE}
      
          else
            bv_UserIsMobile=${GLB_BC_FALSE}
      
          fi

            if [ "${bv_UserIsMobile}" = ${GLB_BC_TRUE} ] && [ "${bv_DeleteMobileAccounts}" = ${GLB_BC_FALSE} ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Skipping folder '${sv_FolderDirPath}', owner '${sv_UserName}' is mobile."
      
            else
              sv_ReasonToDelete=""
          
              iv_FreeMegs=$(df -hm / | awk 'NR==2 {print $4}')
              if [ ${iv_FreeMegs} -lt ${iv_MinDiskSpaceMegs} ]
              then
                sv_ReasonToDelete="low disk space (${iv_FreeMegs} megs)."
              fi
          
              if [ ${iv_AccountAgeSecs} -gt $((${iv_LoginMaxAgeDays}*24*60*60)) ]
              then
                sv_ReasonToDelete="user hasn't logged on for more than ${iv_LoginMaxAgeDays} days."
              fi
          
              if test -z "${sv_ReasonToDelete}"
              then
                GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Skipping remaining folders, no reason to delete."
                break
              fi
          
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Deleting user home and user cache for '${sv_UserName}'; ${sv_ReasonToDelete}"
          
              # Delete the user folder
              rm -fR "${sv_FolderDirPath}"
          
              # Delete the user cache folders
              find /private/var/folders \( -depth 2 -prune \) -and -user "${sv_UserName}" -exec rm -fR "{}" \;
              
              # Delete the user account if it is a mobile account
              if [ "${bv_UserIsMobile}" = ${GLB_BC_TRUE} ]
              then
                GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Deleting mobile account for '${sv_UserName}'"
                dscl localhost delete /Local/Default/Users/"${sv_UserName}"
              fi
        
            fi
      
            if test -n "${iv_UserCacheEarliestEpoch}"
            then
              while read sv_DelPath
              do
                iv_CreatedEpoch=$(stat -f "%c" "${sv_DelPath}")
                if [ ${iv_CreatedEpoch} -lt ${iv_UserCacheEarliestEpoch} ]
                then
                  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Deleting outdated user cache for '${sv_UserName}'"
                  rm -fR "${sv_DelPath}"
                fi

              done < <(find /private/var/folders \( -depth 2 -prune \) -and \( -user "${sv_UserName}" \))
            fi
          
          fi
        fi
      fi
    fi
    
  # This line returns a list of user homes ordered by last login
  done < <(sf_ListUserLastLoginFiles | xargs -I{} stat -f "%m %N" "{}" | sort -n | cut -d" " -f2- | cut -d"/" -f 1-3)

  iv_FreeMegs=$(df -hm / | awk 'NR==2 {print $4}')
  if [ ${iv_FreeMegs} -lt ${iv_MinDiskSpaceMegs} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Failed to provide the required disk space. Low disk space (${iv_FreeMegs} megs)"
  fi
  ;;

Sys-PolicyInstall|Sys-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac

# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
