#!/bin/bash
#
# Short:    Gen Policy script - Enforces User Access to Opening Hours and collects usage stats
# Author:   Mark J Swift
# Version:  3.3.0
# Modified: 22-May-2022
#
# Triggered by the following events:
#   Sys-Boot        (as root)
#   Sys-Poll        (as root)
#   Usr-AtDesktop   (as user)
#   Usr-Poll        (as user)
#
# Called as follows:    
#   Gen-OfficeHours <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>
# 
# I have deprecated this policy. It just got too complicated.
# It was simple in my head - so I'm not sure why it ended up so complex.

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.3.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST=""

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.

# ---

sf_ShowTidyDateTime() # display date/time as today/tomorrow, etc
{
  local iv_ThisEpoch
  local iv_ThisZerohourEpoch
  local iv_NowZerohourEpoch
  local iv_TomorrowZerohourEpoch
  local iv_NextWeekZerohourEpoch
  
  iv_ThisEpoch=${1}
  iv_ThisZerohourEpoch=$(date -r ${iv_ThisEpoch} -v0H -v0M -v0S "+%s")

  iv_NowZerohourEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v0H -v0M -v0S "+%s")
  if [ ${iv_ThisZerohourEpoch} -eq ${iv_NowZerohourEpoch} ]
  then
    printf "Today "
  else
    iv_TomorrowZerohourEpoch=$(date -r ${iv_NowZerohourEpoch} -v+1d "+%s")
    if [ ${iv_ThisZerohourEpoch} -eq ${iv_TomorrowZerohourEpoch} ]
    then
      printf "Tomorrow "
    else
      iv_NextWeekZerohourEpoch=$(date -r ${iv_NowZerohourEpoch} -v+7d "+%s")
      printf "$(date -r ${iv_ThisEpoch} "+%a") "    
      if [ ${iv_ThisZerohourEpoch} -ge ${iv_NextWeekZerohourEpoch} ]
      then
        printf "$(date -r ${iv_ThisEpoch} "+%d %b %Y") "    
      fi
    fi
  fi

  printf "@ $(date -r ${iv_ThisEpoch} "+%H:%M")"
}

# Return the open and close time for the day of a given epoch - plus some other useful info
# Returns a string as follows:
#      HolidayHours,<OpenTimeEpoch>,<CloseTimeEpoch>,<StartOfRestrictedEpoch>,<EndOfRestrictedEpoch>"
#  or  NormalHours,<OpenTimeEpoch>,<CloseTimeEpoch>,,"
#  or  ClosedDays,,,<StartOfCloseEpoch>,<EndOfCloseEpoch>"
sf_GetSlotForEpoch()   # epoch
{
  local iv_ThisEpoch
  local iv_ThisDayOfWeek
  local bv_ClosedDaysAccess
  local bv_HolidayHoursAccess
  local iv_ClosedDaysCount
  local iv_ClosedDaysIndex
  local iv_HolidayHoursCount
  local iv_HolidayHoursIndex
  local iv_DatesCount
  local iv_DatesIndex
  local iv_StartDay
  local iv_StartMonth
  local iv_StartYear
  local iv_EndDay
  local iv_EndMonth
  local iv_EndYear
  local iv_StartEpoch
  local iv_EndEpoch
  local sv_OpenTimeString
  local sv_CloseTimeString
  local sv_SlotType
  local iv_ThisZerohourEpoch
  local iv_ThisOffsetSecs
  local iv_OpenTimeEpoch
  local iv_CloseTimeEpoch

  iv_ThisEpoch=${1}

  # The day of the week as a decimal, range 1 to 7, Monday being 1
  iv_ThisDayOfWeek="$(date -r ${iv_ThisEpoch} "+%u")"

  sv_SlotType=""

  iv_OpenTimeEpoch=""
  sv_CloseTimeString=""
  iv_StartEpoch=""
  iv_CloseTimeEpoch=""
  
  # Check if current date is in the closed access list
  iv_ClosedDaysCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays")"
  for (( iv_ClosedDaysIndex=0; iv_ClosedDaysIndex<${iv_ClosedDaysCount}; iv_ClosedDaysIndex++ ))
  do
    iv_StartDay=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays:${iv_ClosedDaysIndex}:Start:Day")
    iv_StartMonth=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays:${iv_ClosedDaysIndex}:Start:Month")
    iv_StartYear=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays:${iv_ClosedDaysIndex}:Start:Year")
    iv_StartEpoch=$(date -v${iv_StartYear}y -v${iv_StartMonth}m -v${iv_StartDay}d -v0H -v0M -v0S "+%s")

    iv_EndDay=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays:${iv_ClosedDaysIndex}:End:Day")
    iv_EndMonth=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays:${iv_ClosedDaysIndex}:End:Month")
    iv_EndYear=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ClosedDays:${iv_ClosedDaysIndex}:End:Year")
    iv_EndEpoch=$(date -v${iv_EndYear}y -v${iv_EndMonth}m -v${iv_EndDay}d -v23H -v59M -v59S "+%s")

    if [ ${iv_ThisEpoch} -ge ${iv_StartEpoch} ] && [ ${iv_ThisEpoch} -le ${iv_EndEpoch} ]
    then
      sv_SlotType="ClosedDays"
      break
    fi
      
  done

  if test -z "${sv_SlotType}"
  then
    iv_HolidayHoursCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours")"
    for (( iv_HolidayHoursIndex=0; iv_HolidayHoursIndex<${iv_HolidayHoursCount}; iv_HolidayHoursIndex++ ))
    do
      iv_DatesCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange")"
      for (( iv_DatesIndex=0; iv_DatesIndex<${iv_DatesCount}; iv_DatesIndex++ ))
      do  
        iv_StartDay=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange:${iv_DatesIndex}:Start:Day")
        iv_StartMonth=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange:${iv_DatesIndex}:Start:Month")
        iv_StartYear=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange:${iv_DatesIndex}:Start:Year")
        iv_StartEpoch=$(date -v${iv_StartYear}y -v${iv_StartMonth}m -v${iv_StartDay}d -v0H -v0M -v0S "+%s")

        iv_EndDay=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange:${iv_DatesIndex}:End:Day")
        iv_EndMonth=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange:${iv_DatesIndex}:End:Month")
        iv_EndYear=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:DateRange:${iv_DatesIndex}:End:Year")
        iv_EndEpoch=$(date -v${iv_EndYear}y -v${iv_EndMonth}m -v${iv_EndDay}d -v23H -v59M -v59S "+%s")

        if [ ${iv_ThisEpoch} -ge ${iv_StartEpoch} ] && [ ${iv_ThisEpoch} -le ${iv_EndEpoch} ]
        then
          sv_SlotType="HolidayHours"
          sv_OpenTimeString=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:Day${iv_ThisDayOfWeek}:OpenTime")
          sv_CloseTimeString=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:HolidayHours:${iv_HolidayHoursIndex}:Day${iv_ThisDayOfWeek}:CloseTime")

          break
        fi
  
      done
    
      if test -n "${sv_SlotType}"
      then
        break
      fi
      
    done

    if test -z "${sv_SlotType}"
    then
      sv_SlotType="NormalHours"
      sv_OpenTimeString=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:NormalHours:Day${iv_ThisDayOfWeek}:OpenTime")
      sv_CloseTimeString=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:NormalHours:Day${iv_ThisDayOfWeek}:CloseTime")
    fi

    iv_ThisZerohourEpoch=$(date -r ${iv_ThisEpoch} -v0H -v0M -v0S "+%s")
    
    if test -n "${sv_OpenTimeString}"
    then
      iv_ThisOffsetSecs=$(($(echo "${sv_OpenTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
      iv_OpenTimeEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
    fi

    if test -n "${sv_CloseTimeString}"
    then
      iv_ThisOffsetSecs=$(($(echo "${sv_CloseTimeString}" | grep -E "^[0-9]{1,2}:[0-9]{2}$" | sed "s|:|*3600+60*|")))
      iv_CloseTimeEpoch=$((${iv_ThisZerohourEpoch}+${iv_ThisOffsetSecs}))
    fi
  
  fi

  echo "${sv_SlotType},${iv_OpenTimeEpoch},${iv_CloseTimeEpoch},${iv_StartEpoch},${iv_EndEpoch}"
}

# Find an open or close slot relative to a given epoch
# Returns a string as follows:
# <SlotType>,<OpenEpoch>,<CloseEpoch>
sf_ScanForSlot() # <"open"|"close">,<"before"|"after">,<epoch> 
{
  local sv_ThisTimeSlot
  local sv_ThisPosition
  local iv_ThisEpoch
  local iv_ThisZerohourEpoch
  local iv_Index
  local sv_InfoString
  local sv_SlotType
  local iv_ThisOpenEpoch
  local iv_ThisCloseEpoch
  local iv_SomeEpoch
  
  sv_ThisTimeSlot=${1} # "open" or "close"
  sv_ThisPosition=${2} # "before" or "after"
  iv_ThisEpoch=${3}

#    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Find ${sv_ThisTimeSlot} time slot ${sv_ThisPosition} ${iv_ThisEpoch}"
    iv_ThisZerohourEpoch=$(date -r ${iv_ThisEpoch} -v0H -v0M -v0S "+%s")
#    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_ThisZerohourEpoch ${iv_ThisZerohourEpoch}"
    for (( iv_Index=0; iv_Index<14; iv_Index++ )) # If we can't get it after 14 attempts, give up
    do
      sv_InfoString="$(sf_GetSlotForEpoch ${iv_ThisZerohourEpoch})"
#      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "sv_InfoString ${sv_InfoString}"
      sv_SlotType="$(echo ${sv_InfoString} | cut -d"," -f1)"
      case ${sv_SlotType} in
      NormalHours|HolidayHours)
        iv_ThisOpenEpoch="$(echo ${sv_InfoString} | cut -d"," -f2)"
        iv_ThisCloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"
#        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_ThisOpenEpoch ${iv_ThisOpenEpoch}"
#        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_ThisCloseEpoch ${iv_ThisCloseEpoch}"
        if [ "${sv_ThisTimeSlot}" = "open" ]
        then
          if test -n "${iv_ThisOpenEpoch}"
          then
            if [ "${sv_ThisPosition}" = "before" ]
            then
              if [ ${iv_ThisOpenEpoch} -lt ${iv_ThisEpoch} ]
              then
                break;
              fi         
            else
              if [ ${iv_ThisOpenEpoch} -gt ${iv_ThisEpoch} ]
              then
                break;
              fi         
            fi
          fi
        else
          if test -n "${iv_ThisCloseEpoch}"
          then
            if [ "${sv_ThisPosition}" = "before" ]
            then
              if [ ${iv_ThisCloseEpoch} -lt ${iv_ThisEpoch} ]
              then
                break;
              fi         
            else
              if [ ${iv_ThisCloseEpoch} -gt ${iv_ThisEpoch} ]
              then
                break;
              fi         
            fi
          fi
        fi
        ;;
        
      ClosedDays)
        if [ "${sv_ThisPosition}" = "before" ]
        then
          iv_SomeEpoch="$(echo ${sv_InfoString} | cut -d"," -f4)"
        else
          iv_SomeEpoch="$(echo ${sv_InfoString} | cut -d"," -f5)"
        fi
#        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_SomeEpoch ${iv_SomeEpoch}"

        if test -n "${iv_SomeEpoch}"
        then
          iv_ThisZerohourEpoch=$(date -r ${iv_SomeEpoch} -v0H -v0M -v0S "+%s")
#          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_ThisZerohourEpoch ${iv_ThisZerohourEpoch}"
        fi
        ;;
      
      esac
      
      if [ "${sv_ThisPosition}" = "before" ]
      then
        iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v-1d "+%s")
      else
        iv_ThisZerohourEpoch=$(date -r ${iv_ThisZerohourEpoch} -v+1d "+%s")
      fi
#      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_ThisZerohourEpoch ${iv_ThisZerohourEpoch}"
    done

  if [ ${iv_Index} -lt 14 ]
  then
    echo ${sv_SlotType},${iv_ThisOpenEpoch},${iv_ThisCloseEpoch}
  else
    echo ,,
  fi
}

# Calculate the following globals for a given epoch
#  bv_OfficeHoursAreValid
#  sv_CurrSlotType (NormalHours, HolidayHours or ClosedDays)
#  iv_CurrOpenEpoch
#  iv_CurrCloseEpoch
#  iv_NextOpenEpoch
nf_GetOfficeHours() #epoch
{
  local iv_ThisEpoch
  local sv_InfoString
 
  iv_ThisEpoch=${1}

  bv_OfficeHoursAreValid=${GLB_BC_FALSE}

  sv_InfoString="$(sf_ScanForSlot "open" "before" ${iv_ThisEpoch})"
  iv_CurrOpenEpoch="$(echo ${sv_InfoString} | cut -d"," -f2)"
  if test -n "${iv_CurrOpenEpoch}"
  then
    sv_CurrSlotType="$(echo ${sv_InfoString} | cut -d"," -f1)"
    iv_CurrCloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"
    if test -z "${iv_CurrCloseEpoch}"
    then
      sv_InfoString="$(sf_ScanForSlot "close" "after" ${iv_CurrOpenEpoch})"
      iv_CurrCloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"
    fi
    
    if test -n "${iv_CurrCloseEpoch}"
    then
      sv_InfoString="$(sf_ScanForSlot "open" "after" ${iv_CurrCloseEpoch})"
      iv_NextOpenEpoch="$(echo ${sv_InfoString} | cut -d"," -f2)"
      if test -n "${iv_NextOpenEpoch}"
      then
        iv_NextCloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"
        if test -z "${iv_NextCloseEpoch}"
        then
          sv_InfoString="$(sf_ScanForSlot "close" "after" ${iv_NextOpenEpoch})"
          iv_NextCloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"
        fi
        
        if test -n "${iv_NextCloseEpoch}"
        then
          sv_InfoString="$(sf_ScanForSlot "open" "after" ${iv_NextCloseEpoch})"
          iv_SubsequentOpenEpoch="$(echo ${sv_InfoString} | cut -d"," -f2)"
          if test -n "${iv_SubsequentOpenEpoch}"
          then
            bv_OfficeHoursAreValid=${GLB_BC_TRUE}

          fi

        fi
      fi
      
    fi
  fi

}

nf_UpgradefromV1() # copy V2 prefs from V1
{
  local sv_OldPolicyGlobalPrefFilePath
  local iv_FirstAuditEpoch
  local iv_LastAuditEpoch
  local iv_OfficeHoursTotSecs
  local iv_OutOfHoursTotSecs
  local iv_OfficeHoursUseSecs
  local iv_OutOfHoursUseSecs
  
  # If the V2 global pref file doesnt exist, check for existing V1 prefs
  if ! test -e "${GLB_SV_SHAREDPREFSFILEPATH}"
  then
    sv_OldPolicyGlobalPrefFilePath="/Library/Preferences/SystemConfiguration/${GLB_SC_PROJECTSIGNATURE}/Config/Computers/${GLB_SV_ADCOMPUTERNAME}/LabWarden.plist"
    
    iv_FirstAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${sv_OldPolicyGlobalPrefFilePath}" ":SystemOfficeHours:Shared:Audit:FirstAuditEpoch")
    iv_LastAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${sv_OldPolicyGlobalPrefFilePath}" ":SystemOfficeHours:Shared:Audit:LastAuditEpoch")
    iv_OfficeHoursTotSecs=$(GLB_SF_GETPLISTPROPERTY "${sv_OldPolicyGlobalPrefFilePath}" ":SystemOfficeHours:Shared:Audit:OfficeHoursTotSecs")
    iv_OutOfHoursTotSecs=$(GLB_SF_GETPLISTPROPERTY "${sv_OldPolicyGlobalPrefFilePath}" ":SystemOfficeHours:Shared:Audit:OutOfHoursTotSecs")
    iv_OfficeHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${sv_OldPolicyGlobalPrefFilePath}" ":SystemOfficeHours:Shared:Audit:OfficeHoursUseSecs")
    iv_OutOfHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${sv_OldPolicyGlobalPrefFilePath}" ":SystemOfficeHours:Shared:Audit:OutOfHoursUseSecs")

    if test -n "${iv_FirstAuditEpoch}"
    then
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":Gen-OfficeHours:Shared:Audit:FirstAuditEpoch" ${iv_FirstAuditEpoch}
    fi
    
    if test -n "${iv_LastAuditEpoch}"
    then
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":Gen-OfficeHours:Shared:Audit:LastAuditEpoch" ${iv_LastAuditEpoch}
    fi
    
    if test -n "${iv_OfficeHoursTotSecs}"
    then
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":Gen-OfficeHours:Shared:Audit:OfficeHoursTotSecs" ${iv_OfficeHoursTotSecs}
    fi
    
    if test -n "${iv_OutOfHoursTotSecs}"
    then
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":Gen-OfficeHours:Shared:Audit:OutOfHoursTotSecs" ${iv_OutOfHoursTotSecs}
    fi
    
    if test -n "${iv_OfficeHoursUseSecs}"
    then
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":Gen-OfficeHours:Shared:Audit:OfficeHoursUseSecs" ${iv_OfficeHoursUseSecs}
    fi
    
    if test -n "${iv_OutOfHoursUseSecs}"
    then
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":Gen-OfficeHours:Shared:Audit:OutOfHoursUseSecs" ${iv_OutOfHoursUseSecs}
    fi
    
  fi
}

nf_SetupPolicy() # determine if the policy is active
{
  local iv_StartDay
  local iv_StartMonth
  local iv_StartYear
  local iv_EndDay
  local iv_EndMonth
  local iv_EndYear
  local iv_StartEpoch
  local iv_EndEpoch
  
  iv_StartDay=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDates:Start:Day")
  iv_StartMonth=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDates:Start:Month")
  iv_StartYear=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDates:Start:Year")
    
  if test -z $(echo "${iv_StartDay}/${iv_StartMonth}/${iv_StartYear}" | grep -E "^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$")
  then
    # Invalid date entry - Disable policy
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive" ${GLB_BC_FALSE}
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy start date is invalid - policy is inactive"
    
  else
    iv_EndDay=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDates:End:Day")
    iv_EndMonth=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDates:End:Month")
    iv_EndYear=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDates:End:Year")
    
    if test -z $(echo "${iv_EndDay}/${iv_EndMonth}/${iv_EndYear}" | grep -E "^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$")
    then
      # Invalid date entry - Disable policy
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive" ${GLB_BC_FALSE}
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy end date is invalid - policy is inactive"
      
    else
      iv_StartEpoch=$(date -v${iv_StartYear}y -v${iv_StartMonth}m -v${iv_StartDay}d -v0H -v0M -v0S "+%s")
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyStartEpoch" ${iv_StartEpoch}

      iv_EndEpoch=$(date -v${iv_EndYear}y -v${iv_EndMonth}m -v${iv_EndDay}d -v0H -v0M -v0S "+%s")
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyEndEpoch" ${iv_EndEpoch}
      
      if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_StartEpoch} ] || [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt ${iv_EndEpoch} ]
      then
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive" ${GLB_BC_FALSE}
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Outside active dates - policy is inactive"
        
      else
        # Enable policy.
        
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Calculating opening and closing times."
        nf_GetOfficeHours ${GLB_IV_THISSCRIPTSTARTEPOCH}
        if [ "${bv_OfficeHoursAreValid}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive" ${GLB_BC_FALSE}
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Opening times undefined or invalid - policy is inactive"
          
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting opening times in global vars."
      
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrSlotType" "${sv_CurrSlotType}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrOpenEpoch" "${iv_CurrOpenEpoch}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrCloseEpoch" "${iv_CurrCloseEpoch}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:NextOpenEpoch" "${iv_NextOpenEpoch}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:NextCloseEpoch" "${iv_NextCloseEpoch}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:SubsequentOpenEpoch" "${iv_SubsequentOpenEpoch}"

          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "CurrSlotType ${sv_CurrSlotType}"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "CurrOpen $(date -r ${iv_CurrOpenEpoch} "+%Y%m%d-%H:%M.%S")"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "CurrClose $(date -r ${iv_CurrCloseEpoch} "+%Y%m%d-%H:%M.%S")"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "NextOpen $(date -r ${iv_NextOpenEpoch} "+%Y%m%d-%H:%M.%S")"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "NextClose $(date -r ${iv_NextCloseEpoch} "+%Y%m%d-%H:%M.%S")"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "SubsequentOpenEpoch $(date -r ${iv_SubsequentOpenEpoch} "+%Y%m%d-%H:%M.%S")"
        
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive" ${GLB_BC_TRUE}
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Policy is active"
        fi
        
      fi
    
    fi

  fi
}

nf_SetupAudit() # setup audit counts for first time
{
  local iv_StartDay
  local iv_StartMonth
  local iv_StartYear
  local iv_StartEpoch
  local iv_FirstAuditEpoch
  
  # Values need to be read as both a root and normal user - so store in the policies GlobalPrefs
  
  bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
  if [ "${bv_PolicyIsActive}" != ${GLB_BC_TRUE} ]
  then
    # Policy is inactive, so we should disable the audit
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive" ${GLB_BC_FALSE}

  else
    # Policy is active, so we should enable the audit
  
    # Get epoch when this policy started
    iv_PolicyStartEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyStartEpoch")

    # Get the first audit
    iv_FirstAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:FirstAuditEpoch")
    if test -n "${iv_FirstAuditEpoch}"
    then
    
      # First check if the audit was previously disabled.
      bv_AuditIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive")
      if [ "${bv_AuditIsActive}" = ${GLB_BC_FALSE} ]
      then
        # If so, and if there has been an audit - update the lastaudit epoch
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:LastAuditEpoch" ${GLB_IV_THISSCRIPTSTARTEPOCH}      
      fi
    
      # Check if the First audit predates the policy
      if [ ${iv_FirstAuditEpoch} -lt ${iv_PolicyStartEpoch} ]
      then
        /usr/libexec/PlistBuddy 2>/dev/null -c "Delete ':${GLB_SV_POLICYNAME}:Shared:Audit'" "${GLB_SV_SHAREDPREFSFILEPATH}"
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "First audit predates policy start date - resetting usage stats."
      fi
    fi
    
    # If there's no existing audit - create a blank one
    iv_FirstAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:FirstAuditEpoch")
    if test -z "${iv_FirstAuditEpoch}"
    then
      # First Audit not started yet - Delete old audit that shouldn't exist anyway
      /usr/libexec/PlistBuddy 2>/dev/null -c "Delete ':${GLB_SV_POLICYNAME}:Shared:Audit'" "${GLB_SV_CONFIGFILEPATH}"
      
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating empty usage stats"

      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:FirstAuditEpoch" ${GLB_IV_THISSCRIPTSTARTEPOCH}
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:LastAuditEpoch" ${GLB_IV_THISSCRIPTSTARTEPOCH}

      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursTotSecs" 0
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursUseSecs" 0
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursTotSecs" 0
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursUseSecs" 0
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursTotSecs" 0
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursUseSecs" 0

    fi
        
    # Enable audit
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive" ${GLB_BC_TRUE}
  fi
}

# check config "ActiveForDomain" setting to see if we are active or not. Can pass an optional subkey.
bf_OptionIsActiveForThisDomain() # [subkey]
{
  local bv_IsActive
  local iv_IsActiveForDomainCount
  local sv_IsActiveForDomain
  
  sv_SubKey="${1}"
  if test -n "${sv_SubKey}" 
  then
    # add a single colon to the subkey
    sv_SubKey=$(echo "${sv_SubKey}:" | sed "s|[:]*$|:|")
  fi
  
  # Note, config "ActiveForDomain" value can be null, ALL, NONE, ADDOMAIN or your.company.domain

  bv_IsActive=${GLB_BC_FALSE}
  iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:${sv_SubKey}ActiveForDomain")"
  for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
  do
    sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:${sv_SubKey}ActiveForDomain:${iv_IsActiveForDomainIndex}")
    if test -n "${sv_IsActiveForDomain}"
    then
      case ${sv_IsActiveForDomain} in
      ALL)
        bv_IsActive=${GLB_BC_TRUE}
        break 2
        ;;
        
      NONE)
        break 2
        ;;
        
      ADDOMAIN)
        sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
        ;;
          
      esac
    fi
    
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Checking domain '${sv_IsActiveForDomain}' against dhcp option 15 '${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}'"

    if [ "${sv_IsActiveForDomain}" = "${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}" ]
    then
      bv_IsActive=${GLB_BC_TRUE}
      break
    fi
  done
  
  echo "${bv_IsActive}"
}

bf_ForceLogoutIsActive() # Return true if force logouts are in effect
{
  local bv_ForceLogoutIsActive
  local iv_ForceLogoutEarlyLoginSecs
  local iv_ForceLogoutEarlyLogoutSecs
  local iv_CurrCloseEpoch
  local iv_NextOpenEpoch
  local bv_ForceLogoutInactiveOnClosedDays
  local iv_ThisZerohourEpoch
  local iv_CurrCloseZeroEpoch
  local iv_NextOpenZeroEpoch

  bv_ForceLogoutIsActive=${GLB_BC_FALSE}

  bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
  if [ "${bv_PolicyIsActive}" = ${GLB_BC_TRUE} ]
  then
    # Policy is active

    # Note, only active when on the specified domain(s) - can be null, ALL, NONE, ADDOMAIN or your.company.domain
    # Note, at start-up the domain will be null - so be aware
    bv_ForceLogoutIsActive=$(bf_OptionIsActiveForThisDomain "ForceLogout")
    
    if [ "${bv_ForceLogoutIsActive}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Workstation is on a domain that has force logouts enabled"

      # Get 'LoginEarlySecs' settings
      iv_ForceLogoutEarlyLoginSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:EarlyLoginSecs")
      if test -z "${iv_ForceLogoutEarlyLoginSecs}"
      then
        iv_ForceLogoutEarlyLoginSecs=0
      fi

      # Get 'LogoutEarlySecs' settings
      iv_ForceLogoutEarlyLogoutSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:EarlyLogoutSecs")
      if test -z "${iv_ForceLogoutEarlyLogoutSecs}"
      then
        iv_ForceLogoutEarlyLogoutSecs=0
      fi

      iv_CurrCloseEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrCloseEpoch")
      if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt $((${iv_CurrCloseEpoch}-${iv_ForceLogoutEarlyLogoutSecs})) ]
      then
        # It is after closing time
      
        iv_NextOpenEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:NextOpenEpoch")
        if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt $((${iv_NextOpenEpoch}-${iv_ForceLogoutEarlyLoginSecs})) ] 
        then
          # It is before we next open
        
          bv_ForceLogoutInactiveOnClosedDays=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:InactiveOnClosedDays")
          if [ "${bv_ForceLogoutInactiveOnClosedDays}" = ${GLB_BC_TRUE} ]
          then
            # Force logouts have been disabled for closed days - Are we a closed day?
            
            iv_ThisZerohourEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v0H -v0M -v0S "+%s")
            iv_CurrCloseZeroEpoch=$(date -r ${iv_CurrCloseEpoch} -v0H -v0M -v0S "+%s")
            iv_NextOpenZeroEpoch=$(date -r ${iv_NextOpenEpoch} -v0H -v0M -v0S "+%s")
            if [ ${iv_ThisZerohourEpoch} -ne ${iv_CurrCloseZeroEpoch} ] && [ ${iv_ThisZerohourEpoch} -ne ${iv_NextOpenZeroEpoch} ]
            then
              # It's a closed day
              
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Force logouts are disabled - they are disabled on closed days, and today is a closed day"
              bv_ForceLogoutIsActive=${GLB_BC_FALSE}
            fi
          fi
        fi
      fi
    fi
  fi

  if [ "${bv_ForceLogoutIsActive}" = ${GLB_BC_TRUE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Force logouts are enabled"
  fi
  
  echo "${bv_ForceLogoutIsActive}"
}

nf_UpdateTotCounts() # update tot counts since last audit
{
  local iv_AuditEpoch
  local iv_LastAuditEpoch
  local bv_AuditIsActive
  local iv_CurrOpenEpoch
  local iv_CurrCloseEpoch
  local iv_OfficeHoursCountUntilClosedSecs
  local iv_OfficeHoursTimeSecs
  local iv_OfficeHoursTotSecs
  local iv_OutOfHoursTimeSecs
  local iv_OutOfHoursTotSecs
  local iv_CoreHoursTimeSecs
  local iv_CoreHoursTotSecs
  local iv_BackAuditStartEpoch
  local sv_InfoString
  local iv_OpenEpoch
  local iv_CloseEpoch
  local sv_CoreOpeningTime
  local iv_CoreOpeningHour
  local iv_CoreOpeningMinute
  local iv_ThisCoreOpeningEpoch  
  local sv_CoreClosingTime
  local iv_CoreClosingHour
  local iv_CoreClosingMinute
  local iv_ThisCoreClosingEpoch
  
  bv_AuditIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive")
  if [ "${bv_AuditIsActive}" = ${GLB_BC_TRUE} ]
  then
    iv_CurrOpenEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrOpenEpoch")
    iv_CurrCloseEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrCloseEpoch")

    iv_LastAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:LastAuditEpoch")

    iv_AuditEpoch=${iv_LastAuditEpoch}
    
    # Calculate time passed since last audit
    iv_OfficeHoursTimeSecs=0
    iv_OutOfHoursTimeSecs=0
    iv_CoreHoursTimeSecs=0

    sv_InfoString="$(sf_ScanForSlot "open" "before" ${iv_AuditEpoch})"
    iv_OpenEpoch="$(echo ${sv_InfoString} | cut -d"," -f2)"
    iv_CloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"

    # added
    sv_CoreOpeningTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:CoreOpeningTime")
    if test -z "${sv_CoreOpeningTime}"
    then
      sv_CoreOpeningTime="09:00"
    fi
    
    sv_CoreClosingTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:CoreClosingTime")
    if test -z "${sv_CoreClosingTime}"
    then
      sv_CoreClosingTime="17:00"
    fi
 
    iv_CoreOpeningHour=$(echo ${sv_CoreOpeningTime} | cut -d":" -f1)
    iv_CoreOpeningMinute=$(echo ${sv_CoreOpeningTime} | cut -d":" -f2)
 
    iv_CoreClosingHour=$(echo ${sv_CoreClosingTime} | cut -d":" -f1)
    iv_CoreClosingMinute=$(echo ${sv_CoreClosingTime} | cut -d":" -f2)

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Previous audit completed to $(date -r ${iv_LastAuditEpoch} "+%Y%m%d-%H:%M.%S")"
    iv_BackAuditStartEpoch=$(date -u "+%s")
    while [ ${iv_AuditEpoch} -lt ${iv_CurrOpenEpoch} ]
    do
#      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_AuditEpoch ${iv_AuditEpoch}"
      iv_OfficeHoursCountUntilClosedSecs=$((${iv_CloseEpoch}-${iv_AuditEpoch}))
#      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_OfficeHoursCountUntilClosedSecs ${iv_OfficeHoursCountUntilClosedSecs}"
      
      if [ ${iv_OfficeHoursCountUntilClosedSecs} -gt 0 ]
      then
        iv_OfficeHoursTimeSecs=$((${iv_OfficeHoursTimeSecs}+${iv_OfficeHoursCountUntilClosedSecs}))
      fi
      
      # added
      iv_ThisCoreOpeningEpoch=$(date -r ${iv_AuditEpoch} -v${iv_CoreOpeningHour}H -v${iv_CoreOpeningMinute}M -v0S "+%s")
      iv_ThisCoreClosingEpoch=$(date -r ${iv_AuditEpoch} -v${iv_CoreClosingHour}H -v${iv_CoreClosingMinute}M -v0S "+%s")

      if [ ${iv_ThisCoreOpeningEpoch} -lt ${iv_CloseEpoch} ]
      then
 
        if [ ${iv_ThisCoreOpeningEpoch} -lt ${iv_AuditEpoch} ]
        then
          iv_ThisCoreOpeningEpoch=${iv_AuditEpoch}
        fi
  
        if [ ${iv_ThisCoreClosingEpoch} -gt ${iv_CloseEpoch} ]
        then
          iv_ThisCoreClosingEpoch=${iv_CloseEpoch}
        fi
  
        iv_CoreHoursCountUntilClosedSecs=$((${iv_ThisCoreClosingEpoch}-${iv_ThisCoreOpeningEpoch}))
#        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_CoreHoursCountUntilClosedSecs ${iv_CoreHoursCountUntilClosedSecs}"

        if [ ${iv_CoreHoursCountUntilClosedSecs} -gt 0 ]
        then
          iv_CoreHoursTimeSecs=$((${iv_CoreHoursTimeSecs}+${iv_CoreHoursCountUntilClosedSecs}))
        fi
 
      fi

      # On a Core2duo it could take up to 15 minutes to do 1 year of back audits,
      # so limit the processing to 30 secs to prevent an excessive back-audit from hogging the triggered event.
      # 30 secs is long enough to do about 13 days of back audit on a Core2duo
      if [ $(( $(date -u "+%s")-${iv_BackAuditStartEpoch} )) -gt 30 ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Back audit postponed, completed to $(date -r ${iv_AuditEpoch} "+%Y%m%d-%H:%M.%S")"
        break
      fi
      
      sv_InfoString="$(sf_ScanForSlot "open" "after" ${iv_CloseEpoch})"
      iv_OpenEpoch="$(echo ${sv_InfoString} | cut -d"," -f2)"
      iv_CloseEpoch="$(echo ${sv_InfoString} | cut -d"," -f3)"
      
      iv_AuditEpoch=${iv_OpenEpoch}
      
#      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "NormalHoursTimeSecs ${iv_OfficeHoursTimeSecs}"
#      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "HolidayHoursTimeSecs ${iv_OfficeHoursTimeSecs}"
    done
    
#    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "iv_AuditEpoch ${iv_AuditEpoch}"
#    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "NormalHoursTimeSecs ${iv_OfficeHoursTimeSecs}"
#    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "HolidayHoursTimeSecs ${iv_OfficeHoursTimeSecs}"

    # Check if we completed the back-audit
    if [ ${iv_AuditEpoch} -ge ${iv_CurrOpenEpoch} ]
    then
    
      # added
      iv_ThisCoreOpeningEpoch=$(date -r ${iv_AuditEpoch} -v${iv_CoreOpeningHour}H -v${iv_CoreOpeningMinute}M -v0S "+%s")
      iv_ThisCoreClosingEpoch=$(date -r ${iv_AuditEpoch} -v${iv_CoreClosingHour}H -v${iv_CoreClosingMinute}M -v0S "+%s")
    
      if [ ${iv_ThisCoreOpeningEpoch} -lt ${iv_AuditEpoch} ]
      then
        iv_ThisCoreOpeningEpoch=${iv_AuditEpoch}
      fi
  
      if [ ${iv_ThisCoreClosingEpoch} -gt ${iv_CurrCloseEpoch} ]
      then
        iv_ThisCoreClosingEpoch=${iv_CurrCloseEpoch}
      fi
  
      if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt ${iv_ThisCoreClosingEpoch} ]
      then
        iv_CoreHoursCountUntilClosedSecs=$((${iv_ThisCoreClosingEpoch}-${iv_ThisCoreOpeningEpoch}))
      else
        iv_CoreHoursCountUntilClosedSecs=$((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_ThisCoreOpeningEpoch}))
      fi

      if [ ${iv_CoreHoursCountUntilClosedSecs} -gt 0 ]
      then
        iv_CoreHoursTimeSecs=$((${iv_CoreHoursTimeSecs}+${iv_CoreHoursCountUntilClosedSecs}))
      fi

      if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt ${iv_CurrCloseEpoch} ]
      then
        iv_OfficeHoursCountUntilClosedSecs=$((${iv_CurrCloseEpoch}-${iv_AuditEpoch}))
      else
        iv_OfficeHoursCountUntilClosedSecs=$((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_AuditEpoch}))
      fi

      if [ ${iv_OfficeHoursCountUntilClosedSecs} -gt 0 ]
      then
        iv_OfficeHoursTimeSecs=$((${iv_OfficeHoursTimeSecs}+${iv_OfficeHoursCountUntilClosedSecs}))
      fi
   
      iv_AuditEpoch=${GLB_IV_THISSCRIPTSTARTEPOCH}
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Back audit complete at $(date -r ${iv_AuditEpoch} "+%Y%m%d-%H:%M.%S")"
 
    fi

    iv_OfficeHoursTotSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursTotSecs")
    iv_OfficeHoursTotSecs=$((${iv_OfficeHoursTotSecs}+${iv_OfficeHoursTimeSecs}))
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursTotSecs" ${iv_OfficeHoursTotSecs}
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "OfficeHoursTotSecs ${iv_OfficeHoursTotSecs}"
  
    iv_OutOfHoursTimeSecs=$((${iv_AuditEpoch}-${iv_LastAuditEpoch}-${iv_OfficeHoursTimeSecs}))
    iv_OutOfHoursTotSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursTotSecs")
    iv_OutOfHoursTotSecs=$((${iv_OutOfHoursTotSecs}+${iv_OutOfHoursTimeSecs}))
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursTotSecs" ${iv_OutOfHoursTotSecs}
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "OutOfHoursTotSecs ${iv_OutOfHoursTotSecs}"

    # added
    iv_CoreHoursTotSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursTotSecs")
    iv_CoreHoursTotSecs=$((${iv_CoreHoursTotSecs}+${iv_CoreHoursTimeSecs}))
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursTotSecs" ${iv_CoreHoursTotSecs}
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "CoreHoursTotSecs ${iv_CoreHoursTotSecs}"
 
    GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:LastAuditEpoch" ${iv_AuditEpoch}

  fi  
}

nf_UpdateUseCounts() # update use counts since last audit
{
  local bv_AuditIsActive
  local iv_LastAuditEpoch
  local iv_UseSinceLastAuditSecs
  local iv_OfficeHoursUseSecs
  local iv_OfficeHoursUseSecs
  local iv_OutOfHoursUseSecs
  local iv_CurrCloseEpoch
  local iv_UseSinceLastAuditMaxSecs
  local sv_CoreOpeningTime
  local iv_CoreOpeningHour
  local iv_CoreOpeningMinute
  local iv_ThisCoreOpeningEpoch  
  local sv_CoreClosingTime
  local iv_CoreClosingHour
  local iv_CoreClosingMinute
  local iv_ThisCoreClosingEpoch
  
  # Check that Auditing has been setup
  bv_AuditIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive")
  if [ "${bv_AuditIsActive}" = ${GLB_BC_TRUE} ]
  then
  
    # Check that someone is logged in
    if [ "$(stat -f '%Su' /dev/console)" != "root" ]
    then
  
iv_IdleSecs=$(GLB_IF_SYSTEMIDLESECS)
iv_UnattendedSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:UnattendedSecs")
if test -z "${iv_UnattendedSecs}"
then
  iv_UnattendedSecs=900
fi

if [ ${iv_IdleSecs} -lt ${iv_UnattendedSecs} ]
then

      iv_LastAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:LastAuditEpoch")
      
      # Set up a maximum value for usage - taking into account the fact that this routine is regularly polled
      iv_UseSinceLastAuditMaxSecs=$(( ${GLB_IC_SYSPOLLTRIGGERSECS}+4 ))
      
      iv_UseSinceLastAuditSecs=$((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_LastAuditEpoch}))
      if [ ${iv_UseSinceLastAuditSecs} -gt ${iv_UseSinceLastAuditMaxSecs} ]
      then
        iv_UseSinceLastAuditSecs=${iv_UseSinceLastAuditMaxSecs}
      fi

      iv_CurrCloseEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrCloseEpoch")

      iv_OutOfHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursUseSecs")
      iv_OfficeHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursUseSecs")
      iv_CoreHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursUseSecs")
      if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt ${iv_CurrCloseEpoch} ]
      then
        iv_OutOfHoursUseSecs=$((${iv_OutOfHoursUseSecs}+${iv_UseSinceLastAuditSecs}))
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursUseSecs" ${iv_OutOfHoursUseSecs}
       
      else
        iv_OfficeHoursUseSecs=$((${iv_OfficeHoursUseSecs}+${iv_UseSinceLastAuditSecs}))
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursUseSecs" ${iv_OfficeHoursUseSecs}
       
        sv_CoreOpeningTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:CoreOpeningTime")
        sv_CoreClosingTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:CoreClosingTime")
 
        iv_CoreOpeningHour=$(echo ${sv_CoreOpeningTime} | cut -d":" -f1)
        iv_CoreOpeningMinute=$(echo ${sv_CoreOpeningTime} | cut -d":" -f2)
 
        iv_CoreClosingHour=$(echo ${sv_CoreClosingTime} | cut -d":" -f1)
        iv_CoreClosingMinute=$(echo ${sv_CoreClosingTime} | cut -d":" -f2)

        iv_ThisCoreOpeningEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v${iv_CoreOpeningHour}H -v${iv_CoreOpeningMinute}M -v0S "+%s")
        iv_ThisCoreClosingEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v${iv_CoreClosingHour}H -v${iv_CoreClosingMinute}M -v0S "+%s")

        if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_ThisCoreClosingEpoch} ] 
        then
          if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt ${iv_ThisCoreOpeningEpoch} ]
          then
            iv_CoreHoursUseSecs=$((${iv_CoreHoursUseSecs}+${iv_UseSinceLastAuditSecs}))
            GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursUseSecs" ${iv_CoreHoursUseSecs}
          fi
        fi        
      fi
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "OutOfHoursUseSecs ${iv_OutOfHoursUseSecs}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "OfficeHoursUseSecs ${iv_OfficeHoursUseSecs}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "CoreHoursUseSecs ${iv_CoreHoursUseSecs}"

fi
  
    fi
  fi
}

sf_LoginStatusMessage() # Check status of login - enabled, warning, disabled or null
{
  local sv_LoginStatusMessage
  local bv_ForceLogoutIsActive
  local iv_ForceLogoutEarlyLoginSecs
  local iv_ForceLogoutEarlyLogoutSecs
  local iv_ForceLogoutEarlyWarningSecs
  local iv_CurrCloseEpoch
  local iv_RemainingUntilClosedSecs
  local iv_NextOpenEpoch
  local iv_RemainingUntilOpenSecs

  sv_LoginStatusMessage="Login enabled"

  bv_ForceLogoutIsActive=$(bf_ForceLogoutIsActive)
  
  if [ "${bv_ForceLogoutIsActive}" = ${GLB_BC_TRUE} ]
  then
    # Get 'LoginEarlySecs' settings
    iv_ForceLogoutEarlyLoginSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:EarlyLoginSecs")
    if test -z "${iv_ForceLogoutEarlyLoginSecs}"
    then
      iv_ForceLogoutEarlyLoginSecs=0
    fi

    # Get 'LogoutEarlySecs' settings
    iv_ForceLogoutEarlyLogoutSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:EarlyLogoutSecs")
    if test -z "${iv_ForceLogoutEarlyLogoutSecs}"
    then
      iv_ForceLogoutEarlyLogoutSecs=0
    fi

    # Get 'LogoutWarningSecs' settings
    iv_ForceLogoutEarlyWarningSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:EarlyWarningSecs")
    if test -z "${iv_ForceLogoutEarlyWarningSecs}"
    then
      iv_ForceLogoutEarlyWarningSecs=600
    fi

    iv_CurrCloseEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrCloseEpoch")
    iv_RemainingUntilClosedSecs=$((${iv_CurrCloseEpoch}-${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_ForceLogoutEarlyLogoutSecs}))
    if [ ${iv_RemainingUntilClosedSecs} -gt 0 ]
    then
      # It is before the current closing time

      if [ ${iv_RemainingUntilClosedSecs} -lt ${iv_ForceLogoutEarlyWarningSecs} ] 
      then
        sv_LoginStatusMessage="Login time-limit"
        
      else
        sv_LoginStatusMessage="Login enabled"
        
      fi

    else
      # It is after the current closing time
      
      iv_NextOpenEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:NextOpenEpoch")

      iv_RemainingUntilOpenSecs=$((${iv_NextOpenEpoch}-${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_ForceLogoutEarlyLoginSecs}))
      if [ ${iv_RemainingUntilOpenSecs} -gt 0 ] 
      then
        # It is before the next possible login
        
        sv_LoginStatusMessage="Login disabled"
      else
        # It is after the next possible login
      
        sv_LoginStatusMessage="Login enabled"
      fi
    fi
      
  fi

  echo "${sv_LoginStatusMessage}"
}

nf_UpdateLoginwindowText() # update usage percentage display on login window
{
  local bv_AuditIsActive
  local sv_DisplayText
  local iv_FirstAuditEpoch
  local iv_AuditAge
  local iv_AuditHideUntilAgeSecs
  local iv_CurrCloseEpoch
  local iv_NextOpenEpoch
  local sv_LoginStatusMessage
  local iv_UseSecs
  local iv_TotSecs
  local iv_UsePercentage
  
  sv_DisplayText=""
  
  bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
  if [ "${bv_PolicyIsActive}" = ${GLB_BC_TRUE} ]
  then
  
#    iv_CurrCloseEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrCloseEpoch")
#    iv_NextOpenEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:NextOpenEpoch")
#    if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -le ${iv_CurrCloseEpoch} ]
#    then
#      sv_DisplayText="Office Hours (Closing $(sf_ShowTidyDateTime ${iv_CurrCloseEpoch}))"
#
#    else
#      sv_DisplayText="Out of Hours (Opening $(sf_ShowTidyDateTime ${iv_NextOpenEpoch}))"
#      
#    fi

    bv_AuditIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive")
    if [ "${bv_AuditIsActive}" = ${GLB_BC_TRUE} ]
    then
      iv_OutOfHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OutOfHoursUseSecs")
      if test -z "${iv_OutOfHoursUseSecs}"
      then
        iv_OutOfHoursUseSecs=0
      fi
      
      iv_OfficeHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:OfficeHoursUseSecs")
      if test -z "${iv_OfficeHoursUseSecs}"
      then
        iv_OfficeHoursUseSecs=0
      fi
      
      iv_CoreHoursUseSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursUseSecs")
      if test -z "${iv_CoreHoursUseSecs}"
      then
        iv_CoreHoursUseSecs=0
      fi
      
      iv_UseSecs=$((${iv_OutOfHoursUseSecs}+${iv_OfficeHoursUseSecs}))
      
      iv_TotSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:CoreHoursTotSecs")
      if test -z "${iv_TotSecs}"
      then
        iv_TotSecs=0
      fi

      if [ ${iv_TotSecs} -gt 0 ]
      then
        iv_FirstAuditEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:Audit:FirstAuditEpoch")
        iv_AuditHideUntilAgeSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:Audit:HideUntilAgeSecs")
        if test -z "${iv_AuditHideUntilAgeSecs}"
        then
          iv_AuditHideUntilAgeSecs=0
        fi

        iv_AuditAgeSecs=$((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_FirstAuditEpoch}))
        if [ ${iv_AuditAgeSecs} -gt ${iv_AuditHideUntilAgeSecs} ]
        then
          iv_UsePercentage=$(( (${iv_UseSecs}*100)/${iv_TotSecs} ))
          sv_DisplayText="Avg Use ${iv_UsePercentage}%"
          if [ ${iv_UsePercentage} -lt 30 ]
          then
            sv_DisplayText="${sv_DisplayText} (Low)"
          else
            if [ ${iv_UsePercentage} -lt 60 ]
            then
              sv_DisplayText="${sv_DisplayText} (Good)"
            else
              sv_DisplayText="${sv_DisplayText} (High)"
            fi
          fi
        fi
      fi
    fi
  fi

  GLB_NF_SETLOGINWINDOWLINE 3 "${sv_DisplayText}"
}

nf_ForceUserLogout() # Force user logout. Could be better
{
  # cycle through usual apps and kill them dead (unsaved changes will be lost)
  ps -ax | grep "/Applications/" | grep -v "grep" | sed "s|^[ ]*||" | cut -d" " -f1 | while read iv_JobID
  do
    kill ${iv_JobID}
  done

  # applescript to log out gracefully
  /usr/bin/osascript -e 'tell application "LoginWindow" to «event aevtrlgo»'
}

# ---

case ${GLB_SV_EVENTNAME} in
    
Sys-Boot|Sys-PolicyInstall)
  # (as root) Setup Working Hours
  nf_UpgradefromV1
  nf_SetupPolicy
  bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
  if [ "${bv_PolicyIsActive}" = ${GLB_BC_TRUE} ]
  then
    nf_SetupAudit
  fi
  
  nf_UpdateLoginwindowText
  ;;
  
Sys-Poll)
  # (as root) Verify opening and closing times are still valid
  bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
  
  if [ "${bv_PolicyIsActive}" = ${GLB_BC_TRUE} ]
  then
    iv_CurrOpenEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:CurrOpenEpoch")
    iv_NextOpenEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:OfficeHours:NextOpenEpoch")

    if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOpenEpoch} ] || [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -gt ${iv_NextOpenEpoch} ]
    then
      nf_SetupPolicy
      bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
      if [ "${bv_PolicyIsActive}" = ${GLB_BC_TRUE} ]
      then
        nf_SetupAudit
      fi
    fi 
  
    # Audit usage
    bv_AuditIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:AuditIsActive")
    if [ "${bv_AuditIsActive}" = ${GLB_BC_TRUE} ]
    then
      nf_UpdateUseCounts    
      nf_UpdateTotCounts
    fi

  fi
  ;;
  
Usr-AtDesktop|Usr-Poll)
  # (as user) Log Users off out-of-hours.

  bv_PolicyIsActive=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:PolicyIsActive")
  if [ "${bv_PolicyIsActive}" = ${GLB_BC_TRUE} ]
  then
  
    sv_LoginStatusMessage="$(sf_LoginStatusMessage)"
    if test -z "${sv_LoginStatusMessage}"
    then
      sv_LoginStatusMessage="Login enabled"
    fi
    sv_LoginStatusWord="$(echo ${sv_LoginStatusMessage} | cut -d" " -f2)"

    if [ "${sv_LoginStatusWord}" != "enabled" ]
    then

      # Note, we dont ever log admin users off
      if [ "${GLB_BV_CONSOLEUSERISADMIN}" = ${GLB_BC_TRUE} ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Opening hour restrictions ignored (user is an admin)."
        
      else
  
        # Check if the user is in a group that is exempt from force log-outs
        bv_ForceLogoutUserExempt=${GLB_BC_FALSE}
        iv_ForceLogoutInactiveForGroupCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:InactiveForGroup")"
        for (( iv_ForceLogoutInactiveForGroupIndex=0; iv_ForceLogoutInactiveForGroupIndex<${iv_ForceLogoutInactiveForGroupCount}; iv_ForceLogoutInactiveForGroupIndex++ ))
        do
          sv_ForceLogoutInactiveForGroup=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:InactiveForGroup:${iv_ForceLogoutInactiveForGroupIndex}")
          if [ -n "$(id 2>/dev/null -G ${GLB_SV_CONSOLEUSERNAME} | tr " " "\n" | xargs -n 1 dscacheutil -q group -a gid | grep "name:" | cut -d " " -f2- | grep "^${sv_ForceLogoutInactiveForGroup}$")" ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO}  "Opening hour restrictions ignored (user is a member of the group ${sv_ForceLogoutInactiveForGroup})."
            bv_ForceLogoutUserExempt=${GLB_BC_TRUE}
            break
          fi
        done
        
        if [ "${bv_ForceLogoutUserExempt}" = ${GLB_BC_FALSE} ]
        then
          # Get 'LogoutWarningSecs' settings
          iv_ForceLogoutEarlyWarningSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:EarlyWarningSecs")
          if test -z "${iv_ForceLogoutEarlyWarningSecs}"
          then
            iv_ForceLogoutEarlyWarningSecs=600
          fi

          # Check idle time
          iv_ForceLogoutIdleUserSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ForceLogout:IdleUserSecs")
          if test -z "${iv_ForceLogoutIdleUserSecs}"
          then
            iv_ForceLogoutIdleUserSecs=0
          fi
        
          if [ ${iv_ForceLogoutIdleUserSecs} -gt 0 ]
          then
            iv_IdleSecs=$(GLB_IF_SYSTEMIDLESECS)
            iv_RemainingUntilLogoutSecs=$((${iv_ForceLogoutIdleUserSecs}-${iv_IdleSecs}))
            if [ ${iv_RemainingUntilLogoutSecs} -gt ${iv_ForceLogoutEarlyWarningSecs} ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "User Idle for ${iv_IdleSecs} secs"
            else
              if [ ${iv_RemainingUntilLogoutSecs} -gt 0 ]
              then
                GLB_NF_SHOWNOTIFICATION ${GLB_IC_MSGLEVELNOTICE} "If your session remains idle, you will be logged off in about ${iv_RemainingUntilLogoutSecs} seconds."
              else
                GLB_NF_SHOWNOTIFICATION ${GLB_IC_MSGLEVELWARN} "Your session has been idle too long. The system is logging you off."
                nf_ForceUserLogout
              fi
            fi
          fi
    
          # Check for closing time
          case ${sv_LoginStatusWord} in
          time-limit)
            GLB_NF_SHOWNOTIFICATION ${GLB_IC_MSGLEVELNOTICE} "${sv_LoginStatusMessage}"
            break
            ;;
        
          disabled)
            GLB_NF_SHOWNOTIFICATION ${GLB_IC_MSGLEVELWARN} "${sv_LoginStatusMessage}"
            nf_ForceUserLogout
            break
            ;;
          
          esac
      
        fi
      fi
    fi
  fi
  ;;
  
Sys-PolicyUninstall)
  # Clear login window line
  GLB_NF_SETLOGINWINDOWLINE 3 ""
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
