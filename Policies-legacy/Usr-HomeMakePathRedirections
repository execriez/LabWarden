#!/bin/bash
#
# Short:    Usr Policy script - Creates symbolic links between a network users network home and local home
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 12-Nov-2020
#
# This policy creates symbolic links at a path within a network users home folder that 
# point to files/folders in an "alternative" home. 
#
# With "Force local home directory on startup disk" enabled, the "alternate" home is the network home. 
# For network homes, the alternate home is the local home.
#
# It is called as the user and triggered by the "Usr-AtDesktop" and "Usr-ConsoleUserLoggedIn" events.
#
# If the "MakePathRedirections" key in the config is set to ${GLB_BC_FALSE}, then this policy will actively attempt
# to remove any existing redirections from the user home. 
# This is useful if you have been using folder redirections, and then change your mind.
#
# If the "MakePathRedirections" key in the config is set to ${GLB_BC_TRUE}, then this policy will act differently,
# depending on whether or not "Force local home directory on startup disk" is enabled.
#
# If "Force local home directory on startup disk" is enabled in the "User experience" tab
# of "Directory Utility", then it is serviced by the "Usr-AtDesktop" event.
#
# In this situation the user home is local, so the policy will attempt to create symbolic links 
# at a path within the user local home that point files/folders in the users network home. 
# These paths are defined in the config by the "Path" array within the "HomeIsLocal" key.
#
# If "Force local home directory on startup disk" is disabled in the "User experience" tab
# of "Directory Utility", then it is serviced by the "Usr-ConsoleUserLoggedIn" event.
#
# In this situation the user home is on the network, so the policy will attempt to create symbolic links
# at a path within the user network home that point to files/folders in the users local home. 
# These paths are defined in the config by the "Path" array within the "HomeIsOnNetwork" key.
#
# The policy will never apply path redirections on a mobile user account as this would make no sense.
#
# Triggered by the following events:
#   Usr-ConsoleUserLoggedIn (as user)
#   Usr-AtDesktop           (as user)
#
# Called as follows:    
#   Usr-HomeMakePathRedirections <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" = "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.2.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Usr-HomeFolderAliases,Usr-HomeFolderRedirection"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.
# Look at '/inc-sh/Common.sh' for a complete list.

# ---

nf_ReloadFinder() # Reload the Finder
{
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Reloading the Finder" 
  pkill -U ${GLB_SV_RUNUSERNAME} Finder
}

nf_UndoPathRedir() # FileRedirectList TargetHomeDir - Undo any existing home folder redirections
{
  local sv_TargetHomeDirPath
  local sv_RedirectListFilePath
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath

  sv_RedirectListFilePath="${1}"
  sv_TargetHomeDirPath="${2}"
    
  if test -f "${sv_RedirectListFilePath}"
  then
    # We may have symbolic links that need to be removed

    while read sv_ReqdLinkEntry
    do
      # Sanitise the Entry
      sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
  
      sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
      if test -n "${sv_ReqdLinkFilePath}"
      then
        if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
        then
          # There is a symbolic link where our file/folder should be
        
          if [ "${sv_ReqdLinkEntry}" != "${sv_ReqdLinkFilePath}" ]
          then
            # If the link was on a directory, re-create directory
            /bin/rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            mkdir -p "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          else
            /bin/rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi

        fi
      fi
      
    done < "${sv_RedirectListFilePath}"
  
  fi
}

nf_DoPathRedir() # FileRedirectList TargetHomeDir SourceHomeDir
{
  local sv_TargetHomeDirPath
  local sv_SourceHomeDirPath
  local sv_RedirectListFilePath
  local sv_BackupDirPath
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath
  local sv_EnclosingDirPath
  local bv_TargetIsLocal
  local iv_StartEpoch
  local bv_GotError

  sv_RedirectListFilePath="${1}"
  sv_TargetHomeDirPath="${2}"    # Where the link files will be created
  sv_SourceHomeDirPath="${3}"    # Where the files/folders are that the links will be pointing to to

  # Take a note when this function started
  iv_StartEpoch=$(date -u "+%s")
  
  if test -f "${sv_RedirectListFilePath}"
  then
  
    # Decide whether the target is on the local drive
    if test -n "$(stat -f "%Sd" "${sv_TargetHomeDirPath}" | grep "^disk")"
    then
      bv_TargetIsLocal=${GLB_BC_TRUE}
    else
      bv_TargetIsLocal=${GLB_BC_FALSE}
    fi

    # Backup location for existing files/folders that might be replaced by a link
    sv_BackupDirPath="${sv_TargetHomeDirPath}/Backup/"$(date -r ${iv_StartEpoch} '+%Y-%m-%d_%H-%M-%S')

    # Read entries from file
    while read sv_ReqdLinkEntry
    do
      bv_GotError=${GLB_BC_FALSE}

      # Sanitise the Entry
      sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
      
      sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
      if test -n "${sv_ReqdLinkFilePath}"
      then
      
        # Make sure there is a target enclosing folder to store the symbolic link
        sv_EnclosingDirPath="$(dirname "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}")"
        /bin/mkdir -p "${sv_EnclosingDirPath}"
      
        # Make sure we have a source folder or source file parent folder
        if [ "${sv_ReqdLinkEntry}" != "${sv_ReqdLinkFilePath}" ]
        then
          # We are linking to a directory - so make sure it exists
          /bin/mkdir -p "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}"
          if [ $? -ne 0 ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error creating folder '${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}'"
            bv_GotError=${GLB_BC_TRUE}
          fi
        else
          # We are linking to a file - so make sure the parent folder exists
          sv_EnclosingDirPath="$(dirname "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}")"
          /bin/mkdir -p "${sv_EnclosingDirPath}"
          if [ $? -ne 0 ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error creating folder '${sv_EnclosingDirPath}'"
            bv_GotError=${GLB_BC_TRUE}
          fi
        fi
      
        # If there are errors at source, delete any existing link at target
        if [ "${bv_GotError}" = ${GLB_BC_TRUE} ]
        then
          if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi
        
        else
        
          if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # If the filepath references a link, get the originating filepath
            sv_ExistingLinkTargetPath="$(stat -f %Y "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}")"
            if [ "${sv_ExistingLinkTargetPath}" = "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}" ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "A valid link already exists for folder '${sv_ReqdLinkFilePath}'."
            else
              rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            fi
          fi

          # Back up anything that exists at the target (where the link is going to be stored)
          if test -e "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # something exists at the target
            if ! test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            then
              # Its not an existing link
              if test -d "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
              then
                # If the existing folder at the target is local, remove any ACLs that might stop us doing our stuff
                if [ "${bv_TargetIsLocal}" = ${GLB_BC_TRUE} ]
                then
                  /bin/chmod -RN "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                fi
                # Check if existing folder is empty - and backup if necessary
                if test -z "$(ls -A1 "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" | grep -Ev "^.DS_Store$|^.localized$")"
                then
                  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Deleting empty folder '${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}'."
                  /bin/rm -fR "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                else
                  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Backing up existing folder '${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}'."
                  # Make sure there is a target enclosing folder to backup the folder
                  sv_EnclosingDirPath="$(dirname "${sv_BackupDirPath}${sv_ReqdLinkFilePath}")"
                  /bin/mkdir -p "${sv_EnclosingDirPath}"
                  # Move (back up) existing folder at target
                  /bin/mv -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_EnclosingDirPath}/"
                fi
              else
                GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Backing up existing file '${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}'."
                # If the existing file at the target is local, remove any ACLs that might stop us doing our stuff
                if [ "${bv_TargetIsLocal}" = ${GLB_BC_TRUE} ]
                then
                  /bin/chmod -N "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                fi
                # Make sure there is a target enclosing folder to backup the file
                sv_EnclosingDirPath="$(dirname "${sv_BackupDirPath}${sv_ReqdLinkFilePath}")"
                /bin/mkdir -p "${sv_EnclosingDirPath}"
                # Move (back up) existing file at target
                /bin/mv -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_EnclosingDirPath}/"
              fi
            fi
          fi
          
          # Only create the link if nothing exists at the target
          if ! test -e "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # Create link - source file/folder -to- target link
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating link for folder '${sv_ReqdLinkFilePath}'."
            /bin/ln -sf "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi

        fi
      fi
    done < "${sv_RedirectListFilePath}"

  fi

}

nf_UnmakePathRedirections()
{
  if test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
  then
    nf_UndoPathRedir "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" "${GLB_SV_CONSOLEUSERHOMEDIRPATH}"
  fi

  # Check if the Desktop was linked/unlinked
  if test -n "$(printf "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt")" | grep -E "^/Desktop/$")"
  then
    # Kill the Finder (Refreshes Desktop)
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Folder redirections removed - Finder needs to be reloaded"
    nf_ReloadFinder
  fi

  rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"

}

nf_MakePathRedirections()
{
  local sv_DoRedir
  local sv_ConsoleUserHomeAltDirPath
  local sv_RedirPathConfigKey
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath
  local iv_ObjectCount
  local iv_LoopCount
  
  sv_DoRedir="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:MakePathRedirections")"
  if [ "${sv_DoRedir}" = ${GLB_BC_FALSE} ]
  then
    # Config tells us to unmake any existing folder redirections
    nf_UnmakePathRedirections
    
  else
    # Config tells us to make folder redirections
    if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_TRUE} ]
    then
      # The user home is local, so the links should point to the network home
      sv_RedirPathConfigKey="HomeIsLocal"
    
      # Links should point to the network home
      sv_ConsoleUserHomeAltDirPath="${GLB_SV_CONSOLEUSERSHAREDIRPATH}"
    
    else
      # The user home is on the network
      sv_RedirPathConfigKey="HomeIsOnNetwork"

      # Links should point to the local home
      sv_ConsoleUserHomeAltDirPath="${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}"
 
    fi

    if [ -z "${sv_ConsoleUserHomeAltDirPath}" ]
    then
      # The alternate home dir is unavailable - so remove any existing redirections
      # Shouldn't ever get here, because this condition is dealt with before this function is called
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error, alternate home dir is unavailable."
      nf_UnmakePathRedirections
      
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "sv_ConsoleUserHomeAltDirPath ${sv_ConsoleUserHomeAltDirPath}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "GLB_SV_CONSOLEUSERHOMEDIRPATH ${GLB_SV_CONSOLEUSERHOMEDIRPATH}"
    
      # There shouldn't be any folder redirections on the alternate home
      # If there are, these may have been left when swapping between "Network Homes" and "Force local homes".
      if test -s "${sv_ConsoleUserHomeAltDirPath}/.FolderRedir.txt"
      then
        nf_UndoPathRedir "${sv_ConsoleUserHomeAltDirPath}/.FolderRedir.txt" "${sv_ConsoleUserHomeAltDirPath}"
      fi
      rm -f "${sv_ConsoleUserHomeAltDirPath}/.FolderRedir.txt"

      # Make sure the link list exists
      touch "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"

      # Check the existing link list
      rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
      touch "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
      while read sv_ReqdLinkEntry
      do
        # Sanitise the Entry
        sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
        sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
        if test -n "${sv_ReqdLinkFilePath}"
        then
          if test -L "${GLB_SV_CONSOLEUSERHOMEDIRPATH}${sv_ReqdLinkFilePath}"
          then
            echo "${sv_ReqdLinkEntry}" >>"${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
          fi
        fi
      done < "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
            
      # Create the required link list
      rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
      touch "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
      iv_ObjectCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:${sv_RedirPathConfigKey}:Path")"
      for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
      do
        sv_ReqdLinkEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:${sv_RedirPathConfigKey}:Path:${iv_LoopCount}")"
        sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
        sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
        if test -n "${sv_ReqdLinkFilePath}"
        then
          echo "${sv_ReqdLinkEntry}" >>"${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
        fi
      done
      
      # Find out which folders we need to check for links/unlinks
      echo "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" ; cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt" )" | sort -u > "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt"

      # Find out which folders we need to unlink (if we ever change the link list)
      echo "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" ; cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt" )" | sort | uniq -u > "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt"

      # Find out which folders we need to link
      echo "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt" ; cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt" )" | sort | uniq -u > "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Link.txt"

      # Link files (did use .FolderRedir-Link.txt, but the alternate home folder might change - so we should remake all links)
      if test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Linking folders."
        nf_DoPathRedir  "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" "${GLB_SV_CONSOLEUSERHOMEDIRPATH}" "${sv_ConsoleUserHomeAltDirPath}"
      fi

      # Unlink files
      if test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt"
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Unlinking folders."
        nf_UndoPathRedir "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt" "${GLB_SV_CONSOLEUSERHOMEDIRPATH}"
      fi

      # Check if the Desktop was linked/unlinked
      if test -n "$(printf "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt";cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Link.txt")" | grep -E "^/Desktop/$")"
      then
        # Kill the Finder (Refreshes Desktop)
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Folders redirected - Finder needs to be reloaded."
        nf_ReloadFinder
      fi

      # Delete temporary files
      rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
      rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt"
      rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt"
      rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Link.txt"

      # Delete the link file if it is empty
      if ! test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
      then
        # Link list file is empty
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "There are no defined folder redirections."
        rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
        
      fi      
      
    fi     
  fi

}

# ---

# Exit if the user home folder doesn't exist
if [ ! -e "${GLB_SV_CONSOLEUSERHOMEDIRPATH}" ]
then
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - home folder doesn't exist."
else
  # Exit if user is a local account
  if [ "${GLB_BV_CONSOLEUSERISLOCAL}" = ${GLB_BC_TRUE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Policy aborted - User account is local."
  else
    # Exit if user is a mobile account
    if [ "${GLB_BV_CONSOLEUSERISMOBILE}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Policy aborted - User account is mobile."
    else
    
# ---

case ${GLB_SV_EVENTNAME} in
    
Usr-AtDesktop|Usr-PolicyInstall)
  # Folder redirections on "forced local" homes are done when the user gets to a desktop
  if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_FALSE} ]
  then
    # The user home is on the network
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Policy aborted - conditions met, but policy doesn't run during a ${GLB_SV_EVENTNAME} event."
       
  else
    # The user home is "forced local"

    if [ -z "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
    then
      # "Force local home directory on startup disk" is enabled, but there is no network home mounted
        
      nf_UnmakePathRedirections
      GLB_NF_SHOWNOTIFICATION ${GLB_IC_MSGLEVELWARN} "Network share is not available at present. Try Restarting."

    else
      nf_MakePathRedirections

    fi
        
  fi
  ;;
      
Usr-ConsoleUserLoggedIn)
  # Folder redirections on network homes are done as the user is logging in
  if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_TRUE} ]
  then
    # The user home is "forced local"
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "NOTE, policy aborted: conditions met, but policy doesn't run during a ${GLB_SV_EVENTNAME} event."
       
  else
    # The user home is on the network

    if [ ! -e "${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}" ]
    then
      # User home is on the network, but there is no local home
        
      nf_UnmakePathRedirections
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Local home is unavailable - that's odd."
    
    else
      nf_MakePathRedirections

    fi
        
  fi
  ;;

Usr-PolicyUninstall)
  nf_UnmakePathRedirections
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac

# ---

    fi
  fi
fi

# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
