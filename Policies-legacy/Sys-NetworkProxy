#!/bin/bash
#
# Short:    Sys Policy script - Sets the system network proxy
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 12-Nov-2020
#
# Triggered by the following events:
#   Sys-NetworkUp (as root)
#
# Called as follows:    
#   Sys-NetworkProxy <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" != "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.2.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Sys-InternetProxy"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.
# Look at '/inc-sh/Common.sh' for a complete list.

# ---

# Defining this allows me use the same core code with multiple policies

# Is this setting associated with a network interface
bv_IsNetworkInterfaceSetting=${GLB_BC_TRUE}

# ---

if_GetConfigOptionPathFromDomain() # <TargetDomain> - Return the config ConfigOptionPath for the supplied target domain
{
  local sv_TargetDomain
  local iv_ConfigOptionCount
  local iv_DomainListCount
  local sv_DomainListEntry
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X) 
  local iv_IsActiveForDomainCount
  local iv_IsActiveForDomainIndex
  local sv_IsActiveForDomain
# END LEGACY CONFIG SUPPORT (PRE 3.X)
# ----------
  
  sv_TargetDomain="${1}"
  
  iv_ConfigOptionCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption")"
  if [ ${iv_ConfigOptionCount} -gt 0 ]
  then
    for (( iv_ConfigOptionIndex=0; iv_ConfigOptionIndex<${iv_ConfigOptionCount}; iv_ConfigOptionIndex++ ))
    do
      iv_DomainListCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList")"
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "${sv_TargetDomain}" ] || [ "${sv_DomainListEntry}" = "ALL" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "DEFAULT" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
    done
    
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X)
  else
    # Support for the old-style config. This will be removed in future updates.
    iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain")"
    if [ ${iv_IsActiveForDomainCount} -gt 0 ]
    then
      for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
      do
        sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain:${iv_IsActiveForDomainIndex}")
        if test -n "${sv_IsActiveForDomain}"
        then
          case ${sv_IsActiveForDomain} in
          ALL)
            echo ":${GLB_SV_CONFIGUUID}:Config"
            break 2
            ;;
        
          NONE)
            ;;
        
          ADDOMAIN)
            sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
            ;;
          
          esac
        fi
    
        if [ "${sv_IsActiveForDomain}" = "${sv_TargetDomain}" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config"
          break
        fi
      done
    fi
# END LEGACY CONFIG SUPPORT (PRE 3.X) 
# ----------

  fi
}

nf_ApplyGlobalPrefs() # Apply settings from Global Prefs
{
  local sv_ActiveConfig
  local sv_ConfigOptionPath
  local sv_NetworkServiceInterfaceName

  local bv_ProxyAutoDiscoveryEnable
  local bv_ProxyAutoConfigEnable
  local sv_ProxyAutoConfigURLString
  local bv_HTTPEnable
  local sv_HTTPProxy
  local iv_HTTPPort
  local bv_HTTPSEnable
  local sv_HTTPSProxy
  local iv_HTTPSPort
  local bv_RTSPEnable
  local sv_RTSPProxy
  local iv_RTSPPort
  local bv_FTPEnable
  local sv_FTPProxy
  local iv_FTPPort
  local bv_SOCKSEnable
  local sv_SOCKSProxy
  local iv_SOCKSPort
  local bv_GopherEnable
  local sv_GopherProxy
  local iv_GopherPort
  local sv_ExceptionsList

  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" = "CLEAR" ]
      then
        # default options
    
        bv_ProxyAutoDiscoveryEnable=${GLB_BC_FALSE}
        bv_ProxyAutoConfigEnable=${GLB_BC_FALSE}
        bv_HTTPEnable=${GLB_BC_FALSE}
        bv_HTTPSEnable=${GLB_BC_FALSE}
        bv_RTSPEnable=${GLB_BC_FALSE}
        bv_FTPEnable=${GLB_BC_FALSE}
        bv_SOCKSEnable=${GLB_BC_FALSE}
        bv_GopherEnable=${GLB_BC_FALSE}
        sv_ExceptionsList="*.local 169.254/16 127.0.0.1 localhost"
    
      else
        # config options
    
        bv_ProxyAutoDiscoveryEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:ProxyAutoDiscoveryEnable")"
        if [ "${bv_ProxyAutoDiscoveryEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_ProxyAutoDiscoveryEnable=${GLB_BC_FALSE}
        fi

        bv_ProxyAutoConfigEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:ProxyAutoConfigEnable")"
        if [ "${bv_ProxyAutoConfigEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_ProxyAutoConfigEnable=${GLB_BC_FALSE}
        else
          sv_ProxyAutoConfigURLString="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:ProxyAutoConfigURLString")"
          if [ -z "${sv_ProxyAutoConfigURLString}" ]
          then
            bv_ProxyAutoConfigEnable=${GLB_BC_FALSE}
          fi
        fi

        bv_HTTPEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:HTTPEnable")"
        if [ "${bv_HTTPEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_HTTPEnable=${GLB_BC_FALSE}
        else
          sv_HTTPProxy="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:HTTPProxy")"
          if [ -z "${sv_HTTPProxy}" ]
          then
            bv_HTTPEnable=${GLB_BC_FALSE}
          else
            iv_HTTPPort="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:HTTPPort")"
            if [ -z "${iv_HTTPPort}" ]
            then
              bv_HTTPEnable=${GLB_BC_FALSE}
            fi
          fi
        fi

        bv_HTTPSEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:HTTPSEnable")"
        if [ "${bv_HTTPSEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_HTTPSEnable=${GLB_BC_FALSE}
        else
          sv_HTTPSProxy="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:HTTPSProxy")"
          if [ -z "${sv_HTTPSProxy}" ]
          then
            bv_HTTPSEnable=${GLB_BC_FALSE}
          else
            iv_HTTPSPort="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:HTTPSPort")"
            if [ -z "${iv_HTTPSPort}" ]
            then
              bv_HTTPSEnable=${GLB_BC_FALSE}
            fi
          fi
        fi

        bv_RTSPEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:RTSPEnable")"
        if [ "${bv_RTSPEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_RTSPEnable=${GLB_BC_FALSE}
        else
          sv_RTSPProxy="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:RTSPProxy")"
          if [ -z "${sv_RTSPProxy}" ]
          then
            bv_RTSPEnable=${GLB_BC_FALSE}
          else
            iv_RTSPPort="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:RTSPPort")"
            if test -z "${iv_RTSPPort}"
            then
              bv_RTSPEnable=${GLB_BC_FALSE}
            fi
          fi
        fi

        bv_FTPEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:FTPEnable")"
        if [ "${bv_FTPEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_FTPEnable=${GLB_BC_FALSE}
        else
          sv_FTPProxy="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:FTPProxy")"
          if [ -z "${sv_FTPProxy}" ]
          then
            bv_FTPEnable=${GLB_BC_FALSE}
          else
            iv_FTPPort="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:FTPPort")"
            if [ -z "${iv_FTPPort}" ]
            then
              bv_FTPEnable=${GLB_BC_FALSE}
            fi
          fi
        fi
  
        bv_SOCKSEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:SOCKSEnable")"
        if [ "${bv_SOCKSEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_SOCKSEnable=${GLB_BC_FALSE}
        else
          sv_SOCKSProxy="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:SOCKSProxy")"
          if [ -z "${sv_SOCKSProxy}" ]
          then
            bv_SOCKSEnable=${GLB_BC_FALSE}
          else
            iv_SOCKSPort="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:SOCKSPort")"
            if [ -z "${iv_SOCKSPort}" ]
            then
              bv_SOCKSEnable=${GLB_BC_FALSE}
            fi
          fi
        fi

        bv_GopherEnable="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:GopherEnable")"
        if [ "${bv_GopherEnable}" != ${GLB_BC_TRUE} ]
        then
          bv_GopherEnable=${GLB_BC_FALSE}
        else
          sv_GopherProxy="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:GopherProxy")"
          if [ -z "${sv_GopherProxy}" ]
          then
            bv_GopherEnable=${GLB_BC_FALSE}
          else
            iv_GopherPort="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:GopherPort")"
            if [ -z "${iv_GopherPort}" ]
            then
              bv_GopherEnable=${GLB_BC_FALSE}
            fi
          fi
        fi

        sv_ExceptionsList="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:ExceptionsList" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | tr "\n" " ")"
        if [ -z "${sv_ExceptionsList}" ]
        then
          sv_ExceptionsList="*.local 169.254/16 127.0.0.1 localhost"
        fi
  
      fi

      # Set the live options
      sv_NetworkServiceInterfaceName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NetworkServiceInterfaceName")"
      if [ -n "${sv_NetworkServiceInterfaceName}" ]
      then
    
        if [ "${bv_ProxyAutoDiscoveryEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Switching off 'Auto Proxy Discovery' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setproxyautodiscovery "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Switching on 'Auto Proxy Discovery' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setproxyautodiscovery "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_ProxyAutoConfigEnable}" = ${GLB_BC_FALSE} ] 
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Switching off 'Automatic Proxy Configuration' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setautoproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'Automatic Proxy Configuration' to '${sv_ProxyAutoConfigURLString}' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setautoproxyurl "${sv_NetworkServiceInterfaceName}" "${sv_ProxyAutoConfigURLString}"
          /usr/sbin/networksetup -setautoproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_HTTPEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Clearing 'Web Proxy' settings on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setwebproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'Web Proxy' to '${sv_HTTPProxy}:${iv_HTTPPort}' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setwebproxy "${sv_NetworkServiceInterfaceName}" "${sv_HTTPProxy}" "${iv_HTTPPort}" off
          /usr/sbin/networksetup -setwebproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_HTTPSEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Clearing 'Secure Web Proxy' settings on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setsecurewebproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'Secure Web Proxy' to '${sv_HTTPSProxy}:${iv_HTTPSPort}' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setsecurewebproxy "${sv_NetworkServiceInterfaceName}" "${sv_HTTPSProxy}" "${iv_HTTPSPort}" off
          /usr/sbin/networksetup -setsecurewebproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_RTSPEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Clearing 'Secure Streaming Proxy' settings on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setstreamingproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'Secure Streaming Proxy' to '${sv_RTSPProxy}:${iv_RTSPPort}' on '${sv_NetworkServiceInterfaceName}'"
         /usr/sbin/networksetup -setstreamingproxy "${sv_NetworkServiceInterfaceName}" "${sv_RTSPProxy}" "${iv_RTSPPort}" off
         /usr/sbin/networksetup -setstreamingproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_FTPEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Clearing 'FTP Proxy' settings on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setftpproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'FTP Proxy' to '${sv_FTPProxy}:${iv_FTPPort}' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setftpproxy "${sv_NetworkServiceInterfaceName}" "${sv_FTPProxy}" "${iv_FTPPort}" off
          /usr/sbin/networksetup -setftpproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_SOCKSEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Clearing 'SOCKS Proxy' settings on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setsocksfirewallproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'SOCKS Proxy' to '${sv_SOCKSProxy}:${iv_SOCKSPort}' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setsocksfirewallproxy "${sv_NetworkServiceInterfaceName}" "${sv_SOCKSProxy}" "${iv_SOCKSPort}" off
          /usr/sbin/networksetup -setsocksfirewallproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        if [ "${bv_GopherEnable}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Clearing 'Gopher Proxy' settings on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setgopherproxystate "${sv_NetworkServiceInterfaceName}" off
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting 'Gopher Proxy' to '${sv_GopherProxy}:${iv_GopherPort}' on '${sv_NetworkServiceInterfaceName}'"
          /usr/sbin/networksetup -setgopherproxy "${sv_NetworkServiceInterfaceName}" "${sv_GopherProxy}" "${iv_GopherPort}" off
          /usr/sbin/networksetup -setgopherproxystate "${sv_NetworkServiceInterfaceName}" on
        fi

        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Setting Proxy Bypass Domains on '${sv_NetworkServiceInterfaceName}'"
        /usr/sbin/networksetup -setproxybypassdomains "${sv_NetworkServiceInterfaceName}" ${sv_ExceptionsList}
      
      fi
    
    fi
  
  fi 
}

# ---

case ${GLB_SV_EVENTNAME} in
    
Sys-PolicyUninstall)
  # Clear the settings first - if appropriate

  # Grab lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi
  
  # Get the current active settings
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting, so it's our responsibility to clear it
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
      nf_ApplyGlobalPrefs
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Sys-NetworkUp|Sys-PolicyInstall) 
  # Apply settings for active domain
  sv_TargetDomain="${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}"

  if [ -z "${sv_TargetDomain}" ]
  then
    sv_TargetDomain="NONE"
  fi
  
  # Grab  lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi

  # Get the existing active config
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  sv_ConfigOptionPath=$(if_GetConfigOptionPathFromDomain "${sv_TargetDomain}")
  if [ -n "${sv_ConfigOptionPath}" ]
  then
    # This config contains the new active settings

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings were found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" != "${GLB_SV_CONFIGUUID}" ]
      then
        # Another config is currently active, so It's that configs responsibility to clear the active settings

        # Release lock in order for the other config to do its stuff
        GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
      
        # Wait up to 10 seconds for the other config to clear the active settings
        for (( iv_WaitIndex=0; iv_WaitIndex<10; iv_WaitIndex++ ))
        do
          sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
          if [ -z "${sv_LastActiveConfig}" ]
          then
            break
          fi
          sleep 1
        done

        # Grab  lock
        if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
        fi

        # Check if the config was cleared
        sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
        if [ -n "${sv_LastActiveConfig}" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "The config that configured the existing settings did not clear them, so we will instead."
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
          nf_ApplyGlobalPrefs
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
        fi
      fi
    fi
    
    # Check if the setup is different
    sv_LastNetworkServiceInterfaceName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NetworkServiceInterfaceName")"
    if [ "${bv_IsNetworkInterfaceSetting}" = ${GLB_BC_TRUE} ] && [ "${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}" != "${sv_LastNetworkServiceInterfaceName}" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Network interface has changed from '${sv_LastNetworkServiceInterfaceName}' to '${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}'"
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi

    sv_LastConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ "${sv_ConfigOptionPath}" != "${sv_LastConfigOptionPath}" ] 
    then
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi
    
    # If the setup has changed, we will want to apply the new settings
    if [ "${bv_SetupIsDifferent}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Applying settings for domain '${sv_TargetDomain}'"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "${sv_ConfigOptionPath}"
      nf_ApplyGlobalPrefs
    
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings for domain '${sv_TargetDomain}' are already in place"
    
    fi
    
  else
    # Another config contains the new active settings
    
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "No settings found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
      then
        # This config contains the current active setting, so it's our responsibility to clear it
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
        nf_ApplyGlobalPrefs
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
      fi
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
