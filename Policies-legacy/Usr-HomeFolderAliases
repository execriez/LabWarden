#!/bin/bash
#
# Short:    Usr Policy script - Creates symbolic links between a network users network home and local home
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 12-Nov-2020
#
# This policy creates symbolic links at a path within a network users home folder that 
# point to files/folders in an "alternative" home. 
#
# With "Force local home directory on startup disk" enabled, the "alternate" home is the network home. 
# For network homes, the alternate home is the local home.
#
# It is called as root when triggered by the "Sys-NetworkUp" event, and is called as a user when triggered
# by the "Usr-AtDesktop" and "Usr-VolDidMount" events.
#
# If "Force local home directory on startup disk" is enabled in the "User experience" tab
# of "Directory Utility", then the user home is local.
# In this situation the policy will look for files/folders defined in the "Path:" array.
# It will then attempt to create symbolic links in the user local home that point to these files/folders
# within the users network home.
#
# If "Force local home directory on startup disk" is disabled in the "User experience" tab
# of "Directory Utility", then the user home is on the network.
# In this situation the policy will look for files/folders defined in the "Legacy:Path:" array.
# It will then attempt to create symbolic links in the user network home that point to these files/folders
# within in the users local home. 
#
# Triggered by the following events:
#   Sys-NetworkUp           (as root)
#   Usr-AtDesktop           (as user)
#
# Called as follows:    
#   Usr-HomeFolderAliases <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" = "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.2.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Usr-HomeFolderRedirection,Usr-CreateHomeFolderAliases,Usr-CreateHomeFolderRedirections"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.
# Look at '/inc-sh/Common.sh' for a complete list.

# ---

# Defining this allows me use the same core code with multiple policies

# Is this setting associated with a network interface
bv_IsNetworkInterfaceSetting=${GLB_BC_FALSE}

# ---

if_GetConfigOptionPathFromDomain() # <TargetDomain> - Return the config ConfigOptionPath for the supplied target domain
{
  local sv_TargetDomain
  local iv_ConfigOptionCount
  local iv_DomainListCount
  local sv_DomainListEntry
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X) 
  local iv_IsActiveForDomainCount
  local iv_IsActiveForDomainIndex
  local sv_IsActiveForDomain
# END LEGACY CONFIG SUPPORT (PRE 3.X)
# ----------
  
  sv_TargetDomain="${1}"
  
  iv_ConfigOptionCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption")"
  if [ ${iv_ConfigOptionCount} -gt 0 ]
  then
    for (( iv_ConfigOptionIndex=0; iv_ConfigOptionIndex<${iv_ConfigOptionCount}; iv_ConfigOptionIndex++ ))
    do
      iv_DomainListCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList")"
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "${sv_TargetDomain}" ] || [ "${sv_DomainListEntry}" = "ALL" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "DEFAULT" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
    done
    
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X)
  else
    # Support for the old-style config. This will be removed in future updates.
    iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain")"
    if [ ${iv_IsActiveForDomainCount} -gt 0 ]
    then
      for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
      do
        sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain:${iv_IsActiveForDomainIndex}")
        if test -n "${sv_IsActiveForDomain}"
        then
          case ${sv_IsActiveForDomain} in
          ALL)
            echo ":${GLB_SV_CONFIGUUID}:Config"
            break 2
            ;;
        
          NONE)
            ;;
        
          ADDOMAIN)
            sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
            ;;
          
          esac
        fi
    
        if [ "${sv_IsActiveForDomain}" = "${sv_TargetDomain}" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config"
          break
        fi
      done
    fi
# END LEGACY CONFIG SUPPORT (PRE 3.X) 
# ----------

  fi
}

# ---

nf_ReloadFinder() # Reload the Finder
{
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Reloading the Finder" 
  pkill -U ${GLB_SV_RUNUSERNAME} Finder
}

nf_UndoPathRedir() # FileRedirectList TargetHomeDir - Undo any existing home folder redirections
{
  local sv_TargetHomeDirPath
  local sv_RedirectListFilePath
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath

  sv_RedirectListFilePath="${1}"
  sv_TargetHomeDirPath="${2}"
    
  if test -f "${sv_RedirectListFilePath}"
  then
    # We may have symbolic links that need to be removed

    while read sv_ReqdLinkEntry
    do
      # Sanitise the Entry
      sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
  
      sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
      if test -n "${sv_ReqdLinkFilePath}"
      then
        if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
        then
          # There is a symbolic link where our file/folder should be
        
          if [ "${sv_ReqdLinkEntry}" != "${sv_ReqdLinkFilePath}" ]
          then
            # If the link was on a directory, re-create directory
            /bin/rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            mkdir -p "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          else
            /bin/rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi

        fi
      fi
      
    done < "${sv_RedirectListFilePath}"
  
  fi
}

nf_DoPathRedir() # FileRedirectList TargetHomeDir SourceHomeDir
{
  local sv_TargetHomeDirPath
  local sv_SourceHomeDirPath
  local sv_RedirectListFilePath
  local sv_BackupDirPath
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath
  local sv_EnclosingDirPath
  local bv_TargetIsLocal
  local iv_StartEpoch
  local bv_GotError

  sv_RedirectListFilePath="${1}"
  sv_TargetHomeDirPath="${2}"    # Where the link files will be created
  sv_SourceHomeDirPath="${3}"    # Where the files/folders are that the links will be pointing to to

  # Take a note when this function started
  iv_StartEpoch=$(date -u "+%s")
  
  if test -f "${sv_RedirectListFilePath}"
  then
  
    # Decide whether the target is on the local drive
    if test -n "$(stat -f "%Sd" "${sv_TargetHomeDirPath}" | grep "^disk")"
    then
      bv_TargetIsLocal=${GLB_BC_TRUE}
    else
      bv_TargetIsLocal=${GLB_BC_FALSE}
    fi

    # Backup location for existing files/folders that might be replaced by a link
    sv_BackupDirPath="${sv_TargetHomeDirPath}/Backup/"$(date -r ${iv_StartEpoch} '+%Y-%m-%d_%H-%M-%S')

    # Read entries from file
    while read sv_ReqdLinkEntry
    do
      bv_GotError=${GLB_BC_FALSE}

      # Sanitise the Entry
      sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
      
      sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
      if test -n "${sv_ReqdLinkFilePath}"
      then
      
        # Make sure there is a target enclosing folder to store the symbolic link
        sv_EnclosingDirPath="$(dirname "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}")"
        /bin/mkdir -p "${sv_EnclosingDirPath}"
      
        # Make sure we have a source folder or source file parent folder
        if [ "${sv_ReqdLinkEntry}" != "${sv_ReqdLinkFilePath}" ]
        then
          # We are linking to a directory - so make sure it exists
          /bin/mkdir -p "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}"
          if [ $? -ne 0 ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error creating folder '${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}'"
            bv_GotError=${GLB_BC_TRUE}
          fi
        else
          # We are linking to a file - so make sure the parent folder exists
          sv_EnclosingDirPath="$(dirname "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}")"
          /bin/mkdir -p "${sv_EnclosingDirPath}"
          if [ $? -ne 0 ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error creating folder '${sv_EnclosingDirPath}'"
            bv_GotError=${GLB_BC_TRUE}
          fi
        fi
      
        # If there are errors at source, delete any existing link at target
        if [ "${bv_GotError}" = ${GLB_BC_TRUE} ]
        then
          if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi
        
        else
        
          if test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # If the filepath references a link, get the originating filepath
            sv_ExistingLinkTargetPath="$(stat -f %Y "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}")"
            if [ "${sv_ExistingLinkTargetPath}" = "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}" ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "A valid link already exists for folder '${sv_ReqdLinkFilePath}'."
            else
              rm -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            fi
          fi

          # Back up anything that exists at the target (where the link is going to be stored)
          if test -e "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # something exists at the target
            if ! test -L "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
            then
              # Its not an existing link
              if test -d "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
              then
                # If the existing folder at the target is local, remove any ACLs that might stop us doing our stuff
                if [ "${bv_TargetIsLocal}" = ${GLB_BC_TRUE} ]
                then
                  /bin/chmod -RN "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                fi
                # Check if existing folder is empty - and backup if necessary
                if test -z "$(ls -A1 "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" | grep -Ev "^.DS_Store$|^.localized$")"
                then
                  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Deleting empty folder '${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}'."
                  /bin/rm -fR "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                else
                  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Backing up existing folder '${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}'."
                  # Make sure there is a target enclosing folder to backup the folder
                  sv_EnclosingDirPath="$(dirname "${sv_BackupDirPath}${sv_ReqdLinkFilePath}")"
                  /bin/mkdir -p "${sv_EnclosingDirPath}"
                  # Move (back up) existing folder at target
                  /bin/mv -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_EnclosingDirPath}/"
                fi
              else
                GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Backing up existing file '${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}'."
                # If the existing file at the target is local, remove any ACLs that might stop us doing our stuff
                if [ "${bv_TargetIsLocal}" = ${GLB_BC_TRUE} ]
                then
                  /bin/chmod -N "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
                fi
                # Make sure there is a target enclosing folder to backup the file
                sv_EnclosingDirPath="$(dirname "${sv_BackupDirPath}${sv_ReqdLinkFilePath}")"
                /bin/mkdir -p "${sv_EnclosingDirPath}"
                # Move (back up) existing file at target
                /bin/mv -f "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_EnclosingDirPath}/"
              fi
            fi
          fi
          
          # Only create the link if nothing exists at the target
          if ! test -e "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          then
            # Create link - source file/folder -to- target link
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating link for folder '${sv_ReqdLinkFilePath}'."
            /bin/ln -sf "${sv_SourceHomeDirPath}${sv_ReqdLinkFilePath}" "${sv_TargetHomeDirPath}${sv_ReqdLinkFilePath}"
          fi

        fi
      fi
    done < "${sv_RedirectListFilePath}"

  fi

}

nf_UnmakePathRedirections()
{
  if test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
  then
    nf_UndoPathRedir "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" "${GLB_SV_CONSOLEUSERHOMEDIRPATH}"
  fi

  # Check if the Desktop was linked/unlinked
  if test -n "$(printf "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt")" | grep -E "^/Desktop/$")"
  then
    # Kill the Finder (Refreshes Desktop)
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Folder redirections removed - Finder needs to be reloaded"
    nf_ReloadFinder
  fi

  rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"

}

nf_MakePathRedirections()
{
  local sv_DoRedir
  local sv_ConsoleUserHomeAltDirPath
  local sv_LegacyKey
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath
  local iv_ObjectCount
  local iv_LoopCount
  
  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then
      if [ "${sv_ConfigOptionPath}" != "CLEAR" ]
      then
        # config options

        # Config tells us to make folder redirections
        if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_TRUE} ]
        then
          # The user home is local, so the links should point to the network home
          sv_LegacyKey=""
    
          # Links should point to the network home
          sv_ConsoleUserHomeAltDirPath="${GLB_SV_CONSOLEUSERSHAREDIRPATH}"
    
        else
          # The user home is on the network
          sv_LegacyKey="Legacy:"

          # Links should point to the local home
          sv_ConsoleUserHomeAltDirPath="${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}"
 
        fi

        if [ -z "${sv_ConsoleUserHomeAltDirPath}" ]
        then
          # The alternate home dir is unavailable - so remove any existing redirections
          # Shouldn't ever get here, because this condition is dealt with before this function is called
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Error, alternate home dir is unavailable."
          nf_UnmakePathRedirections
      
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "sv_ConsoleUserHomeAltDirPath ${sv_ConsoleUserHomeAltDirPath}"
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "GLB_SV_CONSOLEUSERHOMEDIRPATH ${GLB_SV_CONSOLEUSERHOMEDIRPATH}"
    
          # There shouldn't be any folder redirections on the alternate home
          # If there are, these may have been left when swapping between "Network Homes" and "Force local homes".
          if test -s "${sv_ConsoleUserHomeAltDirPath}/.FolderRedir.txt"
          then
            nf_UndoPathRedir "${sv_ConsoleUserHomeAltDirPath}/.FolderRedir.txt" "${sv_ConsoleUserHomeAltDirPath}"
          fi
          rm -f "${sv_ConsoleUserHomeAltDirPath}/.FolderRedir.txt"

          # Make sure the link list exists
          touch "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"

          # Check the existing link list
          rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
          touch "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
          while read sv_ReqdLinkEntry
          do
            # Sanitise the Entry
            sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
            sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
            if test -n "${sv_ReqdLinkFilePath}"
            then
              if test -L "${GLB_SV_CONSOLEUSERHOMEDIRPATH}${sv_ReqdLinkFilePath}"
              then
                echo "${sv_ReqdLinkEntry}" >>"${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
              fi
            fi
          done < "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
            
          # Create the required link list
          rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
          touch "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
          iv_ObjectCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:${sv_LegacyKey}Path")"
          for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
          do
            sv_ReqdLinkEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:${sv_LegacyKey}Path:${iv_LoopCount}")"
            sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
            sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
            if test -n "${sv_ReqdLinkFilePath}"
            then
              echo "${sv_ReqdLinkEntry}" >>"${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
            fi
          done
      
          # Find out which folders we need to check for links/unlinks
          echo "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" ; cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt" )" | sort -u > "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt"

          # Find out which folders we need to unlink (if we ever change the link list)
          echo "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" ; cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt" )" | sort | uniq -u > "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt"

          # Find out which folders we need to link
          echo "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt" ; cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt" )" | sort | uniq -u > "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Link.txt"

          # Link files (did use .FolderRedir-Link.txt, but the alternate home folder might change - so we should remake all links)
          if test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Linking folders."
            nf_DoPathRedir  "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt" "${GLB_SV_CONSOLEUSERHOMEDIRPATH}" "${sv_ConsoleUserHomeAltDirPath}"
          fi

          # Unlink files
          if test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Unlinking folders."
            nf_UndoPathRedir "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt" "${GLB_SV_CONSOLEUSERHOMEDIRPATH}"
          fi

          # Check if the Desktop was linked/unlinked
          if test -n "$(printf "$(cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt";cat "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt")" | grep -E "^/Desktop/$")"
          then
            # Kill the Finder (Refreshes Desktop)
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Folders redirected - Finder needs to be reloaded."
            nf_ReloadFinder
          fi

          # Delete temporary files
          rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Old.txt"
          rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Check.txt"
          rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Unlink.txt"
          rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir-Link.txt"

          # Delete the link file if it is empty
          if ! test -s "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
          then
            # Link list file is empty
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "There are no defined folder redirections."
            rm -f "${GLB_SV_CONSOLEUSERHOMEDIRPATH}/.FolderRedir.txt"
        
          fi      
      
        fi     
  
      fi
    fi
  fi

}

# ---

if [ "${GLB_BV_CONSOLEUSERISLOCAL}" = ${GLB_BC_TRUE} ]
then
  # Exit if user is a local account
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Policy aborted - User account is local."
else

# ---

case ${GLB_SV_EVENTNAME} in
    
Usr-PolicyUninstall)
  # Clear the settings first - if appropriate

  # Grab lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi
  
  # Get the current active settings
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting, so it's our responsibility to clear it
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Usr-NetworkUp|Usr-PolicyInstall) 
  # Apply settings for active domain
  sv_TargetDomain="${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}"

  if [ -z "${sv_TargetDomain}" ]
  then
    sv_TargetDomain="NONE"
  fi
  
  # Grab  lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi

  # Get the existing active config
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  sv_ConfigOptionPath=$(if_GetConfigOptionPathFromDomain "${sv_TargetDomain}")
  if [ -n "${sv_ConfigOptionPath}" ]
  then
    # This config contains the new active settings

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings were found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" != "${GLB_SV_CONFIGUUID}" ]
      then
        # Another config is currently active, so It's that configs responsibility to clear the active settings

        # Release lock in order for the other config to do its stuff
        GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
      
        # Wait up to 10 seconds for the other config to clear the active settings
        for (( iv_WaitIndex=0; iv_WaitIndex<10; iv_WaitIndex++ ))
        do
          sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
          if [ -z "${sv_LastActiveConfig}" ]
          then
            break
          fi
          sleep 1
        done

        # Grab  lock
        if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
        fi

        # Check if the config was cleared
        sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
        if [ -n "${sv_LastActiveConfig}" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "The config that configured the existing settings did not clear them, so we will instead."
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
        fi
      fi
    fi
    
    # Check if the setup is different
    sv_LastNetworkServiceInterfaceName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NetworkServiceInterfaceName")"
    if [ "${bv_IsNetworkInterfaceSetting}" = ${GLB_BC_TRUE} ] && [ "${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}" != "${sv_LastNetworkServiceInterfaceName}" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Network interface has changed from '${sv_LastNetworkServiceInterfaceName}' to '${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}'"
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi

    sv_LastConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ "${sv_ConfigOptionPath}" != "${sv_LastConfigOptionPath}" ] 
    then
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi
    
    # If the setup has changed, we will want to apply the new settings
    if [ "${bv_SetupIsDifferent}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Applying settings for domain '${sv_TargetDomain}'"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "${sv_ConfigOptionPath}"
    
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings for domain '${sv_TargetDomain}' are already in place"
    
    fi
    
  else
    # Another config contains the new active settings
    
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "No settings found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
      then
        # This config contains the current active setting, so it's our responsibility to clear it
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
      fi
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Usr-AtDesktop)
  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" = "CLEAR" ]
      then
        nf_UnmakePathRedirections
        
      else
        # config options

        # If the network home is not mounted - mount it
        if [ -z "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
        then
          if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_FALSE} ]
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - User home is on network and is unavailable - that's odd."
            
          else
            if [ -n "${GLB_SV_CONSOLEUSERSHAREURI}" ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Mounting the user network home"

              sv_ConsoleUserShareDirPath="${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}/NETWORKSHARES/USERHOME"
              mkdir -p "${sv_ConsoleUserShareDirPath}"
              if [ "$(GLB_BF_MOUNTURIATPATH "${GLB_SV_CONSOLEUSERSHAREURI}/" "${sv_ConsoleUserShareDirPath}")" = ${GLB_BC_TRUE} ]
              then
                GLB_SV_CONSOLEUSERSHAREDIRPATH="${sv_ConsoleUserShareDirPath}"
              fi
        
            fi
          fi
              
        fi

        if [ -n "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
        then
          nf_MakePathRedirections
            
        fi

        # Existing shortcuts in the dock & siebar may have changed
        "${GLB_SV_PROJECTDIRPATH}"/bin/SetupDock &
        "${GLB_SV_PROJECTDIRPATH}"/bin/SetupSidebar &
        
      fi    
    fi
  
  fi 
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

fi

# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
