#!/bin/bash
#
# Short:    Usr Policy script - Home folder redirection
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 12-Nov-2020
#
# Triggered by the following events:
#   Sys-NetworkUp   (as root)
#   Usr-AtDesktop   (as user)
#
# Called as follows:    
#   Usr-HomeFolderRedirection <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" = "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.2.0"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Usr-CreateHomeFolderAliases,Usr-CreateHomeFolderRedirections"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.
# Look at '/inc-sh/Common.sh' for a complete list.

# ---

# Defining this allows me use the same core code with multiple policies

# Is this setting associated with a network interface
bv_IsNetworkInterfaceSetting=${GLB_BC_FALSE}

# ---

if_GetConfigOptionPathFromDomain() # <TargetDomain> - Return the config ConfigOptionPath for the supplied target domain
{
  local sv_TargetDomain
  local iv_ConfigOptionCount
  local iv_DomainListCount
  local sv_DomainListEntry
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X) 
  local iv_IsActiveForDomainCount
  local iv_IsActiveForDomainIndex
  local sv_IsActiveForDomain
# END LEGACY CONFIG SUPPORT (PRE 3.X)
# ----------
  
  sv_TargetDomain="${1}"
  
  iv_ConfigOptionCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption")"
  if [ ${iv_ConfigOptionCount} -gt 0 ]
  then
    for (( iv_ConfigOptionIndex=0; iv_ConfigOptionIndex<${iv_ConfigOptionCount}; iv_ConfigOptionIndex++ ))
    do
      iv_DomainListCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList")"
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "${sv_TargetDomain}" ] || [ "${sv_DomainListEntry}" = "ALL" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
      for (( iv_DomainListIndex=0; iv_DomainListIndex<${iv_DomainListCount}; iv_DomainListIndex++ ))
      do
        sv_DomainListEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}:DomainList:${iv_DomainListIndex}")"
        if [ "${sv_DomainListEntry}" = "DEFAULT" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config:ConfigOption:${iv_ConfigOptionIndex}"
          break 2
        fi
      done
    done
    
# ----------
# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X)
  else
    # Support for the old-style config. This will be removed in future updates.
    iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain")"
    if [ ${iv_IsActiveForDomainCount} -gt 0 ]
    then
      for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
      do
        sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:ActiveForDomain:${iv_IsActiveForDomainIndex}")
        if test -n "${sv_IsActiveForDomain}"
        then
          case ${sv_IsActiveForDomain} in
          ALL)
            echo ":${GLB_SV_CONFIGUUID}:Config"
            break 2
            ;;
        
          NONE)
            ;;
        
          ADDOMAIN)
            sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
            ;;
          
          esac
        fi
    
        if [ "${sv_IsActiveForDomain}" = "${sv_TargetDomain}" ]
        then
          echo ":${GLB_SV_CONFIGUUID}:Config"
          break
        fi
      done
    fi
# END LEGACY CONFIG SUPPORT (PRE 3.X) 
# ----------

  fi
}

nf_UndoFolderRedirections() # Undo settings from Global Prefs
{
  local sv_ActiveConfig
  local sv_ConfigOptionPath
  local iv_ObjectCount
  local iv_LoopCount
  local sv_ReqdLinkEntry
  local sv_ReqdLinkFilePath

  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" != "CLEAR" ]
      then
        # config options

        iv_ObjectCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:Path")"
        for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
        do
          sv_ReqdLinkEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:Path:${iv_LoopCount}")"
          sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
          sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
          if test -n "${sv_ReqdLinkFilePath}"
          then
            umount "${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}${sv_ReqdLinkFilePath}"
          fi
        done
      
      fi
    
    fi
  
  fi 
}

nf_ReloadFinder() # Reload the Finder
{
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Reloading the Finder" 
  pkill -U ${GLB_SV_RUNUSERNAME} Finder
}

# ---

case ${GLB_SV_EVENTNAME} in
    
Usr-PolicyUninstall)
  # Clear the settings first - if appropriate

  # Grab lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi
  
  # Get the current active settings
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  if [ -n "${sv_LastActiveConfig}" ]
  then
    if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
    then
      # This config contains the current active setting, so it's our responsibility to clear it
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Usr-NetworkUp|Usr-PolicyInstall) 
  # Apply settings for active domain
  sv_TargetDomain="${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}"

  if [ -z "${sv_TargetDomain}" ]
  then
    sv_TargetDomain="NONE"
  fi
  
  # Grab  lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
  fi

  # Get the existing active config
  sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  sv_ConfigOptionPath=$(if_GetConfigOptionPathFromDomain "${sv_TargetDomain}")
  if [ -n "${sv_ConfigOptionPath}" ]
  then
    # This config contains the new active settings

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings were found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" != "${GLB_SV_CONFIGUUID}" ]
      then
        # Another config is currently active, so It's that configs responsibility to clear the active settings

        # Release lock in order for the other config to do its stuff
        GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
      
        # Wait up to 10 seconds for the other config to clear the active settings
        for (( iv_WaitIndex=0; iv_WaitIndex<10; iv_WaitIndex++ ))
        do
          sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
          if [ -z "${sv_LastActiveConfig}" ]
          then
            break
          fi
          sleep 1
        done

        # Grab  lock
        if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Couldn't grab exclusive access to settings, there could be conflicts that cause weird issues."
        fi

        # Check if the config was cleared
        sv_LastActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"
        if [ -n "${sv_LastActiveConfig}" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "The config that configured the existing settings did not clear them, so we will instead."
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
        fi
      fi
    fi
    
    # Check if the setup is different
    sv_LastNetworkServiceInterfaceName="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NetworkServiceInterfaceName")"
    if [ "${bv_IsNetworkInterfaceSetting}" = ${GLB_BC_TRUE} ] && [ "${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}" != "${sv_LastNetworkServiceInterfaceName}" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Network interface has changed from '${sv_LastNetworkServiceInterfaceName}' to '${GLB_SV_IPV4PRIMARYSERVICEINTERFACENAME}'"
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi

    sv_LastConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ "${sv_ConfigOptionPath}" != "${sv_LastConfigOptionPath}" ] 
    then
      bv_SetupIsDifferent=${GLB_BC_TRUE}
    fi
    
    # If the setup has changed, we will want to apply the new settings
    if [ "${bv_SetupIsDifferent}" = ${GLB_BC_TRUE} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Applying settings for domain '${sv_TargetDomain}'"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" "${GLB_SV_CONFIGUUID}"
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "${sv_ConfigOptionPath}"
    
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Settings for domain '${sv_TargetDomain}' are already in place"
    
    fi
    
  else
    # Another config contains the new active settings
    
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "No settings found in this config for domain '${sv_TargetDomain}'"

    if [ -n "${sv_LastActiveConfig}" ]
    then
      if [ "${sv_LastActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
      then
        # This config contains the current active setting, so it's our responsibility to clear it
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We configured the existing settings, so it's our responsibility to clear them."
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath" "CLEAR"
        GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig" ""
      fi
    fi
  fi
  
  # Release lock
  GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
  ;;
  
Usr-AtDesktop)
  sv_ActiveConfig="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ActiveConfig")"

  # Only continue if we hold the active config
  if [ "${sv_ActiveConfig}" = "${GLB_SV_CONFIGUUID}" ]
  then
    # Get the options
    sv_ConfigOptionPath="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:ConfigOptionPath")"
    if [ -n "${sv_ConfigOptionPath}" ]
    then

      if [ "${sv_ConfigOptionPath}" != "CLEAR" ]
      then

        if [ "${GLB_BV_CONSOLEUSERHOMEISLOCAL}" = ${GLB_BC_FALSE} ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - User home is on network."
            
        else
          # If the network home is not mounted - mount it
          if [ -z "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
          then
            if [ -n "${GLB_SV_CONSOLEUSERSHAREURI}" ]
            then
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Mounting the user network home"

              sv_ConsoleUserShareDirPath="${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}/NETWORKSHARES/USERHOME"
              mkdir -p "${sv_ConsoleUserShareDirPath}"
              if [ "$(GLB_BF_MOUNTURIATPATH "${GLB_SV_CONSOLEUSERSHAREURI}/" "${sv_ConsoleUserShareDirPath}")" = ${GLB_BC_TRUE} ]
              then
                GLB_SV_CONSOLEUSERSHAREDIRPATH="${sv_ConsoleUserShareDirPath}"
              fi
        
            fi
          fi
              
        fi

        if [ -n "${GLB_SV_CONSOLEUSERSHAREDIRPATH}" ]
        then
          # Mount the home sub-folders
          iv_ObjectCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:Path")"
          for (( iv_LoopCount=0; iv_LoopCount<${iv_ObjectCount}; iv_LoopCount++ ))
          do
            sv_ReqdLinkEntry="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${sv_ConfigOptionPath}:Path:${iv_LoopCount}")"
            sv_ReqdLinkEntry=$(echo "/${sv_ReqdLinkEntry}" | sed "s|/[/]*|/|g")
            sv_ReqdLinkFilePath=$(echo "${sv_ReqdLinkEntry}" | sed "s|/$||")
            if test -n "${sv_ReqdLinkFilePath}"
            then
              # If the local directory is a link - delete it
              if [ -L "${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}${sv_ReqdLinkFilePath}" ]
              then
                rm -f "${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}${sv_ReqdLinkFilePath}"
              fi

              # Make sure the local directory exists
              mkdir -p "${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}${sv_ReqdLinkFilePath}"
            
              # Make sure the remote directory exists
              mkdir -p "${GLB_SV_CONSOLEUSERSHAREDIRPATH}${sv_ReqdLinkFilePath}"
            
              # Mount network folder at path and remount if already mounted somewhere else
              GLB_BF_MOUNTURIATPATH "${GLB_SV_CONSOLEUSERSHAREURI}${sv_ReqdLinkFilePath}/" "${GLB_SV_CONSOLEUSERLOCALHOMEDIRPATH}${sv_ReqdLinkFilePath}" ${GLB_BC_TRUE}
            fi
              
          done
            
        fi

        # Existing shortcuts in the dock & siebar may have changed. Finder may need reloading too if the desktop has been redirected.
        "${GLB_SV_PROJECTDIRPATH}"/bin/SetupDock &
        "${GLB_SV_PROJECTDIRPATH}"/bin/SetupSidebar &
        nf_ReloadFinder
        
      fi    
    fi
  
  fi 
  ;;

*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
