#!/bin/bash
#
# Short:    Sys Policy script - Runs a custom update script
# Author:   Mark J Swift
# Version:  3.3.2
# Modified: 27-May-2022
#
# Triggered by the following events:
#   Sys-LoginWindow     (as root)
#   Sys-LoginWindowIdle (as root)
#   Sys-Poll            (as root)
#   Sys-ManualTrigger   (as root)
#
# Called as follows:    
#   Sys-SoftwareManifest <PolicyName> <EventName> <OptionalParam> <ConsoleUserInfo> <ConfigUUID> <ConfigFilePath> <PolicyPrefsFilePath> <SharedPrefsFilePath> <SysDefaultsConfigFilePath> <LogInfo>

# ---

if [ "$(whoami)" != "root" ]
then
  exit 0
fi

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Define the policy code version
GLB_SV_CODEVERSION="3.3.2"

# Define a list of policies that replace this one
GLB_SV_DEPRECATEDBYPOLICYLIST="Sys-SoftwareManifest,Sys-ScheduledSoftwareUpdate"

# ---

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyHeader.sh

# By the time we get here, quite a few global variables have been set up.

# ---

# check config "ActiveForDomain" setting to see if we are active or not. Can pass an optional subkey.
bf_OptionIsActiveForThisDomain() # [subkey]
{
  local bv_IsActive
  local iv_IsActiveForDomainCount
  local sv_IsActiveForDomain
  
  sv_SubKey="${1}"
  if test -n "${sv_SubKey}" 
  then
    # add a single colon to the subkey
    sv_SubKey=$(echo "${sv_SubKey}:" | sed "s|[:]*$|:|")
  fi
  
  # Note, config "ActiveForDomain" value can be null, ALL, NONE, ADDOMAIN or your.company.domain

  bv_IsActive=${GLB_BC_FALSE}
  iv_IsActiveForDomainCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:${sv_SubKey}ActiveForDomain")"
  for (( iv_IsActiveForDomainIndex=0; iv_IsActiveForDomainIndex<${iv_IsActiveForDomainCount}; iv_IsActiveForDomainIndex++ ))
  do
    sv_IsActiveForDomain=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:${sv_SubKey}ActiveForDomain:${iv_IsActiveForDomainIndex}")
    if test -n "${sv_IsActiveForDomain}"
    then
      case ${sv_IsActiveForDomain} in
      ALL)
        bv_IsActive=${GLB_BC_TRUE}
        break 2
        ;;
        
      NONE)
        break 2
        ;;
        
      ADDOMAIN)
        sv_IsActiveForDomain="${GLB_SV_ADDNSDOMAINNAME}"
        ;;
          
      esac
    fi
    
    if [ "${sv_IsActiveForDomain}" = "${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}" ]
    then
      bv_IsActive=${GLB_BC_TRUE}
      break
    fi
  done
  
  echo "${bv_IsActive}"
}

bf_UpdatesAllowed() # returns true if updates are allowed to run right now
{
  local iv_CurrOutOfHoursStartTime
  local iv_CurrOutOfHoursStartHour
  local iv_CurrOutOfHoursStartMinute
  local iv_CurrOutOfHoursStartEpoch
  local iv_CurrOutOfHoursEndTime
  local iv_CurrOutOfHoursEndHour
  local iv_CurrOutOfHoursEndMinute
  local iv_CurrOutOfHoursEndEpoch
  local iv_LastUpdateEpoch
  local bv_DoUpdate
  local bv_OutOfHoursPowerOn
  local iv_NextUpdateEpoch
  local iv_NextOutOfHoursStartEpoch
  local iv_NextOutOfHoursEndEpoch
  local iv_NextOutOfHoursUpdateEpoch
  
  iv_CurrOutOfHoursStartTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:OutOfHoursStartTime" | grep -E "^[0-9]{1,2}:[0-9]{2}$")
  if test -n "${iv_CurrOutOfHoursStartTime}"
  then
    # Get update start time before now
    iv_CurrOutOfHoursStartHour=$(echo "${iv_CurrOutOfHoursStartTime}" | cut -d":" -f1)
    iv_CurrOutOfHoursStartMinute=$(echo "${iv_CurrOutOfHoursStartTime}" | cut -d":" -f2)
    iv_CurrOutOfHoursStartEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v${iv_CurrOutOfHoursStartHour}H -v${iv_CurrOutOfHoursStartMinute}M -v0S "+%s")

    if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOutOfHoursStartEpoch} ]
    then
      iv_CurrOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v-1d "+%s")
    fi

    iv_CurrOutOfHoursEndTime=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:OutOfHoursEndTime" | grep -E "^[0-9]{1,2}:[0-9]{2}$")
    if test -n "${iv_CurrOutOfHoursEndTime}"
    then
      iv_CurrOutOfHoursEndHour=$(echo "${iv_CurrOutOfHoursEndTime}" | cut -d":" -f1)
      iv_CurrOutOfHoursEndMinute=$(echo "${iv_CurrOutOfHoursEndTime}" | cut -d":" -f2)
      iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v${iv_CurrOutOfHoursEndHour}H -v${iv_CurrOutOfHoursEndMinute}M -v0S "+%s")

      if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
      then
        iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
      fi
        
      # Adjust end to allow at least one Sys-LoginWindowPoll to happen - if an update is scheduled at the end of the out-of-hours period
      iv_CurrOutOfHoursEndEpoch=$((${iv_CurrOutOfHoursEndEpoch}-${GLB_IC_SYSLOGINWINDOWPOLLTRIGGERSECS}*2))
      if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
      then
        # The defined period is clearly not long enough, so null the value
        iv_CurrOutOfHoursEndEpoch=""
      fi

    fi
  fi

  if test -z "${iv_CurrOutOfHoursEndEpoch}"
  then
    # The defined period is unset or invalid, so assume it's OK between 3:00am and 4:00am
    iv_CurrOutOfHoursStartEpoch=$(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} -v3H -v0M -v0S "+%s")
    if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOutOfHoursStartEpoch} ]
    then
      iv_CurrOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v-1d "+%s")
    fi
    
    iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v4H -v0M -v0S "+%s")
    if [ ${iv_CurrOutOfHoursEndEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
    then
      iv_CurrOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
    fi
  fi

  if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -lt ${iv_CurrOutOfHoursEndEpoch} ]
  then
    iv_LastUpdateEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:LastUpdateEpoch")
    if test -z "${iv_LastUpdateEpoch}"
    then
      iv_LastUpdateEpoch=0
    fi
      
    if [ ${iv_LastUpdateEpoch} -lt ${iv_CurrOutOfHoursStartEpoch} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We are out-of-hours, so updates are enabled"
      bv_DoUpdate=${GLB_BC_TRUE}
        
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "An update has recently happened, so updates are disabled"
      bv_DoUpdate=${GLB_BC_FALSE}
        
    fi
      
  else
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "We are within working hours, so updates are disabled"
    bv_DoUpdate=${GLB_BC_FALSE}
      
  fi

  if [ "${bv_DoUpdate}" = ${GLB_BC_FALSE} ]
  then
    iv_LastUpdateEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:LastUpdateEpoch")
    if test -z "${iv_LastUpdateEpoch}"
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Updates have never run, so updates have been enabled"
      bv_DoUpdate=${GLB_BC_TRUE}
    fi
  fi

  bv_OutOfHoursPowerOn=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:OutOfHoursPowerOn")
  if [ "${bv_OutOfHoursPowerOn}" = ${GLB_BC_TRUE} ]
  then
    # Get the existing next scheduled update value
    iv_NextUpdateEpoch=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NextUpdateEpoch")
    if test -z "${iv_NextUpdateEpoch}"
    then
      iv_NextUpdateEpoch=0
    fi

    # Check if the next scheduled update has already passed, and if so schedule another one
    if [ ${GLB_IV_THISSCRIPTSTARTEPOCH} -ge ${iv_NextUpdateEpoch} ]
    then
      # -- work out a good random-ish time to power on for the next Update
      iv_NextOutOfHoursStartEpoch=$(date -r ${iv_CurrOutOfHoursStartEpoch} -v+1d "+%s")
      iv_NextOutOfHoursEndEpoch=$(date -r ${iv_CurrOutOfHoursEndEpoch} -v+1d "+%s")
      iv_NextOutOfHoursUpdateEpoch=$(jot -r 1 ${iv_NextOutOfHoursStartEpoch} ${iv_NextOutOfHoursEndEpoch})
      GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:NextUpdateEpoch" "${iv_NextOutOfHoursUpdateEpoch}"
      GLB_NF_SCHEDULE4EPOCH "${GLB_SV_THISSCRIPTFILENAME}" "poweron" ${iv_NextOutOfHoursUpdateEpoch}

      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Next update will likely be $(date -r ${iv_NextOutOfHoursUpdateEpoch} "+%Y%m%d-%H:%M.%S")"
    fi
      
  else
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "PowerOn updates aren't scheduled"
      
  fi

  echo "${bv_DoUpdate}"
}

nf_DoUpdate()
{
  local bv_UpdateScriptActive
  local iv_UpdateExeArgCount
  local sv_UpdateExeURI
  local sv_UpdateExeFilePath
  local iv_UpdateExeArgIndex
  
  # Note, only active when on the specified domain(s) - can be null, ALL, NONE, ADDOMAIN or your.company.domain
  bv_UpdateScriptActive=$(bf_OptionIsActiveForThisDomain "UpdateScript")
    
  if [ "${bv_UpdateScriptActive}" = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Update skipped - not on a known network."
      
  else
    iv_UpdateExeArgCount="$(GLB_IF_GETPLISTARRAYSIZE "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:UpdateScript:Exe")"
    if [ ${iv_UpdateExeArgCount} -eq 0 ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Update skipped - there are no defined update arguments."

    else
      sv_UpdateExeURI="$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:UpdateScript:Exe:0")"
      if test -n "${sv_UpdateExeURI}"
      then
        sv_UpdateExeFilePath=$(GLB_SF_RESOLVEFILEURITOPATH "${sv_UpdateExeURI}")
        if ! test -e "${sv_UpdateExeFilePath}"
        then
          # Its possible that the exe has been moved to the bin directory
          sv_UpdateExeURI="$(basename "${sv_UpdateExeURI}")"
          sv_UpdateExeFilePath="${GLB_SV_PROJECTDIRPATH}"/bin"/${sv_UpdateExeURI}"
        fi

        if ! test -e "${sv_UpdateExeFilePath}"
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Update skipped - update script does not exist (${sv_UpdateExeFilePath})"

        else
          if ! test -x "${sv_UpdateExeFilePath}"
          then
            chown root:wheel "${sv_UpdateExeFilePath}"
            chmod u+x "${sv_UpdateExeFilePath}"
          fi
          for (( iv_UpdateExeArgIndex=1; iv_UpdateExeArgIndex<${iv_UpdateExeArgCount}; iv_UpdateExeArgIndex++ ))
          do
            sv_UpdateExeFilePath="${sv_UpdateExeFilePath} '""$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:UpdateScript:Exe:${iv_UpdateExeArgIndex}")""'"
          done

          # Do a software update
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Running update (${sv_UpdateExeFilePath})"
          eval "${sv_UpdateExeFilePath}"

          GLB_NF_SETPLISTPROPERTY "${GLB_SV_SHAREDPREFSFILEPATH}" ":${GLB_SV_POLICYNAME}:Shared:LastUpdateEpoch" "${GLB_IV_THISSCRIPTSTARTEPOCH}"
        fi
      fi
    fi
      
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Ideally we should restart now"
  fi
  
}

# ---

case ${GLB_SV_EVENTNAME} in
    
Sys-PolicyInstall|Sys-LoginWindow|Sys-Poll)
  # This function returns true if updates are allowed, and schedules a poweron for the next update if necessary
  bv_DoUpdate=$(bf_UpdatesAllowed)
  ;;
    
Sys-ManualTrigger)
  # Manual update requested via /usr/local/LabWarden/bin/Update
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Running a manual Update."
  
  # Perform a workstation update (software and group policies)
  nf_DoUpdate
  ;;
  
Sys-LoginWindowIdle)
  # This function returns true if updates are allowed, and schedules a poweron for the next update if necessary
  bv_DoUpdate=$(bf_UpdatesAllowed)

  iv_IdleSecs=$(GLB_IF_SYSTEMIDLESECS)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Workstation Idle for ${iv_IdleSecs} secs"

  iv_LoginWindowIdleShutdownSecs=$(GLB_SF_GETPLISTPROPERTY "${GLB_SV_CONFIGFILEPATH}" ":${GLB_SV_CONFIGUUID}:Config:LoginWindowIdleShutdownSecs")
  if test -z "${iv_LoginWindowIdleShutdownSecs}"
  then
    iv_LoginWindowIdleShutdownSecs=0
    bv_DoUpdate=${GLB_BC_FALSE}
  fi

  if [ ${iv_LoginWindowIdleShutdownSecs} -gt 0 ]
  then
    if [ ${iv_IdleSecs} -lt ${iv_LoginWindowIdleShutdownSecs} ]
    then
      bv_DoUpdate=${GLB_BC_FALSE}  
    fi
  fi

  if [ "${bv_DoUpdate}" = ${GLB_BC_TRUE} ]
  then
    nf_DoUpdate
    GLB_NF_NAMEDFLAGCREATE "RESTART"
  fi

  if [ ${iv_LoginWindowIdleShutdownSecs} -gt 0 ]
  then
    if [ ${iv_IdleSecs} -gt ${iv_LoginWindowIdleShutdownSecs} ]
    then
      # Do a full group policy update
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Updating group policies (via gpupdate)."
      "${GLB_SV_PROJECTDIRPATH}"/bin/gpupdate "-force"

      # Shutdown if the workstation is still idle
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Workstation has been idle too long - we should shutdown"
      GLB_NF_NAMEDFLAGCREATE "SHUTDOWN"
    fi
  fi
  ;;
  
Sys-PolicyUninstall)
  # Do nothing
  ;;
  
*)
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Policy aborted - Trigger '${GLB_SV_EVENTNAME}' is not supported."
  ;;

esac
  
# ---

# Tidy up

. "${GLB_SV_PROJECTDIRPATH}"/inc-sh/PolicyFooter.sh

# ---
