#!/bin/bash
#
# Short:    Trigger an event
# Author:   Mark J Swift
# Version:  1.0.82
# Modified: 27-May-2016
#
# Called as follows:    
#   Trigger <event> <LoggedInUser> [<optionalparam>]
#
# Handles the following system events:
#   Boot                         (as root)
#   LoginWindow                  (as root)
#   LoginBegin                   (as root)
#   UserLogin                    (as user)
#   UserAtDesktop                (as user)
#   AppDidLaunch                 (as user)
#   AppDidTerminate              (as user)
#   AppWillLaunch                (as user)
#   UserPoll                     (as user)
#   UserLogout                   (as root)
#   LogoutEnd                    (as root)
#   LoginWindowIdle              (as root)
#   LoginWindowRestartOrShutdown (as root)

# ---

# Take a note when this script started
LCL_MyStartEpoch=$(date -u "+%s")

# ---

# Get policy
LCL_EventName="${1}"

if test -z "${LCL_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get logged in user
GLB_LoggedInUserName="${2}"

# Get optional parameter
LCL_OptionalParam="${3}"

# ---

# Get Computer AD domain - i.e. your.domain.com
GLB_ADDomainNameDNS="$(dsconfigad -show | grep "Active Directory Domain" | sed "s|\([^=]*\)=[ ]*\([^ ]*$\)|\2|")"

if test -z "${GLB_ADDomainNameDNS}"
then
  # We are probably not part of a domain
  exit 0
fi

# ---
# Some user initiated events may have escalated versions

case ${LCL_EventName} in
UserAtDesktop|UserPoll) 
  touch /usr/local/LabWarden/Escalated/"${LCL_EventName}"
  ;;

esac

# ---


# Load the library, only if it is not already loaded
if test -z "${GLB_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

LCL_EventHistory=""

f_logmessage "ATTENTION, system event: (${LCL_EventName})"

# ---

if [ "${GLB_ThisUserName}" = "root" ]
then
  # Make sure the login hooks are set up
  sudo defaults write /private/var/root/Library/Preferences/com.apple.loginwindow LoginHook "/usr/local/LabWarden/lib/LoginHook"
  sudo defaults write /private/var/root/Library/Preferences/com.apple.loginwindow LogoutHook "/usr/local/LabWarden/lib/LogoutHook"

  # ---

  # Check that the workstation policies exist
  LCL_ConfigDir="${GLB_LabConfigDir}/${GLB_ADComputerName}"
  if ! test -e "${LCL_ConfigDir}/LabWarden.plist"
  then
    f_logmessage "ATTENTION, workstation policies not available, running gpupdate"
    /usr/local/LabWarden/util/gpupdate
  fi

  if test -e "${LCL_ConfigDir}/LabWarden.plist"
  then
    # Check the age of the config
    LCL_PlistLastUpdateEpoch=$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" 1136073660)
    LCL_PlistAgeHours=$(((${LCL_MyStartEpoch}-${LCL_PlistLastUpdateEpoch})/60/60))
    if [ ${LCL_PlistAgeHours} -gt ${GLB_GPConfigMaxAgeHours} ]
    then
      f_logmessage "ATTENTION, updating workstation group policies - they are ${LCL_PlistAgeHours} hours old and exceed the maximum age."
      /usr/local/LabWarden/util/gpupdate
    else
      LCL_PlistVersion=$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":LabWarden:LocalPrefs:Version")
      if [ "${LCL_PlistVersion}" != "${GLB_LabWardenVersion}" ]
      then
        f_logmessage "ATTENTION, updating workstation policies - LabWarden version has changed."
        /usr/local/LabWarden/util/gpupdate
      fi
    fi
  fi
  
  if test -n "${GLB_LoggedInUserName}"
  then
    LCL_ConfigDir="${GLB_LabConfigDir}/${GLB_LoggedInUserName}"
    # Check that the user policies exist
    if ! test -e "${LCL_ConfigDir}/LabWarden.plist"
    then
      f_logmessage "ATTENTION, user policies for '${GLB_LoggedInUserName}' not available, running gpupdate"
      /usr/local/LabWarden/util/gpupdate "${GLB_LoggedInUserName}"
    fi

    if test -e "${LCL_ConfigDir}/LabWarden.plist"
    then
      # Check the age of the config
      LCL_PlistLastUpdateEpoch=$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" 1136073660)
      LCL_PlistAgeHours=$(((${LCL_MyStartEpoch}-${LCL_PlistLastUpdateEpoch})/60/60))
      if [ ${LCL_PlistAgeHours} -gt ${GLB_GPConfigMaxAgeHours} ]
      then
        f_logmessage "ATTENTION, updating user policies for '${GLB_LoggedInUserName}' - they are ${LCL_PlistAgeHours} hours old and exceed the maximum age."
        /usr/local/LabWarden/util/gpupdate "${GLB_LoggedInUserName}"
      else
        LCL_PlistVersion=$(f_GetPlistProperty "${LCL_ConfigDir}/LabWarden.plist" ":LabWarden:LocalPrefs:Version")
        if [ "${LCL_PlistVersion}" != "${GLB_LabWardenVersion}" ]
        then
          f_logmessage "ATTENTION, updating user policies for '${GLB_LoggedInUserName}' - LabWarden version has changed."
          /usr/local/LabWarden/util/gpupdate "${GLB_LoggedInUserName}"
        fi
      fi
    fi
        
  fi

fi

if test -n "${GLB_LoggedInUserName}"
then
  LCL_ConfigDir="${GLB_LabConfigDir}/${GLB_LoggedInUserName}"
  
  if test -e "${LCL_ConfigDir}/DelayedUninstall"
  then
    # Uninstall delayed payloads
    f_logmessage "ATTENTION, uninstalling delayed payloads for user '${GLB_LoggedInUserName}'"
    ls -1 "${LCL_ConfigDir}/DelayedUninstall" | while read LCL_PayloadName
    do
      LCL_PayloadExt=$(echo ${LCL_PayloadName} | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
      if test -e /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-uninstall
      then
        
        # Complications arise due to OS version differences
        LCL_HandleUserPayloadDelays="true"
        case ${LCL_PayloadExt} in
        mobileconfig) 
          if [ ${GLB_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # Pre OS X 10.11, the user needs to install his own mobileconfig
            if [ "${GLB_ThisUserName}" != "${GLB_LoggedInUserName}" ]
            then
              LCL_HandleUserPayloadDelays="false"
            fi
          else
            # Only root needs to install user delayed payloads
            if [ "${GLB_ThisUserName}" != "root" ]
            then
              LCL_HandleUserPayloadDelays="false"
            fi
          fi
          ;;
      
          *)
            # Ideally, only root should install user delayed payloads
            if [ "${GLB_ThisUserName}" != "root" ]
            then
              LCL_HandleUserPayloadDelays="false"
            fi
            ;;
      
        esac
        
        if [ "${LCL_HandleUserPayloadDelays}" = "true" ]
        then
          /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-uninstall "${LCL_ConfigDir}/DelayedUninstall/${LCL_PayloadName}" "${GLB_LoggedInUserName}"
          if [ "$?" = "0" ]
          then
            rm -f "${LCL_ConfigDir}/DelayedUninstall/${LCL_PayloadName}"
                
          else
            f_logmessage "ATTENTION, failed to uninstall '${LCL_PayloadName}'."
                
          fi
        fi
          
      fi
    done
    if test -z "$(ls -1 "${LCL_ConfigDir}/DelayedUninstall")"
    then
      rm -fR "${LCL_ConfigDir}/DelayedUninstall"
    fi
  fi
  
  if test -e "${LCL_ConfigDir}/DelayedInstall"
  then
    # install delayed payloads
    f_logmessage "ATTENTION, installing delayed payloads for user '${GLB_LoggedInUserName}'"
    ls -1 "${LCL_ConfigDir}/DelayedInstall" | while read LCL_PayloadName
    do
      LCL_PayloadExt=$(echo ${LCL_PayloadName} | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
      if test -e /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-install
      then
        
        # Complications arise due to OS version differences
        LCL_HandleUserPayloadDelays="true"
        case ${LCL_PayloadExt} in
        mobileconfig) 
          if [ ${GLB_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # Pre OS X 10.11, the user needs to install his own mobileconfig
            if [ "${GLB_ThisUserName}" != "${GLB_LoggedInUserName}" ]
            then
              LCL_HandleUserPayloadDelays="false"
            fi
          else
            # Only root needs to install user delayed payloads
            if [ "${GLB_ThisUserName}" != "root" ]
            then
              LCL_HandleUserPayloadDelays="false"
            fi
          fi
          ;;
      
          *)
            # Ideally, only root should install user delayed payloads
            if [ "${GLB_ThisUserName}" != "root" ]
            then
              LCL_HandleUserPayloadDelays="false"
            fi
            ;;
      
        esac
        
        if [ "${LCL_HandleUserPayloadDelays}" = "true" ]
        then
          /usr/local/LabWarden/PayloadHandlers/${LCL_PayloadExt}-install "${LCL_ConfigDir}/DelayedInstall/${LCL_PayloadName}" "${GLB_LoggedInUserName}"
          if [ "$?" = "0" ]
          then
            rm -f "${LCL_ConfigDir}/DelayedInstall/${LCL_PayloadName}"
                
          else
            f_logmessage "ATTENTION, failed to install '${LCL_PayloadName}'."
                
          fi
        fi
          
      fi
    done
    if test -z "$(ls -1 "${LCL_ConfigDir}/DelayedInstall")"
    then
      rm -fR "${LCL_ConfigDir}/DelayedInstall"
    fi
  fi

fi
# ---

# Check policies against event
f_TriggerEvent "${LCL_EventHistory}" "${LCL_EventName}" "${LCL_OptionalParam}"

# Remove temporary files
rm -fR "${GLB_ThisScriptTempDir}"

# Have we been flagged to restart or shutdown
if [ "${GLB_ThisUserName}" = "root" ]
then
  if [ -e "${GLB_ThisUserTempDir}/RestartNow" ] || [ -e "${GLB_ThisUserTempDir}/ShutdownNow" ]
  then
    while [ -n "$(ls -1 "${GLB_ThisUserTempDir}/ActiveEvents")" ]
    do
      f_logmessage "NOTE, Waiting for events to finish in order to restart or shutdown"
      sleep 1
    done
    if [ -e "${GLB_ThisUserTempDir}/RestartNow" ]
    then
      f_logmessage "ATTENTION, restarting workstation"
      shutdown -r now
    fi
    if [ -e "${GLB_ThisUserTempDir}/ShutdownNow" ]
    then
      f_logmessage "ATTENTION, shutting down workstation"
      shutdown -h now
    fi
  fi

fi

