#!/bin/bash
#
# Short:    Trigger an event
# Author:   Mark J Swift
# Version:  1.0.93
# Modified: 21-Aug-2016
#
# Called as follows:    
#   Trigger <event> <LoggedInUser> [<optionalparam>]
#
# Handles the following system events:
#   Boot                         (as root)
#   LoginWindow                  (as root)
#   NetworkUp                    (as root)
#   NetworkDown                  (as root)
#   LoginBegin                   (as root)
#   LogoutEnd                    (as root)
#   LoginWindowPoll              (as root)
#   LoginWindowIdle              (as root)
#   LoginWindowRestartOrShutdown (as root)
#   SystemPoll                   (as root)
#   SystemIdle                   (as root)
#   UserLogin                    (as user)
#   UserAtDesktop                (as user)
#   AppWillLaunch                (as user)
#   AppDidLaunch                 (as user)
#   AppDidTerminate              (as user)
#   UserPoll                     (as user)
#   UserIdle                     (as user)
#   UserLogout                   (as user)

# ---

# Get policy
sv_EventName="${1}"

if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get logged in user
LW_sv_LoggedInUserName="${2}"

# Get optional parameter
sv_OptionalParam="${3}"

# ---

# Get Computer AD domain - i.e. your.domain.com
LW_sv_ADDomainNameDNS="$(dsconfigad -show | grep "Active Directory Domain" | sed "s|\([^=]*\)=[ ]*\([^ ]*$\)|\2|")"

if test -z "${LW_sv_ADDomainNameDNS}"
then
  # We are probably not part of a domain
  exit 0
fi

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

sv_EventHistory=""

LW_nf_logmessage "ATTENTION, system event: (${sv_EventName})"

# ---

case "${sv_EventName}" in
LoginBegin|UserAtDesktop|LogoutEnd)
  if test -n "${LW_sv_LoggedInUserName}"
  then
    # Update/apply user policies (but if already cached, does very little)
    /usr/local/LabWarden/util/gpupdate "-quick" "${LW_sv_LoggedInUserName}"
  fi
  ;;

NetworkUp)
  if [ "${LW_sv_ThisUserName}" = "root" ]
  then
    # Make sure the login hooks are set up
    sudo defaults write /private/var/root/Library/Preferences/com.apple.loginwindow LoginHook "/usr/local/LabWarden/lib/LoginHook"
    sudo defaults write /private/var/root/Library/Preferences/com.apple.loginwindow LogoutHook "/usr/local/LabWarden/lib/LogoutHook"

    # Update/apply workstation policies (but if already cached, does very little)
    /usr/local/LabWarden/util/gpupdate "-quick"
  fi
  ;;
    
LoginWindowIdle|SystemIdle)
  if [ "${LW_sv_ThisUserName}" = "root" ]
  then
    # Update/apply workstation policies
    /usr/local/LabWarden/util/gpupdate
    
    # Update/apply user policies for users who are logged in
    who -q | grep -Ev "^#" | tr " " "\n" | sort -u | grep -Ev "^$" | while read sv_LoggedInUser
    do
      /usr/local/LabWarden/util/gpupdate "${sv_LoggedInUser}"
    done
  fi
  ;;
    
esac

# Check policies against event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_EventName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# Have we been flagged to restart or shutdown
if [ "${LW_sv_ThisUserName}" = "root" ]
then
  if [ -e "${LW_sv_ThisUserTempDirPath}/RestartNow" ] || [ -e "${LW_sv_ThisUserTempDirPath}/ShutdownNow" ]
  then
    while [ -n "$(ls -1 "${LW_sv_ThisUserTempDirPath}/ActiveEvents")" ]
    do
      LW_nf_logmessage "NOTE, Waiting for events to finish in order to restart or shutdown"
      sleep 1
    done
    if [ -e "${LW_sv_ThisUserTempDirPath}/RestartNow" ]
    then
      LW_nf_logmessage "ATTENTION, restarting workstation"
      shutdown -r now
    fi
    if [ -e "${LW_sv_ThisUserTempDirPath}/ShutdownNow" ]
    then
      LW_nf_logmessage "ATTENTION, shutting down workstation"
      shutdown -h now
    fi
  fi

fi

