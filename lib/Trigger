#!/bin/bash
#
# Short:    Trigger an event
# Author:   Mark J Swift
# Version:  1.0.92
# Modified: 21-Jul-2016
#
# Called as follows:    
#   Trigger <event> <LoggedInUser> [<optionalparam>]
#
# Handles the following system events:
#   Boot                         (as root)
#   LoginWindow                  (as root)
#   LoginBegin                   (as root)
#   UserLogin                    (as user)
#   UserAtDesktop                (as user)
#   AppDidLaunch                 (as user)
#   AppDidTerminate              (as user)
#   AppWillLaunch                (as user)
#   UserPoll                     (as user)
#   UserLogout                   (as root)
#   LogoutEnd                    (as root)
#   LoginWindowIdle              (as root)
#   LoginWindowRestartOrShutdown (as root)

# ---

# Get policy
sv_EventName="${1}"

if test -z "${sv_EventName}"
then
  # We need something to work with
  exit 0
fi

# Get logged in user
LW_sv_LoggedInUserName="${2}"

# Get optional parameter
sv_OptionalParam="${3}"

# ---

# Get Computer AD domain - i.e. your.domain.com
LW_sv_ADDomainNameDNS="$(dsconfigad -show | grep "Active Directory Domain" | sed "s|\([^=]*\)=[ ]*\([^ ]*$\)|\2|")"

if test -z "${LW_sv_ADDomainNameDNS}"
then
  # We are probably not part of a domain
  exit 0
fi

# ---
# Some user initiated events may have escalated versions

case ${sv_EventName} in
UserAtDesktop|UserPoll) 
  touch /usr/local/LabWarden/Escalated/"${sv_EventName}"
  ;;

esac

# ---

# Load the library, only if it is not already loaded
if test -z "${LW_sv_LabWardenVersion}"
then
  . /usr/local/LabWarden/lib/CommonLib
fi

# ---

sv_EventHistory=""

LW_nf_logmessage "ATTENTION, system event: (${sv_EventName})"

# ---

if [ "${LW_sv_ThisUserName}" = "root" ]
then
  # Make sure the login hooks are set up
  sudo defaults write /private/var/root/Library/Preferences/com.apple.loginwindow LoginHook "/usr/local/LabWarden/lib/LoginHook"
  sudo defaults write /private/var/root/Library/Preferences/com.apple.loginwindow LogoutHook "/usr/local/LabWarden/lib/LogoutHook"

  # ---

  # Check that the workstation policies exist
  sv_ConfigDirPath="${LW_sv_ConfigDirPath}/${LW_sv_ADComputerName}"
  if ! test -e "${sv_ConfigDirPath}/LabWarden.plist"
  then
    LW_nf_logmessage "ATTENTION, workstation policies not available, running gpupdate"
    /usr/local/LabWarden/util/gpupdate
  fi

  if test -e "${sv_ConfigDirPath}/LabWarden.plist"
  then
    # Check the age of the config
    iv_PlistLastUpdateEpoch=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" 1136073660)
    iv_PlistAgeHours=$(((${LW_sv_ThisScriptStartEpoch}-${iv_PlistLastUpdateEpoch})/60/60))
    if [ ${iv_PlistAgeHours} -gt ${iv_GPConfigMaxAgeHours} ]
    then
      LW_nf_logmessage "ATTENTION, updating workstation group policies - they are ${iv_PlistAgeHours} hours old and exceed the maximum age."
      /usr/local/LabWarden/util/gpupdate
    else
      sv_PlistVersion=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:Version")
      if [ "${sv_PlistVersion}" != "${LW_sv_LabWardenVersion}" ]
      then
        LW_nf_logmessage "ATTENTION, updating workstation policies - LabWarden version has changed."
        /usr/local/LabWarden/util/gpupdate
      fi
    fi
  fi
  
  if test -n "${LW_sv_LoggedInUserName}"
  then
    sv_ConfigDirPath="${LW_sv_ConfigDirPath}/${LW_sv_LoggedInUserName}"
    # Check that the user policies exist
    if ! test -e "${sv_ConfigDirPath}/LabWarden.plist"
    then
      LW_nf_logmessage "ATTENTION, user policies for '${LW_sv_LoggedInUserName}' not available, running gpupdate"
      /usr/local/LabWarden/util/gpupdate "${LW_sv_LoggedInUserName}"
    fi

    if test -e "${sv_ConfigDirPath}/LabWarden.plist"
    then
      # Check the age of the config
      iv_PlistLastUpdateEpoch=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:LastUpdateEpoch" 1136073660)
      iv_PlistAgeHours=$(((${LW_sv_ThisScriptStartEpoch}-${iv_PlistLastUpdateEpoch})/60/60))
      if [ ${iv_PlistAgeHours} -gt ${iv_GPConfigMaxAgeHours} ]
      then
        LW_nf_logmessage "ATTENTION, updating user policies for '${LW_sv_LoggedInUserName}' - they are ${iv_PlistAgeHours} hours old and exceed the maximum age."
        /usr/local/LabWarden/util/gpupdate "${LW_sv_LoggedInUserName}"
      else
        sv_PlistVersion=$(LW_sf_GetPlistProperty "${sv_ConfigDirPath}/LabWarden.plist" ":LabWarden:LocalPrefs:Version")
        if [ "${sv_PlistVersion}" != "${LW_sv_LabWardenVersion}" ]
        then
          LW_nf_logmessage "ATTENTION, updating user policies for '${LW_sv_LoggedInUserName}' - LabWarden version has changed."
          /usr/local/LabWarden/util/gpupdate "${LW_sv_LoggedInUserName}"
        fi
      fi
    fi
        
  fi

fi

if test -n "${LW_sv_LoggedInUserName}"
then
  sv_ConfigDirPath="${LW_sv_ConfigDirPath}/${LW_sv_LoggedInUserName}"
  
  if test -e "${sv_ConfigDirPath}/DelayedUninstall"
  then
    # Uninstall delayed payloads
    LW_nf_logmessage "ATTENTION, uninstalling delayed payloads for user '${LW_sv_LoggedInUserName}'"
    ls -1 "${sv_ConfigDirPath}/DelayedUninstall" | while read sv_PayloadFileName
    do
      sv_PayloadFileExt=$(echo ${sv_PayloadFileName} | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
      if test -e /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall
      then
        
        # Complications arise due to OS version differences
        bv_HandleUserPayloadDelays="true"
        case ${sv_PayloadFileExt} in
        mobileconfig) 
          if [ ${LW_iv_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # Pre OS X 10.11, the user needs to install his own mobileconfig
            if [ "${LW_sv_ThisUserName}" != "${LW_sv_LoggedInUserName}" ]
            then
              bv_HandleUserPayloadDelays="false"
            fi
          else
            # Only root needs to install user delayed payloads
            if [ "${LW_sv_ThisUserName}" != "root" ]
            then
              bv_HandleUserPayloadDelays="false"
            fi
          fi
          ;;
      
          *)
            # Ideally, only root should install user delayed payloads
            if [ "${LW_sv_ThisUserName}" != "root" ]
            then
              bv_HandleUserPayloadDelays="false"
            fi
            ;;
      
        esac
        
        if [ "${bv_HandleUserPayloadDelays}" = "true" ]
        then
          /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-uninstall "${sv_ConfigDirPath}/DelayedUninstall/${sv_PayloadFileName}" "${LW_sv_LoggedInUserName}"
          if [ "$?" = "0" ]
          then
            rm -f "${sv_ConfigDirPath}/DelayedUninstall/${sv_PayloadFileName}"
                
          else
            LW_nf_logmessage "ATTENTION, failed to uninstall '${sv_PayloadFileName}'."
                
          fi
        fi
          
      fi
    done
    if test -z "$(ls -1 "${sv_ConfigDirPath}/DelayedUninstall")"
    then
      rm -fR "${sv_ConfigDirPath}/DelayedUninstall"
    fi
  fi
  
  if test -e "${sv_ConfigDirPath}/DelayedInstall"
  then
    # install delayed payloads
    LW_nf_logmessage "ATTENTION, installing delayed payloads for user '${LW_sv_LoggedInUserName}'"
    ls -1 "${sv_ConfigDirPath}/DelayedInstall" | while read sv_PayloadFileName
    do
      sv_PayloadFileExt=$(echo ${sv_PayloadFileName} | sed 's|^[^\.]*\.||;s|\.|-|' | tr [A-Z] [a-z])
      if test -e /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-install
      then
        
        # Complications arise due to OS version differences
        bv_HandleUserPayloadDelays="true"
        case ${sv_PayloadFileExt} in
        mobileconfig) 
          if [ ${LW_iv_SystemVersionStampAsNumber} -lt 168493056 ]
          then
            # Pre OS X 10.11, the user needs to install his own mobileconfig
            if [ "${LW_sv_ThisUserName}" != "${LW_sv_LoggedInUserName}" ]
            then
              bv_HandleUserPayloadDelays="false"
            fi
          else
            # Only root needs to install user delayed payloads
            if [ "${LW_sv_ThisUserName}" != "root" ]
            then
              bv_HandleUserPayloadDelays="false"
            fi
          fi
          ;;
      
          *)
            # Ideally, only root should install user delayed payloads
            if [ "${LW_sv_ThisUserName}" != "root" ]
            then
              bv_HandleUserPayloadDelays="false"
            fi
            ;;
      
        esac
        
        if [ "${bv_HandleUserPayloadDelays}" = "true" ]
        then
          /usr/local/LabWarden/PayloadHandlers/${sv_PayloadFileExt}-install "${sv_ConfigDirPath}/DelayedInstall/${sv_PayloadFileName}" "${LW_sv_LoggedInUserName}"
          if [ "$?" = "0" ]
          then
            rm -f "${sv_ConfigDirPath}/DelayedInstall/${sv_PayloadFileName}"
                
          else
            LW_nf_logmessage "ATTENTION, failed to install '${sv_PayloadFileName}'."
                
          fi
        fi
          
      fi
    done
    if test -z "$(ls -1 "${sv_ConfigDirPath}/DelayedInstall")"
    then
      rm -fR "${sv_ConfigDirPath}/DelayedInstall"
    fi
  fi

fi
# ---

# Check policies against event
LW_nf_TriggerEvent "${sv_EventHistory}" "${sv_EventName}" "${sv_OptionalParam}"

# Remove temporary files
rm -fPR "${LW_sv_ThisScriptTempDirPath}"

# Have we been flagged to restart or shutdown
if [ "${LW_sv_ThisUserName}" = "root" ]
then
  if [ -e "${LW_sv_ThisUserTempDirPath}/RestartNow" ] || [ -e "${LW_sv_ThisUserTempDirPath}/ShutdownNow" ]
  then
    while [ -n "$(ls -1 "${LW_sv_ThisUserTempDirPath}/ActiveEvents")" ]
    do
      LW_nf_logmessage "NOTE, Waiting for events to finish in order to restart or shutdown"
      sleep 1
    done
    if [ -e "${LW_sv_ThisUserTempDirPath}/RestartNow" ]
    then
      LW_nf_logmessage "ATTENTION, restarting workstation"
      shutdown -r now
    fi
    if [ -e "${LW_sv_ThisUserTempDirPath}/ShutdownNow" ]
    then
      LW_nf_logmessage "ATTENTION, shutting down workstation"
      shutdown -h now
    fi
  fi

fi

