#!/bin/bash
#
# Short:    Handle a Poll Trigger
# Author:   Mark J Swift
# Version:  2.0.6
# Modified: 27-May-2017
#
# Called as follows:    
#   Poll "Sys|Sys-LoginWindow|Usr"
#

# ---

# Get poll
sv_PollName="${1}"

if test -z "${sv_PollName}"
then
  # We need something to work with
  exit 0
fi

# ---

# Load the contants, only if they are not already loaded
if test -z "${GLB_sv_ProjectSignature}"
then
  . /usr/local/LabWarden/inc/Constants.sh
fi

# ---

# Trigger the Poll event
/usr/local/${GLB_sv_ProjectName}/lib/Trigger "${sv_PollName}Poll" &

# ---

# Get seconds that mac mouse/keyboard is idle - thanks to https://github.com/CLCMacTeam/IdleLogout
GLB_if_UserInteractionIdleSecs()
{
  echo $(($(ioreg -c IOHIDSystem | sed -e '/HIDIdleTime/ !{ d' -e 't' -e '}' -e 's/.* = //g' -e 'q') / 1000000000))
}

case ${sv_PollName} in
Usr-)
  iv_IdleTriggerSecs=${GLB_iv_UsrPollTriggerSecs}
  ;;
Sys-)
  iv_IdleTriggerSecs=${GLB_iv_SysPollTriggerSecs}
  ;;
Sys-LoginWindow)
  iv_IdleTriggerSecs=${GLB_iv_SysLoginWindowPollTriggerSecs}
  ;;
esac
      
# If there has been no recent input, trigger an idle event 
# If there continues to be no input, the idle event will continue to be triggered with every subsequent poll event
iv_IdleSecs=$(GLB_if_UserInteractionIdleSecs)
if [ ${iv_IdleSecs} -gt ${iv_IdleTriggerSecs} ]
then
  # Trigger an Idle event
  /usr/local/${GLB_sv_ProjectName}/lib/Trigger "${sv_PollName}Idle" &
fi

# ---

# We dont want to quit until the background scripts are finished or they might terminate early
while [ -n "$(jobs -r)" ]
do
  # we don't want to hog the CPU - so lets sleep a while
  sleep 1
done
