#!/bin/bash
#
# Short:    Handle a Poll Trigger
# Author:   Mark J Swift
# Version:  3.2.5
# Modified: 30-Dec-2020
#
# Called as follows:    
#   Poll [LoginWindow]
#

# ---
  
# Assume that this code is run from a directory within the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Get user name
GLB_SV_RUNUSERNAME="$(whoami)"

# ---

# Get poll
sv_PollType="${1}"

case ${sv_PollType} in
LoginWindow)
  ;;
  
*)
  sv_PollType=""
  ;;
  
esac

# ---

if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
then
  sv_PollType="Sys-${sv_PollType}"
else
  sv_PollType="Usr-${sv_PollType}"
fi

# ---

# Trigger the Poll event
"${GLB_SV_PROJECTDIRPATH}"/bin/Trigger "${sv_PollType}Poll" &

# ---

# Include the constants library (if it is not already loaded)
if [ -z "${GLB_BC_CONST_ISINCLUDED}" ]
then
  . "${GLB_SV_PROJECTDIRPATH}"/inc-sh/Constants.sh

  # Exit if something went wrong unexpectedly
  if test -z "${GLB_BC_CONST_ISINCLUDED}"
  then
    echo >&2 "Something unexpected happened"
    exit 90
  fi
fi

# ---

# Get seconds that mac mouse/keyboard is idle - ref https://github.com/CLCMacTeam/IdleLogout
GLB_if_HIDIdleTime()
{
  echo $(($(ioreg -c IOHIDSystem | sed -e '/HIDIdleTime/ !{ d' -e 't' -e '}' -e 's/.* = //g' -e 'q') / 1000000000))
}

GLB_NF_NAMEDFLAGCREATE() # ; FlagName [epoch]
# FlagName can be anything - LabWarden root user uses Restart, Shutdown
{
  local sv_FlagName
  local sv_FlagDirPath

  sv_FlagName="${1}"
  sv_Epoch="${2}"

  sv_FlagDirPath="${GLB_SV_RUNUSERTEMPDIRPATH}/Flags"
  mkdir -p "${sv_FlagDirPath}"
   
  if [ -z "${sv_Epoch}" ]
  then
    touch "${sv_FlagDirPath}/${sv_FlagName}"
  else
    touch -t $(date -r ${sv_Epoch} "+%Y%m%d%H%M.%S") "${sv_FlagDirPath}/${sv_FlagName}"
  fi
    
  chown "$(whoami)" "${sv_FlagDirPath}/${sv_FlagName}"
#    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Creating flag '${sv_FlagDirPath}/${sv_FlagName}'"
}

GLB_NF_NAMEDFLAGMEPOCH() # ; FlagName
{
  local sv_FlagName
  local sv_FlagDirPath
  local iv_FlagEpoch

  sv_FlagName="${1}"
    
  sv_FlagDirPath="${GLB_SV_RUNUSERTEMPDIRPATH}/Flags"

  if test -e "${sv_FlagDirPath}/${sv_FlagName}"
  then
    iv_FlagEpoch=$(stat -f "%m" "${sv_FlagDirPath}/${sv_FlagName}")
  else
    iv_FlagEpoch=0
  fi
    
  echo ${iv_FlagEpoch}
}

# ---

  # The base locations of all temporary directories
  GLB_SV_TEMPROOT="/tmp/${GLB_SC_PROJECTNAME}"
  GLB_AV_TEMPUSERSROOT="${GLB_SV_TEMPROOT}/Users"
  
  # Create base temporary directories
  if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
  then
    mkdir -p "${GLB_SV_TEMPROOT}"
    chown root:wheel "${GLB_SV_TEMPROOT}"
    chmod 1755 "${GLB_SV_TEMPROOT}"

    mkdir -p "${GLB_AV_TEMPUSERSROOT}"
    chown root:wheel "${GLB_AV_TEMPUSERSROOT}"
    chmod 1777 "${GLB_AV_TEMPUSERSROOT}"
  fi
    
  # Create a temporary directory private to this user (and admins)
  GLB_SV_RUNUSERTEMPDIRPATH=${GLB_AV_TEMPUSERSROOT}/${GLB_SV_RUNUSERNAME}
  if ! test -d "${GLB_SV_RUNUSERTEMPDIRPATH}"
  then
    mkdir -p "${GLB_SV_RUNUSERTEMPDIRPATH}"
    chown ${GLB_SV_RUNUSERNAME}:admin "${GLB_SV_RUNUSERTEMPDIRPATH}"
    chmod 770 "${GLB_SV_RUNUSERTEMPDIRPATH}"
  fi

# ---

case ${sv_PollType} in
Usr-)
  iv_IdleTriggerSecs=$((${GLB_IC_USRPOLLTRIGGERSECS}*3))
  ;;
Sys-)
  iv_IdleTriggerSecs=$((${GLB_IC_SYSPOLLTRIGGERSECS}*3))
  ;;
Sys-LoginWindow)
  iv_IdleTriggerSecs=$((${GLB_IC_SYSLOGINWINDOWPOLLTRIGGERSECS}*3))
  ;;
esac
      
# If there has been no recent input, trigger an idle event 
# If there continues to be no input, the idle event will continue to be triggered with every subsequent poll event

iv_NowEpoch=$(date -u "+%s")
iv_IdleSecs=$(GLB_if_HIDIdleTime)
      
if [ ${iv_IdleSecs} -gt ${iv_IdleTriggerSecs} ]
then
  GLB_NF_NAMEDFLAGCREATE "LASTIDLEEVENT" ${iv_NowEpoch}
  # Trigger an Idle event
  "${GLB_SV_PROJECTDIRPATH}"/bin/Trigger "${sv_PollType}Idle" &
  
else
  iv_LastIdleFlagEpoch=$(GLB_NF_NAMEDFLAGMEPOCH "LASTIDLEEVENT")
  if [ ${iv_LastIdleFlagEpoch} -eq 0 ]
  then
    iv_LastIdleFlagEpoch=${iv_NowEpoch}
    GLB_NF_NAMEDFLAGCREATE "LASTIDLEEVENT" ${iv_LastIdleFlagEpoch}
  fi
  iv_LastIdleSecs=$((${iv_NowEpoch}-${iv_LastIdleFlagEpoch}))

  if [ ${iv_LastIdleSecs} -gt ${GLB_IC_FORCEIDLETRIGGERSECS} ]
  then
    # Trigger an Idle event
    "${GLB_SV_PROJECTDIRPATH}"/bin/Trigger "${sv_PollType}Idle" &
  fi
  
fi

# ---

# We dont want to quit until the background scripts are finished or they might terminate early
while [ -n "$(jobs -r)" ]
do
  # we don't want to hog the CPU - so lets sleep a while
  sleep 1
done
