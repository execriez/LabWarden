#!/bin/bash
#
# Short:    Utility Script - Update configs from installed mobileconfigs
# Author:   Mark J Swift
# Version:  3.2.6
# Modified: 01-Jan-2021
#
# Called as follows:    
#   ManagedPrefs [-list|-update]
#
# Without a user specified, updates the workstation config.
# With a user, updates the config for the specified user.

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# Get user name
GLB_SV_RUNUSERNAME="$(whoami)"

# ---

# Get option and user (if passed)
sv_CommandOption="${1}"

case ${sv_CommandOption} in

-list)
  ;;

-update)
  ;;

*)
  sv_CommandOption="-update"
  ;;

esac

# ---

GLB_SV_CODEVERSION="3.2.6"

# ---

# Include the Core Defs library (if it is not already loaded)
if [ -z "${GLB_BC_CORE_ISINCLUDED}" ]
then
  . "${GLB_SV_PROJECTDIRPATH}"/inc-sh/CoreDefs.sh

  # Exit if something went wrong unexpectedly
  if [ -z "${GLB_BC_CORE_ISINCLUDED}" ]
  then
    echo >&2 "Something unexpected happened"
    exit 90
  fi
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'inc/Common.sh' for a complete list.

# ---

# Here we start for real

# ---

sv_EventsFileName="LabWarden-KnownEvents.plist"
sv_KnownProfilesFileName="LabWarden-KnownProfiles.txt"
sv_KnownPayloadsFileName="LabWarden-KnownPayloads.txt"

# ---

if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
then
  sv_InstallEventName="Sys-PolicyInstall"
  sv_UninstallEventName="Sys-PolicyUninstall"

else
  sv_InstallEventName="Usr-PolicyInstall"
  sv_UninstallEventName="Usr-PolicyUninstall"
    
fi
  
# ---

# Create the base directories

mkdir -p "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config"
mkdir -p "${GLB_SV_RUNNINGCONFIGDIRPATH}/Prefs"
mkdir -p "${GLB_SV_RUNNINGCONFIGDIRPATH}/Shared"

mkdir -p "${GLB_SV_RUNNINGCONFIGDIRPATH}/Archive/Config"
mkdir -p "${GLB_SV_RUNNINGCONFIGDIRPATH}/Archive/Prefs"

chmod -R 755 "${GLB_SV_RUNNINGCONFIGDIRPATH}"

# ---

case ${sv_CommandOption} in

-list)
  sv_KnownPayloadsFilePath="${GLB_SV_THISSCRIPTTEMPDIRPATH}/LabWarden-KnownPayloads.$$.txt"


  if [ -e "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/LabWarden-KnownPayloads.txt" ]
  then
    if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
    then
      cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/LabWarden-KnownPayloads.txt" | grep -E "^[^:]*:[^:]*:Sys-" >"${sv_KnownPayloadsFilePath}"
    else
      cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/LabWarden-KnownPayloads.txt" | grep -E "^[^:]*:[^:]*:Usr-" >"${sv_KnownPayloadsFilePath}"
    fi
  fi

  if [ "${GLB_SV_RUNUSERNAME}" != "root" ]
  then
    if [ -e "${GLB_SV_COMPUTERCONFIGDIRPATH}/Config/LabWarden-KnownPayloads.txt" ]
    then
      cat "${GLB_SV_COMPUTERCONFIGDIRPATH}/Config/LabWarden-KnownPayloads.txt" | grep -E "^[^:]*:[^:]*:Usr-" >>"${sv_KnownPayloadsFilePath}"
    fi
  fi
  
  cat "${sv_KnownPayloadsFilePath}" | sort -u
  ;;
  
# ---

-update)
  # Grab  lock
  if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "'${GLB_SV_THISSCRIPTFILENAME}' aborted. Another instance is already running."
    
  else
    # ---

    sv_EventsFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_EventsFileName}"

    # If the old events plist exists, rebuild from scratch
    if test -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/LabWarden-Events.plist"
    then
      rm -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/LabWarden-Events.plist"
      rm -f "${sv_EventsFilePath}"
      rm -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"
      rm -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Old config - rebuilding..."
    fi

    # If the events plist exists, and has a size of zero - something has gone wrong - so rebuild from scratch
    if test -f "${sv_EventsFilePath}"
    then
      if ! test -s "${sv_EventsFilePath}"
      then
        rm -f "${sv_EventsFilePath}"
        rm -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"
        rm -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "File possibly corrupt '${sv_EventsFilePath}' - rebuilding..."
      fi
    fi

    if ! test -e "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Updating known profiles and payloads'"
      find ${GLB_SV_RUNNINGCONFIGDIRPATH} -depth 1 -prune -iname "*.txt" -exec rm -f "{}" \;
      rm -f "${sv_EventsFilePath}"

      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating empty '${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}'"
      touch "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"
    fi

    if ! test -e "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating empty '${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}'"
      touch "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"
    fi

    if ! test -e "${sv_EventsFilePath}"
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating empty '${sv_EventsFilePath}'"
      /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Save" "${sv_EventsFilePath}"
    fi

    # Fix possible access issues
    chmod 755 "${sv_EventsFilePath}"

    # the location of the managed prefs file
    sv_ManagedPrefsFilePath="/Library/Managed Preferences/${GLB_SC_PROJECTSIGNATURE}.plist"

    if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
    then

      # make sure the managed prefs directory exists
      if ! test -e "/Library/Managed Preferences"
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating folder '/Library/Managed Preferences'"
        mkdir -p "/Library/Managed Preferences"
        chmod 755 "/Library/Managed Preferences"
      fi
      
      # make sure the managed prefs files exists
      if [ ! -e "${sv_ManagedPrefsFilePath}" ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating empty '${sv_ManagedPrefsFilePath}'"
        /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Save" "${sv_ManagedPrefsFilePath}"
        chmod 644 "${sv_ManagedPrefsFilePath}"
      fi
         
    fi

    # --- now strip the configs from the installed mobileconfigs
  
    if [ -e "${sv_ManagedPrefsFilePath}" ]
    then

    sv_ConfigTmpDirPath="${GLB_SV_THISSCRIPTTEMPDIRPATH}/${GLB_SV_HOSTNAME}-${GLB_SV_RUNUSERNAME}/Config"
    mkdir -p "${sv_ConfigTmpDirPath}"

    bv_CheckConfig=${GLB_BC_TRUE}

    while [ "${bv_CheckConfig}" = ${GLB_BC_TRUE} ]
    do
      bv_CheckConfig=${GLB_BC_FALSE}
  
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Exporting Managed prefs"


      # We will only exit when we are satisfied we have a stable export of the current managed prefs
      while [ 1 -eq 1 ]
      do
        
        # Wait until there hasn't been a change to the managed pref file for a short time
        while [ 1 -eq 1 ]
        do
          iv_NowEpoch=$(date -u "+%s")
        
          iv_ManagedPrefsEpoch=$(stat -f "%m" "${sv_ManagedPrefsFilePath}")
          if [ -z "${iv_ManagedPrefsEpoch}" ]
          then
            iv_ManagedPrefsEpoch=${iv_NowEpoch}
          fi

          if [ $((${iv_NowEpoch}-${iv_ManagedPrefsEpoch})) -gt 5 ]
          then
            break
          fi
          
          sleep 1
        done

        # Export the all the managed prefs into a file
        if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
        then
#          profiles -L | grep "profileIdentifier:" | cut -d" " -f 4- | sort -u > "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt"
          sv_Result=$(profiles -L | grep "profileIdentifier:" | cut -d" " -f 4- | sort -u)
          iv_Err=$?
          sv_TopLevelKeyName="_computerlevel"
        else
#          profiles -L -U ${GLB_SV_RUNUSERNAME} | grep "profileIdentifier:" | cut -d" " -f 4- | sort -u > "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt"
          sv_Result=$(profiles -L -U ${GLB_SV_RUNUSERNAME} | grep "profileIdentifier:" | cut -d" " -f 4- | sort -u)
          iv_Err=$?
          sv_TopLevelKeyName=${GLB_SV_RUNUSERNAME}
        fi
        
        # Only exit if there are no errors
        if [ ${iv_Err} -eq 0 ]
        then
          echo "${sv_Result}" > "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt"
          break
        fi
      done

      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Processing Managed prefs"

      cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}" | sort -u > "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"

#      diff "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt" | grep -E "^> " | cut -d" " -f2 > "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt"
#      diff "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt" | grep -E "^< " | cut -d" " -f2 > "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"

      echo "$(cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}";echo;cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}";echo;cat "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt";echo)" | sort | grep . | uniq -u > "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt"
      echo "$(cat "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt";echo;cat "${sv_ConfigTmpDirPath}/LabWarden-InstalledProfiles.txt";echo;cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}";echo)" | sort | grep . | uniq -u > "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"

#echo "ALREADY INSTALLED"
#cat "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"

#echo "INSTALL THESE"
#cat "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt"

#echo "UNINSTALL THESE"
#cat "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"

      if [ -s "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt" ]
      then
        bv_CheckConfig=${GLB_BC_TRUE}

#GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "UNINSTALL THESE..."
#GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "$(cat "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt")"

        while read sv_ProfileIdentifier
        do
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Removing config for profile ${sv_ProfileIdentifier}"
    
          # Remove profile entry from Known Profiles list
          if test -s "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"
          then
            cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}" | grep -v "${sv_ProfileIdentifier}" > "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"
            cp -f "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"
          fi
    
          # Remove payload entries from events plist
          if test -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"
          then
            while read sv_PolicyConfigUUID
            do
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Removing config payload ${sv_PolicyConfigUUID}"
          
              # Remove entries containing the PayloadUUID from the Events list
              if test -f "${sv_EventsFilePath}"
              then
                cat "${sv_EventsFilePath}" | grep -v "${sv_PolicyConfigUUID}" > "${sv_ConfigTmpDirPath}/${sv_EventsFileName}"
                cp -f "${sv_ConfigTmpDirPath}/${sv_EventsFileName}" "${sv_EventsFilePath}"
    	    	chmod 755 "${sv_EventsFilePath}"
              fi
          
#              sv_PolicyConfigFilePath="${GLB_SV_COMPUTERCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist"
#              if [ ! -e "${sv_PolicyConfigFilePath}" ]
#              then
#                sv_PolicyConfigFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist"
#              fi
#              
#              sv_PolicyName=$(GLB_SF_GETPLISTPROPERTY "${sv_PolicyConfigFilePath}" ":${sv_PolicyConfigUUID}:Name")
#              if [ -n "${sv_PolicyName}" ]
#              then  
#                sv_PolicyExeFilePath=$(GLB_SF_POLICYEXEFILEPATH "${sv_PolicyName}")
#                if test -n "${sv_PolicyExeFilePath}"
#                then
#          
#                  # Shared prefs are referenced by Policy Name. These survive policy updates and uninstalls.
#                  sv_SharedPrefsFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Shared/${sv_PolicyName}.plist"
#
#                  # Local prefs are referenced by Policy UUID. These are deleted when the policy is updated or uninstalled.
#                  sv_PolicyPrefsFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Prefs/${sv_PolicyConfigUUID}.plist"
#
## By the time we are here, these need to be defined
## y sv_PolicyExeFilePath
## y sv_PolicyName
## y sv_EventName
## y GLB_SV_OPTIONALPARAM
## y GLB_SV_CONSOLEUSERINFO
## y sv_PolicyConfigUUID
## y sv_PolicyConfigFilePath 
## y sv_PolicyPrefsFilePath
## y sv_SharedPrefsFilePath
## y GLB_SV_SYSDEFAULTSCONFIGFILEPATH
## y GLB_SV_LOGINFO
#
#                    # Call Policy script passing an "PolicyUninstall" event - wait for policy to finish before continuing (don't run in background)
#GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Executing: '${sv_PolicyExeFilePath}' '${sv_PolicyName}' '${sv_EventName}' '${GLB_SV_OPTIONALPARAM}' '${GLB_SV_CONSOLEUSERINFO}' '${sv_PolicyConfigUUID}' '${sv_PolicyConfigFilePath}' '${sv_PolicyPrefsFilePath}' '${sv_SharedPrefsFilePath}' '${GLB_SV_SYSDEFAULTSCONFIGFILEPATH}' '${GLB_SV_LOGINFO}'"
#"${sv_PolicyExeFilePath}" "${sv_PolicyName}" "${sv_UninstallEventName}" "${GLB_SV_OPTIONALPARAM}" "${GLB_SV_CONSOLEUSERINFO}" "${sv_PolicyConfigUUID}" "${sv_PolicyConfigFilePath}" "${sv_PolicyPrefsFilePath}" "${sv_SharedPrefsFilePath}" "${GLB_SV_SYSDEFAULTSCONFIGFILEPATH}" "${GLB_SV_LOGINFO}"
#            
#                fi
#              fi

              # Delete config
              #rm -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist"

              # Backup config
              mv -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist" "${GLB_SV_RUNNINGCONFIGDIRPATH}/Archive/Config/${sv_PolicyConfigUUID}.plist"

            done < <(cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}" | grep "${sv_ProfileIdentifier}" | cut -d":" -f4)
      
            # Remove payload entries from Known Payload list
            cat "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}" | grep -v "${sv_ProfileIdentifier}" > "${sv_ConfigTmpDirPath}/${sv_KnownPayloadsFileName}"

            cp -f "${sv_ConfigTmpDirPath}/${sv_KnownPayloadsFileName}" "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"
          fi
    
        done < "${sv_ConfigTmpDirPath}/DoUninstallTheseProfiles.txt"
      fi

      if [ -s "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt" ]
      then
        bv_CheckConfig=${GLB_BC_TRUE}

#GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "INSTALL THESE..."
#GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "$(cat "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt")"

        sv_ProfilesFilePath="${sv_ConfigTmpDirPath}/object.xml"
        rm -f "${sv_ProfilesFilePath}"
        rm -f "${sv_ProfilesFilePath}.plist"

        if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
        then
          profiles -Lv -o "${sv_ProfilesFilePath}"

        else
          profiles -Lv -U ${GLB_SV_RUNUSERNAME} -o "${sv_ProfilesFilePath}"

        fi
    
        # Bug fix for early versions of the profiles command that add .plist to the end of the supplied filename
        if [ -f "${sv_ProfilesFilePath}.plist" ]
        then
          sv_ProfilesFilePath="${sv_ProfilesFilePath}.plist"
        fi

        iv_TopLevelKeyCount=$(GLB_IF_GETPLISTARRAYSIZE ${sv_ProfilesFilePath} ":${sv_TopLevelKeyName}")

        for (( iv_LoopCount1=0; iv_LoopCount1<${iv_TopLevelKeyCount}; iv_LoopCount1++ ))
        do
          sv_ProfileIdentifier="$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileIdentifier'" "${sv_ProfilesFilePath}")"

          if test -n "$(cat "${sv_ConfigTmpDirPath}/DoInstallTheseProfiles.txt" | grep "${sv_ProfileIdentifier}")"
          then
            cp -f "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}" "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"
            echo "${sv_ProfileIdentifier}" >> "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}"
            cat "${sv_ConfigTmpDirPath}/${sv_KnownProfilesFileName}" | sort -u > "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownProfilesFileName}"

            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Processing mobileconfig '${sv_ProfileIdentifier}' for config payloads"

            bv_configOK=${GLB_BC_TRUE}
    
            sv_ProfileDisplayName="$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileDisplayName'" "${sv_ProfilesFilePath}")"

            if test -n "$(echo ${sv_ProfileDisplayName} | grep -E "^${GLB_SC_PROJECTINITIALS} (Sys-|Usr-)")"
            then
              iv_ProfileItemsCount=$(GLB_IF_GETPLISTARRAYSIZE ${sv_ProfilesFilePath} ":${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems")

              for (( iv_LoopCount2=0; iv_LoopCount2<${iv_ProfileItemsCount}; iv_LoopCount2++ ))
              do
                sv_PayloadType=$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems:${iv_LoopCount2}:PayloadType'" ${sv_ProfilesFilePath})
# if [ "${sv_PayloadType}" = "${GLB_SC_PROJECTSIGNATURE}" ] # Will re-introduce this at some point, but at the moment case doesn't matter       
                if test -n "$(echo "${sv_PayloadType}" | grep -iE "^${GLB_SC_PROJECTSIGNATURE}$")"        
                then
                  sv_PolicyConfigUUID=$(/usr/libexec/PlistBuddy 2>/dev/null -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems:${iv_LoopCount2}:PayloadUUID'" ${sv_ProfilesFilePath})

                  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Processing config payload '${sv_PolicyConfigUUID}'"

                  sv_PolicyConfigFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist"
        
                  if ! test -f "${sv_PolicyConfigFilePath}"
                  then
                    /usr/libexec/PlistBuddy 2>/dev/null -x -c "Print ':${sv_TopLevelKeyName}:${iv_LoopCount1}:ProfileItems:${iv_LoopCount2}:PayloadContent'" ${sv_ProfilesFilePath} >"${sv_PolicyConfigFilePath}"
                  fi

                  if test -f "${sv_PolicyConfigFilePath}"
                  then
                    sv_PolicyName=$(GLB_SF_GETPLISTPROPERTY "${sv_PolicyConfigFilePath}" ":${sv_PolicyConfigUUID}:Name")

# BEGIN LEGACY CONFIG SUPPORT (PRE 3.X) 

                    iv_TriggeredByItemsCount=$(GLB_IF_GETPLISTARRAYSIZE "${sv_PolicyConfigFilePath}" ":${sv_PolicyConfigUUID}:TriggeredBy")
                    for (( iv_LoopCount3=0; iv_LoopCount3<${iv_TriggeredByItemsCount}; iv_LoopCount3++ ))
                    do

                      sv_TriggeredByEventName=$(GLB_SF_GETPLISTPROPERTY "${sv_PolicyConfigFilePath}" ":${sv_PolicyConfigUUID}:TriggeredBy:${iv_LoopCount3}")
                      if test -n "${sv_TriggeredByEventName}"
                      then
                        # Create object
                        /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}'" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          # Add a new object
                          /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}' dict" "${sv_EventsFilePath}"
                          if [ $? -ne 0 ]
                          then
                            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Failed to Add dict ':${sv_TriggeredByEventName}' to '${sv_EventsFilePath}'"
                            bv_configOK=${GLB_BC_FALSE}
                            break
                          fi
                        fi

                        # Create array
                        /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggeredByEventName}:DoesTrigger'" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          # Add a new object
                          /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}:DoesTrigger' array" "${sv_EventsFilePath}"
                          if [ $? -ne 0 ]
                          then
                            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR}  "Failed to Add dict ':${sv_TriggeredByEventName}:DoesTrigger' to '${sv_EventsFilePath}'"
                            bv_configOK=${GLB_BC_FALSE}
                            break
                          fi
                        fi
            
                        iv_DoesTriggerCount="$(GLB_IF_GETPLISTARRAYSIZE "${sv_PolicyConfigFilePath}" ":${sv_TriggeredByEventName}:DoesTrigger")"

                        if test -z "$(/usr/libexec/PlistBuddy 2>&1 -c "Print ':${sv_TriggeredByEventName}:DoesTrigger'" "${sv_EventsFilePath}" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | grep -E "^${sv_PolicyConfigUUID}$")"
                        then
                          /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' string" "${sv_EventsFilePath}"
                          if [ $? -ne 0 ]
                          then
                            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Failed to Add array entry ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' to '${sv_EventsFilePath}'"
                            bv_configOK=${GLB_BC_FALSE}
                            break
                          fi
            
                          # Set array Value    
                          /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Set ':${sv_TriggeredByEventName}:DoesTrigger:${iv_DoesTriggerCount}' '${sv_PolicyConfigUUID}'" "${sv_EventsFilePath}"
            
                        fi

                      fi

                    done
                    
# END LEGACY CONFIG SUPPORT (PRE 3.X)
                      
                    iv_TriggerItemsCount=$(GLB_IF_GETPLISTARRAYSIZE "${sv_PolicyConfigFilePath}" ":${sv_PolicyConfigUUID}:Trigger")
                    for (( iv_LoopCount3=0; iv_LoopCount3<${iv_TriggerItemsCount}; iv_LoopCount3++ ))
                    do

                      sv_TriggerEventName=$(GLB_SF_GETPLISTPROPERTY "${sv_PolicyConfigFilePath}" ":${sv_PolicyConfigUUID}:Trigger:${iv_LoopCount3}:Name")
                      if test -n "${sv_TriggerEventName}"
                      then
                        # Create object
                        /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggerEventName}'" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          # Add a new object
                          /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggerEventName}' dict" "${sv_EventsFilePath}"
                          if [ $? -ne 0 ]
                          then
                            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Failed to Add dict ':${sv_TriggerEventName}' to '${sv_EventsFilePath}'"
                            bv_configOK=${GLB_BC_FALSE}
                            break
                          fi
                        fi

                        # Create array
                        /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Print ':${sv_TriggerEventName}:DoesTrigger'" "${sv_EventsFilePath}"
                        if [ $? -ne 0 ]
                        then
                          # Add a new object
                          /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggerEventName}:DoesTrigger' array" "${sv_EventsFilePath}"
                          if [ $? -ne 0 ]
                          then
                            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR}  "Failed to Add dict ':${sv_TriggerEventName}:DoesTrigger' to '${sv_EventsFilePath}'"
                            bv_configOK=${GLB_BC_FALSE}
                            break
                          fi
                        fi
            
                        iv_DoesTriggerCount="$(GLB_IF_GETPLISTARRAYSIZE "${sv_PolicyConfigFilePath}" ":${sv_TriggerEventName}:DoesTrigger")"

                        if test -z "$(/usr/libexec/PlistBuddy 2>&1 -c "Print ':${sv_TriggerEventName}:DoesTrigger'" "${sv_EventsFilePath}" | grep -v "{" | grep -v "}" | sed "s|^[ ]*||;s|[ ]*$||" | grep -E "^${sv_PolicyConfigUUID}$")"
                        then
                          /usr/libexec/PlistBuddy 2>/dev/null -c "Add ':${sv_TriggerEventName}:DoesTrigger:${iv_DoesTriggerCount}' string" "${sv_EventsFilePath}"
                          if [ $? -ne 0 ]
                          then
                            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Failed to Add array entry ':${sv_TriggerEventName}:DoesTrigger:${iv_DoesTriggerCount}' to '${sv_EventsFilePath}'"
                            bv_configOK=${GLB_BC_FALSE}
                            break
                          fi
            
                          # Set array Value    
                          /usr/libexec/PlistBuddy >/dev/null 2>&1 -c "Set ':${sv_TriggerEventName}:DoesTrigger:${iv_DoesTriggerCount}' '${sv_PolicyConfigUUID}'" "${sv_EventsFilePath}"
            
                        fi

                      fi

                    done


                    if [ "${bv_configOK}" = ${GLB_BC_FALSE} ]
                    then
                      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Failed to install config payload '${sv_PolicyConfigUUID}'"

                    else
                      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Installing config payload '${sv_PolicyConfigUUID}'"
                      
                      echo "${sv_ProfileDisplayName}:${sv_ProfileIdentifier}:${sv_PolicyName}:${sv_PolicyConfigUUID}" >> "${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_KnownPayloadsFileName}"

#                      sv_PolicyExeFilePath=$(GLB_SF_POLICYEXEFILEPATH "${sv_PolicyName}")
#                      if test -n "${sv_PolicyExeFilePath}"
#                      then
#                        # Shared prefs are referenced by Policy Name. These survive policy updates and uninstalls
#                        sv_SharedPrefsFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Shared/${sv_PolicyName}.plist"
#
#                        # Local prefs are referenced by Policy UUID. These are deleted when the policy is updated or uninstalled.
#                        sv_PolicyPrefsFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Prefs/${sv_PolicyConfigUUID}.plist"
#
#                        sv_PolicyConfigFilePath="${GLB_SV_COMPUTERCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist"
#                        if [ ! -e "${sv_PolicyConfigFilePath}" ]
#                        then
#                          sv_PolicyConfigFilePath="${GLB_SV_RUNNINGCONFIGDIRPATH}/Config/${sv_PolicyConfigUUID}.plist"
#                        fi
#
# By the time we are here, these need to be defined
# y sv_PolicyExeFilePath
# y sv_PolicyName
# y sv_EventName
# y GLB_SV_OPTIONALPARAM
# y GLB_SV_CONSOLEUSERINFO
# y sv_PolicyConfigUUID
# y sv_PolicyConfigFilePath 
# y sv_PolicyPrefsFilePath
# y sv_SharedPrefsFilePath
# y GLB_SV_SYSDEFAULTSCONFIGFILEPATH
# y GLB_SV_LOGINFO
#
#                          # Call Policy script passing an "PolicyInstall" event - wait for policy to finish before continuing (don't run in background)
#GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Executing: '${sv_PolicyExeFilePath}' '${sv_PolicyName}' '${sv_EventName}' '${GLB_SV_OPTIONALPARAM}' '${GLB_SV_CONSOLEUSERINFO}' '${sv_PolicyConfigUUID}' '${sv_PolicyConfigFilePath}' '${sv_PolicyPrefsFilePath}' '${sv_SharedPrefsFilePath}' '${GLB_SV_SYSDEFAULTSCONFIGFILEPATH}' '${GLB_SV_LOGINFO}'"
#"${sv_PolicyExeFilePath}" "${sv_PolicyName}" "${sv_InstallEventName}" "${GLB_SV_OPTIONALPARAM}" "${GLB_SV_CONSOLEUSERINFO}" "${sv_PolicyConfigUUID}" "${sv_PolicyConfigFilePath}" "${sv_PolicyPrefsFilePath}" "${sv_SharedPrefsFilePath}" "${GLB_SV_SYSDEFAULTSCONFIGFILEPATH}" "${GLB_SV_LOGINFO}"
#
#                      fi
                    fi
                  fi
                fi
              done
              
            fi
          fi
        done
        
      fi
    done

    fi
    
    # ---

    # Release lock
    GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"
    
    # ---
  fi
  ;;

esac

# ---

# Remove temporary files
cd "${GLB_SV_PROJECTDIRPATH}"
rm -fR "${GLB_SV_THISSCRIPTTEMPDIRPATH}"

exit 0
